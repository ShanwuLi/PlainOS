
out/stm32f103c8t6.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	0800010c 	.word	0x0800010c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	0800010c 	.word	0x0800010c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2uiz>:
 8000368:	0042      	lsls	r2, r0, #1
 800036a:	d20e      	bcs.n	800038a <__aeabi_f2uiz+0x22>
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30b      	bcc.n	800038a <__aeabi_f2uiz+0x22>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d409      	bmi.n	8000390 <__aeabi_f2uiz+0x28>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	fa23 f002 	lsr.w	r0, r3, r2
 8000388:	4770      	bx	lr
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	4770      	bx	lr
 8000390:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000394:	d101      	bne.n	800039a <__aeabi_f2uiz+0x32>
 8000396:	0242      	lsls	r2, r0, #9
 8000398:	d102      	bne.n	80003a0 <__aeabi_f2uiz+0x38>
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	4770      	bx	lr
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <__libc_init_array>:
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	2600      	movs	r6, #0
 80003ac:	4d0c      	ldr	r5, [pc, #48]	; (80003e0 <__libc_init_array+0x38>)
 80003ae:	4c0d      	ldr	r4, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	42a6      	cmp	r6, r4
 80003b6:	d109      	bne.n	80003cc <__libc_init_array+0x24>
 80003b8:	f000 f932 	bl	8000620 <_init>
 80003bc:	2600      	movs	r6, #0
 80003be:	4d0a      	ldr	r5, [pc, #40]	; (80003e8 <__libc_init_array+0x40>)
 80003c0:	4c0a      	ldr	r4, [pc, #40]	; (80003ec <__libc_init_array+0x44>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	42a6      	cmp	r6, r4
 80003c8:	d105      	bne.n	80003d6 <__libc_init_array+0x2e>
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d0:	4798      	blx	r3
 80003d2:	3601      	adds	r6, #1
 80003d4:	e7ee      	b.n	80003b4 <__libc_init_array+0xc>
 80003d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003da:	4798      	blx	r3
 80003dc:	3601      	adds	r6, #1
 80003de:	e7f2      	b.n	80003c6 <__libc_init_array+0x1e>
 80003e0:	08000638 	.word	0x08000638
 80003e4:	08000638 	.word	0x08000638
 80003e8:	08000638 	.word	0x08000638
 80003ec:	0800063c 	.word	0x0800063c

080003f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003f0:	b410      	push	{r4}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003f2:	2000      	movs	r0, #0
  RCC->CIR = 0x009F0000;
 80003f4:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 80003f8:	4a39      	ldr	r2, [pc, #228]	; (80004e0 <SystemInit+0xf0>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003fa:	4b3a      	ldr	r3, [pc, #232]	; (80004e4 <SystemInit+0xf4>)
  RCC->CR |= (uint32_t)0x00000001;
 80003fc:	6811      	ldr	r1, [r2, #0]
{
 80003fe:	b083      	sub	sp, #12
  RCC->CR |= (uint32_t)0x00000001;
 8000400:	f041 0101 	orr.w	r1, r1, #1
 8000404:	6011      	str	r1, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000406:	6851      	ldr	r1, [r2, #4]
 8000408:	400b      	ands	r3, r1
 800040a:	6053      	str	r3, [r2, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800040c:	6813      	ldr	r3, [r2, #0]
 800040e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000416:	6013      	str	r3, [r2, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000418:	6813      	ldr	r3, [r2, #0]
 800041a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800041e:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000420:	6853      	ldr	r3, [r2, #4]
 8000422:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000426:	6053      	str	r3, [r2, #4]
  RCC->CIR = 0x009F0000;
 8000428:	6094      	str	r4, [r2, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800042a:	9000      	str	r0, [sp, #0]
 800042c:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800042e:	6813      	ldr	r3, [r2, #0]
 8000430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000434:	6013      	str	r3, [r2, #0]
 8000436:	e003      	b.n	8000440 <SystemInit+0x50>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000438:	9b00      	ldr	r3, [sp, #0]
 800043a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800043e:	d009      	beq.n	8000454 <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000440:	6813      	ldr	r3, [r2, #0]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000448:	9b00      	ldr	r3, [sp, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800044e:	9b01      	ldr	r3, [sp, #4]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f1      	beq.n	8000438 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <SystemInit+0xf0>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800045c:	bf18      	it	ne
 800045e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000460:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000462:	9b01      	ldr	r3, [sp, #4]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d006      	beq.n	8000476 <SystemInit+0x86>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000468:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <SystemInit+0xf8>)
 800046e:	609a      	str	r2, [r3, #8]
}
 8000470:	b003      	add	sp, #12
 8000472:	bc10      	pop	{r4}
 8000474:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000476:	4a1d      	ldr	r2, [pc, #116]	; (80004ec <SystemInit+0xfc>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <SystemInit+0xf0>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800047a:	6811      	ldr	r1, [r2, #0]
 800047c:	f041 0110 	orr.w	r1, r1, #16
 8000480:	6011      	str	r1, [r2, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000482:	6811      	ldr	r1, [r2, #0]
 8000484:	f021 0103 	bic.w	r1, r1, #3
 8000488:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800048a:	6811      	ldr	r1, [r2, #0]
 800048c:	f041 0102 	orr.w	r1, r1, #2
 8000490:	6011      	str	r1, [r2, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000496:	685a      	ldr	r2, [r3, #4]
 8000498:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004a0:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80004a8:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80004aa:	685a      	ldr	r2, [r3, #4]
 80004ac:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80004b0:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80004b8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	0192      	lsls	r2, r2, #6
 80004be:	d5fc      	bpl.n	80004ba <SystemInit+0xca>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004c0:	6859      	ldr	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <SystemInit+0xf0>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80004c4:	f021 0103 	bic.w	r1, r1, #3
 80004c8:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80004ca:	6859      	ldr	r1, [r3, #4]
 80004cc:	f041 0102 	orr.w	r1, r1, #2
 80004d0:	6059      	str	r1, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80004d2:	6853      	ldr	r3, [r2, #4]
 80004d4:	f003 030c 	and.w	r3, r3, #12
 80004d8:	2b08      	cmp	r3, #8
 80004da:	d1fa      	bne.n	80004d2 <SystemInit+0xe2>
 80004dc:	e7c4      	b.n	8000468 <SystemInit+0x78>
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	f8ff0000 	.word	0xf8ff0000
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	40022000 	.word	0x40022000

080004f0 <NMI_Handler>:
  * @retval None
  */
void NMI_Handler(void)
{
	
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <HardFault_Handler>
 80004f6:	bf00      	nop

080004f8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler>
 80004fa:	bf00      	nop

080004fc <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <BusFault_Handler>
 80004fe:	bf00      	nop

08000500 <UsageFault_Handler>:
  */
void UsageFault_Handler(void)
{

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000500:	e7fe      	b.n	8000500 <UsageFault_Handler>
 8000502:	bf00      	nop

08000504 <SVC_Handler>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <DebugMon_Handler>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <USART1_Init>:
#include <errno.h>
#include <types.h>
#include "early_uart.h"

void USART1_Init(uint_t USART1_BaudRate)
{
 800050c:	b538      	push	{r3, r4, r5, lr}
	unsigned int integer;                  
	float   decimal;                       
	RCC->APB2ENR|=(1<<14)|(1<<2);   //将IOPA时钟和USART1外设时钟使能       
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <USART1_Init+0x80>)
	USART1->CR1|=(1<<13);           //使能USART外设        
	USART1->CR1|=(1<<2);            //USART接收被使能     
	USART1->CR1|=(1<<5);            //缓冲区非空中断使能      
	USART1->CR1|=(1<<3);            //USART发送被使能                    

	integer=72*1000*1000/(USART1_BaudRate*16);         
 8000510:	4c1f      	ldr	r4, [pc, #124]	; (8000590 <USART1_Init+0x84>)
	RCC->APB2ENR|=(1<<14)|(1<<2);   //将IOPA时钟和USART1外设时钟使能       
 8000512:	699a      	ldr	r2, [r3, #24]
	integer=72*1000*1000/(USART1_BaudRate*16);         
 8000514:	0100      	lsls	r0, r0, #4
	RCC->APB2ENR|=(1<<14)|(1<<2);   //将IOPA时钟和USART1外设时钟使能       
 8000516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800051a:	f042 0204 	orr.w	r2, r2, #4
 800051e:	619a      	str	r2, [r3, #24]
	RCC->APB2RSTR|=(1<<14);         //将USART1外设复位       
 8000520:	68da      	ldr	r2, [r3, #12]
	integer=72*1000*1000/(USART1_BaudRate*16);         
 8000522:	fbb4 f4f0 	udiv	r4, r4, r0
	RCC->APB2RSTR|=(1<<14);         //将USART1外设复位       
 8000526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800052a:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR&=(~(1<<14));      //将USART1外设复位状态解除            
 800052c:	68da      	ldr	r2, [r3, #12]
	GPIOA->CRH&=0XFFFFF00F;         //将GPIOA A9和A10引脚输出模式清零       
 800052e:	4919      	ldr	r1, [pc, #100]	; (8000594 <USART1_Init+0x88>)
	RCC->APB2RSTR&=(~(1<<14));      //将USART1外设复位状态解除            
 8000530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000534:	60da      	str	r2, [r3, #12]
	GPIOA->CRH&=0XFFFFF00F;         //将GPIOA A9和A10引脚输出模式清零       
 8000536:	684b      	ldr	r3, [r1, #4]
	USART1->CR1|=(1<<13);           //使能USART外设        
 8000538:	4d17      	ldr	r5, [pc, #92]	; (8000598 <USART1_Init+0x8c>)
	GPIOA->CRH&=0XFFFFF00F;         //将GPIOA A9和A10引脚输出模式清零       
 800053a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800053e:	604b      	str	r3, [r1, #4]
	GPIOA->CRH|=0X000008B0;         //将GPIOA A9设置为上拉/下拉输入模式，A10引脚设置为复用推挽输出50MHz时钟模式    
 8000540:	684b      	ldr	r3, [r1, #4]
	decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   
 8000542:	4620      	mov	r0, r4
	GPIOA->CRH|=0X000008B0;         //将GPIOA A9设置为上拉/下拉输入模式，A10引脚设置为复用推挽输出50MHz时钟模式    
 8000544:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 8000548:	604b      	str	r3, [r1, #4]
	USART1->CR1|=(1<<13);           //使能USART外设        
 800054a:	89ab      	ldrh	r3, [r5, #12]
	USART1->BRR=(integer<<4)|((unsigned int)decimal*16);
 800054c:	0124      	lsls	r4, r4, #4
	USART1->CR1|=(1<<13);           //使能USART外设        
 800054e:	b29b      	uxth	r3, r3
 8000550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000554:	81ab      	strh	r3, [r5, #12]
	USART1->CR1|=(1<<2);            //USART接收被使能     
 8000556:	89ab      	ldrh	r3, [r5, #12]
 8000558:	b29b      	uxth	r3, r3
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	81ab      	strh	r3, [r5, #12]
	USART1->CR1|=(1<<5);            //缓冲区非空中断使能      
 8000560:	89ab      	ldrh	r3, [r5, #12]
 8000562:	b29b      	uxth	r3, r3
 8000564:	f043 0320 	orr.w	r3, r3, #32
 8000568:	81ab      	strh	r3, [r5, #12]
	USART1->CR1|=(1<<3);            //USART发送被使能                    
 800056a:	89ab      	ldrh	r3, [r5, #12]
 800056c:	b29b      	uxth	r3, r3
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	81ab      	strh	r3, [r5, #12]
	decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   
 8000574:	f7ff fea0 	bl	80002b8 <__aeabi_ui2f>
 8000578:	4601      	mov	r1, r0
 800057a:	f7ff fdeb 	bl	8000154 <__aeabi_fsub>
	USART1->BRR=(integer<<4)|((unsigned int)decimal*16);
 800057e:	f7ff fef3 	bl	8000368 <__aeabi_f2uiz>
 8000582:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
 8000586:	b2a4      	uxth	r4, r4
 8000588:	812c      	strh	r4, [r5, #8]
}
 800058a:	bd38      	pop	{r3, r4, r5, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	044aa200 	.word	0x044aa200
 8000594:	40010800 	.word	0x40010800
 8000598:	40013800 	.word	0x40013800

0800059c <USART1_PrintChar>:

int USART1_PrintChar(char c)
{
	uint_t times = 0;
	USART1->DR = c;
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <USART1_PrintChar+0x1c>)
 800059e:	4b07      	ldr	r3, [pc, #28]	; (80005bc <USART1_PrintChar+0x20>)
 80005a0:	8088      	strh	r0, [r1, #4]

	for (times = 0; times < 120000; times++)
 80005a2:	e001      	b.n	80005a8 <USART1_PrintChar+0xc>
 80005a4:	3b01      	subs	r3, #1
 80005a6:	d004      	beq.n	80005b2 <USART1_PrintChar+0x16>
		if(USART1->SR & (1 << 6)) //USART_SR第六位表示Transmission Complete
 80005a8:	880a      	ldrh	r2, [r1, #0]
 80005aa:	0652      	lsls	r2, r2, #25
 80005ac:	d5fa      	bpl.n	80005a4 <USART1_PrintChar+0x8>
			return 0;
 80005ae:	2000      	movs	r0, #0

	return -1;
}
 80005b0:	4770      	bx	lr
	return -1;
 80005b2:	f04f 30ff 	mov.w	r0, #4294967295
 80005b6:	4770      	bx	lr
 80005b8:	40013800 	.word	0x40013800
 80005bc:	0001d4c0 	.word	0x0001d4c0

080005c0 <pl_callee_entry>:

void pl_callee_entry(void);
void pl_callee_entry(void)
{
	uint_t USART1_BaudRate = 115200;
	USART1_Init(USART1_BaudRate);
 80005c0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
{
 80005c4:	b508      	push	{r3, lr}
	USART1_Init(USART1_BaudRate);
 80005c6:	f7ff ffa1 	bl	800050c <USART1_Init>
	while(1){
		USART1_PrintChar('A');
 80005ca:	2041      	movs	r0, #65	; 0x41
 80005cc:	f7ff ffe6 	bl	800059c <USART1_PrintChar>
	while(1){
 80005d0:	e7fb      	b.n	80005ca <pl_callee_entry+0xa>
 80005d2:	bf00      	nop

080005d4 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005d6:	e003      	b.n	80005e0 <LoopCopyDataInit>

080005d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopFillZerobss+0x14>)
	ldr	r3, [r3, r1]
 80005da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005de:	3104      	adds	r1, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <LoopFillZerobss+0x18>)
	ldr	r3, =_edata
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <LoopFillZerobss+0x1c>)
	adds	r2, r0, r1
 80005e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005e8:	d3f6      	bcc.n	80005d8 <CopyDataInit>
	ldr	r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <LoopFillZerobss+0x20>)
	b	LoopFillZerobss
 80005ec:	e002      	b.n	80005f4 <LoopFillZerobss>

080005ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005f0:	f842 3b04 	str.w	r3, [r2], #4

080005f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LoopFillZerobss+0x24>)
	cmp	r2, r3
 80005f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005f8:	d3f9      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fa:	f7ff fef9 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fe:	f7ff fed3 	bl	80003a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	pl_callee_entry
 8000602:	f7ff ffdd 	bl	80005c0 <pl_callee_entry>
	bx	lr
 8000606:	4770      	bx	lr
	ldr	r3, =_sidata
 8000608:	08000640 	.word	0x08000640
	ldr	r0, =_sdata
 800060c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000610:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000614:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000618:	2000001c 	.word	0x2000001c

0800061c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_2_IRQHandler>
	...

08000620 <_init>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr

0800062c <_fini>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr
