
out/main.elf:     file format elf32-littlearm
out/main.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000cb9

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000d50 memsz 0x00000d50 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08000d50 align 2**16
         filesz 0x00000444 memsz 0x00000584 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector       0000010c  08000000  08000000  00010000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text             00000c38  0800010c  0800010c  0001010c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes   0000002f  08000d44  08000d44  00020444  2**0  CONTENTS, READONLY
  3 .init_array       00000008  08000d44  08000d44  00010d44  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array       00000004  08000d4c  08000d4c  00010d4c  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data             00000444  20000000  08000d50  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              00000040  20000444  08001194  00020444  2**2  ALLOC
  7 ._user_heap_stack 00000100  20000484  080011d4  00020444  2**0  ALLOC
  8 .debug_frame      000004d0  00000000  00000000  00020474  2**2  CONTENTS, READONLY, DEBUGGING
  9 .debug_info       00001179  00000000  00000000  00020944  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     00000533  00000000  00000000  00021abd  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    000000a8  00000000  00000000  00021ff0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_line       000008ac  00000000  00000000  00022098  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_str        00000816  00000000  00000000  00022944  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment          00000076  00000000  00000000  0002315a  2**0  CONTENTS, READONLY
 15 .debug_ranges     00000020  00000000  00000000  000231d0  2**3  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
08000d44 l    d  .ARM.attributes	00000000 .ARM.attributes
08000d44 l    d  .init_array	00000000 .init_array
08000d4c l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000444 l    d  .bss	00000000 .bss
20000484 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 out/./arch/arm/stm32f103c8t6/startup_stm32f10x_md.o
f108f85f l       *ABS*	00000000 BootRAM
08000cc4 l       .text	00000000 LoopCopyDataInit
08000cbc l       .text	00000000 CopyDataInit
08000cd8 l       .text	00000000 LoopFillZerobss
08000cd2 l       .text	00000000 FillZerobss
08000d00 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800010c l     F .text	00000000 __do_global_dtors_aux
20000444 l       .bss	00000001 completed.8885
08000d4c l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
0800014c l     F .text	00000000 frame_dummy
20000448 l       .bss	00000018 object.8890
08000d48 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.c
0800017c l     F .text	0000003a delay
00000000 l    df *ABS*	00000000 system_stm32f10x.c
080003a8 l     F .text	00000012 SetSysClock
080003ba l     F .text	00000112 SetSysClockTo72
00000000 l    df *ABS*	00000000 stm32f10x_it.c
00000000 l    df *ABS*	00000000 USART.c
08000510 l     F .text	0000004c __NVIC_SetPriorityGrouping
0800055c l     F .text	00000044 __NVIC_EnableIRQ
080005a0 l     F .text	0000006c __NVIC_SetPriority
0800060c l     F .text	00000066 NVIC_EncodePriority
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _arm_fixunssfsi.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08000b68 l     F .text	00000028 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/crti.o
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/crtn.o
00000000 l    df *ABS*	00000000 
08000d50 l       .fini_array	00000000 __fini_array_end
08000d4c l       .fini_array	00000000 __fini_array_start
08000d4c l       .init_array	00000000 __init_array_end
08000d44 l       .ARM.attributes	00000000 __preinit_array_end
08000d44 l       .init_array	00000000 __init_array_start
08000d44 l       .ARM.attributes	00000000 __preinit_array_start
08000d00  w    F .text	00000002 EXTI2_IRQHandler
08000500 g     F .text	0000000e DebugMon_Handler
20000460 g     O .bss	00000001 __lock___atexit_recursive_mutex
08000d00  w    F .text	00000002 TIM1_CC_IRQHandler
080004da g     F .text	00000006 HardFault_Handler
00000100 g       *ABS*	00000000 _Min_Stack_Size
08000d00  w    F .text	00000002 SysTick_Handler
20000464 g     O .bss	00000001 __lock___arc4random_mutex
08000d00  w    F .text	00000002 PVD_IRQHandler
08000d50 g       .fini_array	00000000 _sidata
08000d00  w    F .text	00000002 PendSV_Handler
080004cc g     F .text	0000000e NMI_Handler
08000d44 g       .text	00000000 __exidx_end
08000d00  w    F .text	00000002 EXTI3_IRQHandler
20000440 g     O .data	00000004 __atexit_recursive_mutex
08000d44 g       .text	00000000 _etext
20000444 g       .bss	00000000 _sbss
080007ec g     F .text	000001bc .hidden __aeabi_fadd
080007e8 g     F .text	000001c0 .hidden __subsf3
08000d00  w    F .text	00000002 EXTI0_IRQHandler
08000d00  w    F .text	00000002 I2C2_EV_IRQHandler
20000000 g     O .data	00000004 SystemCoreClock
080009b0 g     F .text	00000020 .hidden __aeabi_i2f
080004ec g     F .text	00000006 UsageFault_Handler
08000d00  w    F .text	00000002 ADC1_2_IRQHandler
20000444 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000d00  w    F .text	00000002 SPI1_IRQHandler
08000d00  w    F .text	00000002 TAMPER_IRQHandler
08000d44 g       .text	00000000 __exidx_start
20000468 g     O .bss	00000001 __lock___env_recursive_mutex
2000046c g     O .bss	00000001 __lock___sinit_recursive_mutex
08000d10 g     O .text	00000004 _global_impure_ptr
08000ae0 g     F .text	00000088 __libc_init_array
08000d00  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000d14 g     F .text	00000000 _init
08000794 g     F .text	0000004c USART1_PrintString
08000d00  w    F .text	00000002 USART3_IRQHandler
080007e8 g     F .text	000001c0 .hidden __aeabi_fsub
08000bb0 g     F .text	00000048 __libc_fini_array
08000d00  w    F .text	00000002 RTC_IRQHandler
20000484 g       .bss	00000000 _ebss
08000d00  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000cb8  w    F .text	00000034 Reset_Handler
08000d00  w    F .text	00000002 CAN1_RX1_IRQHandler
20000470 g     O .bss	00000001 __lock___malloc_recursive_mutex
080009e0 g     F .text	000000ac .hidden __floatdisf
08000d00  w    F .text	00000002 TIM4_IRQHandler
08000d00  w    F .text	00000002 I2C1_EV_IRQHandler
08000bfc g     F .text	00000004 __retarget_lock_release_recursive
08000d00  w    F .text	00000002 DMA1_Channel6_IRQHandler
20000484 g       .bss	00000000 __bss_end__
08000d00  w    F .text	00000002 TIM3_IRQHandler
08000d00  w    F .text	00000002 RCC_IRQHandler
08000672 g     F .text	00000122 USART1_Init
08000d00  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
00000000 g       *ABS*	00000000 _Min_Heap_Size
08000d00  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000d00 g       .text	00000002 Default_Handler
20000004 g     O .data	00000010 AHBPrescTable
080009b0 g     F .text	00000020 .hidden __floatsisf
08000d00  w    F .text	00000002 EXTI15_10_IRQHandler
08000c00 g     F .text	000000b8 __register_exitproc
080009d0 g     F .text	000000bc .hidden __floatundisf
08000d00  w    F .text	00000002 EXTI9_5_IRQHandler
080009a8 g     F .text	00000028 .hidden __aeabi_ui2f
08000d00  w    F .text	00000002 SPI2_IRQHandler
08000bf8 g     F .text	00000004 __retarget_lock_acquire_recursive
080004e0 g     F .text	00000006 MemManage_Handler
080001b6 g     F .text	00000076 main
080009e0 g     F .text	000000ac .hidden __aeabi_l2f
080004f2 g     F .text	0000000e SVC_Handler
08000d00  w    F .text	00000002 DMA1_Channel5_IRQHandler
080009d0 g     F .text	000000bc .hidden __aeabi_ul2f
08000d00  w    F .text	00000002 EXTI4_IRQHandler
08000d00  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
0800022c g     F .text	00000078 SystemInit
08000d2c g     F .text	00000000 _fini
08000d00  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08000b90 g     F .text	00000020 atexit
08000d00  w    F .text	00000002 DMA1_Channel3_IRQHandler
080007e0 g     F .text	000001c8 .hidden __aeabi_frsub
08000d00  w    F .text	00000002 TIM1_UP_IRQHandler
08000d00  w    F .text	00000002 WWDG_IRQHandler
08000d00  w    F .text	00000002 TIM2_IRQHandler
08000d00  w    F .text	00000002 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
08000d00  w    F .text	00000002 EXTI1_IRQHandler
20000444 g       .data	00000000 _edata
20000474 g     O .bss	00000001 __lock___at_quick_exit_mutex
08000d00  w    F .text	00000002 RTCAlarm_IRQHandler
08000a8c g     F .text	00000054 .hidden __aeabi_f2uiz
08000d00  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
080002a4 g     F .text	00000104 SystemCoreClockUpdate
080009a8 g     F .text	00000028 .hidden __floatunsisf
08000d00  w    F .text	00000002 I2C2_ER_IRQHandler
08000d00  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000d00  w    F .text	00000002 CAN1_SCE_IRQHandler
08000a8c g     F .text	00000054 .hidden __fixunssfsi
08000d00  w    F .text	00000002 FLASH_IRQHandler
080004e6 g     F .text	00000006 BusFault_Handler
08000d00  w    F .text	00000002 USART1_IRQHandler
20000478 g     O .bss	00000001 __lock___dd_hash_mutex
2000047c g     O .bss	00000001 __lock___tz_mutex
08000d00  w    F .text	00000002 I2C1_ER_IRQHandler
080007ec g     F .text	000001bc .hidden __addsf3
08000d00  w    F .text	00000002 USBWakeUp_IRQHandler
20000480 g     O .bss	00000001 __lock___sfp_recursive_mutex



Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
__do_global_dtors_aux():
 800010c:	e92d4010 	push	{r4, lr}
 8000110:	e59f4028 	ldr	r4, [pc, #40]	; 8000140 <__do_global_dtors_aux+0x34>
 8000114:	e5d43000 	ldrb	r3, [r4]
 8000118:	e3530000 	cmp	r3, #0
 800011c:	1a000005 	bne	8000138 <__do_global_dtors_aux+0x2c>
 8000120:	e59f301c 	ldr	r3, [pc, #28]	; 8000144 <__do_global_dtors_aux+0x38>
 8000124:	e3530000 	cmp	r3, #0
 8000128:	159f0018 	ldrne	r0, [pc, #24]	; 8000148 <__do_global_dtors_aux+0x3c>
 800012c:	1320f000 	nopne	{0}
 8000130:	e3a03001 	mov	r3, #1
 8000134:	e5c43000 	strb	r3, [r4]
 8000138:	e8bd4010 	pop	{r4, lr}
 800013c:	e12fff1e 	bx	lr
 8000140:	20000444 	.word	0x20000444
 8000144:	00000000 	.word	0x00000000
 8000148:	0800010c 	.word	0x0800010c

0800014c <frame_dummy>:
frame_dummy():
 800014c:	e59f301c 	ldr	r3, [pc, #28]	; 8000170 <frame_dummy+0x24>
 8000150:	e3530000 	cmp	r3, #0
 8000154:	012fff1e 	bxeq	lr
 8000158:	e92d4010 	push	{r4, lr}
 800015c:	e59f1010 	ldr	r1, [pc, #16]	; 8000174 <frame_dummy+0x28>
 8000160:	e59f0010 	ldr	r0, [pc, #16]	; 8000178 <frame_dummy+0x2c>
 8000164:	e320f000 	nop	{0}
 8000168:	e8bd4010 	pop	{r4, lr}
 800016c:	e12fff1e 	bx	lr
 8000170:	00000000 	.word	0x00000000
 8000174:	20000448 	.word	0x20000448
 8000178:	0800010c 	.word	0x0800010c

0800017c <delay>:
delay():
C:\Users\lisha\Desktop\plain-os/main.c:14
 * ************************************************
*/
#include "stm32f10x.h"

static void delay(int x)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
C:\Users\lisha\Desktop\plain-os/main.c:16
    volatile int i,j;
    for (i = 0; i < x; i++)
 8000184:	2300      	movs	r3, #0
 8000186:	60fb      	str	r3, [r7, #12]
 8000188:	e00b      	b.n	80001a2 <delay+0x26>
C:\Users\lisha\Desktop\plain-os/main.c:18
    {
        for (j = 0; j < 10; j++)
 800018a:	2300      	movs	r3, #0
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	e002      	b.n	8000196 <delay+0x1a>
C:\Users\lisha\Desktop\plain-os/main.c:18 (discriminator 3)
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	3301      	adds	r3, #1
 8000194:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/main.c:18 (discriminator 1)
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	2b09      	cmp	r3, #9
 800019a:	ddf9      	ble.n	8000190 <delay+0x14>
C:\Users\lisha\Desktop\plain-os/main.c:16 (discriminator 2)
    for (i = 0; i < x; i++)
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	3301      	adds	r3, #1
 80001a0:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/main.c:16 (discriminator 1)
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	429a      	cmp	r2, r3
 80001a8:	dcef      	bgt.n	800018a <delay+0xe>
C:\Users\lisha\Desktop\plain-os/main.c:21
            ;
    }
}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	46bd      	mov	sp, r7
 80001ae:	b004      	add	sp, #16
 80001b0:	bc80      	pop	{r7}
 80001b2:	bc01      	pop	{r0}
 80001b4:	4700      	bx	r0

080001b6 <main>:
main():
C:\Users\lisha\Desktop\plain-os/main.c:25
#include "USART.h"

int main()
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/main.c:27
	//开启GPIOB端口时钟
	RCC->APB2ENR |= (1<<4);
 80001ba:	4b17      	ldr	r3, [pc, #92]	; (8000218 <main+0x62>)
 80001bc:	699a      	ldr	r2, [r3, #24]
 80001be:	4b16      	ldr	r3, [pc, #88]	; (8000218 <main+0x62>)
 80001c0:	2110      	movs	r1, #16
 80001c2:	430a      	orrs	r2, r1
 80001c4:	619a      	str	r2, [r3, #24]
C:\Users\lisha\Desktop\plain-os/main.c:29
	//清空控制PB0的端口位
	GPIOC->CRH &= ~( 0x0f<< (20));
 80001c6:	4b15      	ldr	r3, [pc, #84]	; (800021c <main+0x66>)
 80001c8:	685a      	ldr	r2, [r3, #4]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <main+0x66>)
 80001cc:	4914      	ldr	r1, [pc, #80]	; (8000220 <main+0x6a>)
 80001ce:	400a      	ands	r2, r1
 80001d0:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/main.c:31
	//配置PB0为通用推挽输出，速度为10M
	GPIOC->CRH |= (0x03<<20);
 80001d2:	4b12      	ldr	r3, [pc, #72]	; (800021c <main+0x66>)
 80001d4:	685a      	ldr	r2, [r3, #4]
 80001d6:	4b11      	ldr	r3, [pc, #68]	; (800021c <main+0x66>)
 80001d8:	21c0      	movs	r1, #192	; 0xc0
 80001da:	0389      	lsls	r1, r1, #14
 80001dc:	430a      	orrs	r2, r1
 80001de:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/main.c:33
	//PB0输出低电平
	GPIOC->ODR &= (~(1 << 13));
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <main+0x66>)
 80001e2:	68da      	ldr	r2, [r3, #12]
 80001e4:	4b0d      	ldr	r3, [pc, #52]	; (800021c <main+0x66>)
 80001e6:	490f      	ldr	r1, [pc, #60]	; (8000224 <main+0x6e>)
 80001e8:	400a      	ands	r2, r1
 80001ea:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/main.c:35

	USART1_Init();
 80001ec:	f000 fa41 	bl	8000672 <USART1_Init>
C:\Users\lisha\Desktop\plain-os/main.c:36
	USART1_PrintString("RTS Start\r\n");
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <main+0x72>)
 80001f2:	0018      	movs	r0, r3
 80001f4:	f000 face 	bl	8000794 <USART1_PrintString>
C:\Users\lisha\Desktop\plain-os/main.c:40 (discriminator 1)

	while (1)
	{
		USART1_PrintString("RTS Start\r\n");
 80001f8:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <main+0x72>)
 80001fa:	0018      	movs	r0, r3
 80001fc:	f000 faca 	bl	8000794 <USART1_PrintString>
C:\Users\lisha\Desktop\plain-os/main.c:41 (discriminator 1)
		GPIOC->ODR = ~GPIOC->ODR;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <main+0x66>)
 8000202:	68da      	ldr	r2, [r3, #12]
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <main+0x66>)
 8000206:	43d2      	mvns	r2, r2
 8000208:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/main.c:42 (discriminator 1)
		delay(1000);
 800020a:	23fa      	movs	r3, #250	; 0xfa
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	0018      	movs	r0, r3
 8000210:	f7ff ffb4 	bl	800017c <delay>
C:\Users\lisha\Desktop\plain-os/main.c:40 (discriminator 1)
		USART1_PrintString("RTS Start\r\n");
 8000214:	e7f0      	b.n	80001f8 <main+0x42>
 8000216:	46c0      	nop			; (mov r8, r8)
 8000218:	40021000 	.word	0x40021000
 800021c:	40011000 	.word	0x40011000
 8000220:	ff0fffff 	.word	0xff0fffff
 8000224:	ffffdfff 	.word	0xffffdfff
 8000228:	08000d04 	.word	0x08000d04

0800022c <SystemInit>:
SystemInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:213
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:216
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000230:	4b16      	ldr	r3, [pc, #88]	; (800028c <SystemInit+0x60>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <SystemInit+0x60>)
 8000236:	2101      	movs	r1, #1
 8000238:	430a      	orrs	r2, r1
 800023a:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:220

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800023c:	4b13      	ldr	r3, [pc, #76]	; (800028c <SystemInit+0x60>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	4b12      	ldr	r3, [pc, #72]	; (800028c <SystemInit+0x60>)
 8000242:	4913      	ldr	r1, [pc, #76]	; (8000290 <SystemInit+0x64>)
 8000244:	400a      	ands	r2, r1
 8000246:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:226
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000248:	4b10      	ldr	r3, [pc, #64]	; (800028c <SystemInit+0x60>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <SystemInit+0x60>)
 800024e:	4911      	ldr	r1, [pc, #68]	; (8000294 <SystemInit+0x68>)
 8000250:	400a      	ands	r2, r1
 8000252:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:229

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <SystemInit+0x60>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SystemInit+0x60>)
 800025a:	490f      	ldr	r1, [pc, #60]	; (8000298 <SystemInit+0x6c>)
 800025c:	400a      	ands	r2, r1
 800025e:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:232

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000260:	4b0a      	ldr	r3, [pc, #40]	; (800028c <SystemInit+0x60>)
 8000262:	685a      	ldr	r2, [r3, #4]
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <SystemInit+0x60>)
 8000266:	490d      	ldr	r1, [pc, #52]	; (800029c <SystemInit+0x70>)
 8000268:	400a      	ands	r2, r1
 800026a:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:251

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <SystemInit+0x60>)
 800026e:	229f      	movs	r2, #159	; 0x9f
 8000270:	0412      	lsls	r2, r2, #16
 8000272:	609a      	str	r2, [r3, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:262
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000274:	f000 f898 	bl	80003a8 <SetSysClock>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:267

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <SystemInit+0x74>)
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	0512      	lsls	r2, r2, #20
 800027e:	609a      	str	r2, [r3, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:269
#endif 
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	bc01      	pop	{r0}
 8000288:	4700      	bx	r0
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	40021000 	.word	0x40021000
 8000290:	f8ff0000 	.word	0xf8ff0000
 8000294:	fef6ffff 	.word	0xfef6ffff
 8000298:	fffbffff 	.word	0xfffbffff
 800029c:	ff80ffff 	.word	0xff80ffff
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:307
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:308
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:319
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002b6:	4b38      	ldr	r3, [pc, #224]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	220c      	movs	r2, #12
 80002bc:	4013      	ands	r3, r2
 80002be:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:321
  
  switch (tmp)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d009      	beq.n	80002da <SystemCoreClockUpdate+0x36>
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	2b08      	cmp	r3, #8
 80002ca:	d00a      	beq.n	80002e2 <SystemCoreClockUpdate+0x3e>
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d147      	bne.n	8000362 <SystemCoreClockUpdate+0xbe>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:324
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <SystemCoreClockUpdate+0xf8>)
 80002d4:	4a32      	ldr	r2, [pc, #200]	; (80003a0 <SystemCoreClockUpdate+0xfc>)
 80002d6:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:325
      break;
 80002d8:	e047      	b.n	800036a <SystemCoreClockUpdate+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:327
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80002da:	4b30      	ldr	r3, [pc, #192]	; (800039c <SystemCoreClockUpdate+0xf8>)
 80002dc:	4a30      	ldr	r2, [pc, #192]	; (80003a0 <SystemCoreClockUpdate+0xfc>)
 80002de:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:328
      break;
 80002e0:	e043      	b.n	800036a <SystemCoreClockUpdate+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:332
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80002e2:	4b2d      	ldr	r3, [pc, #180]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	23f0      	movs	r3, #240	; 0xf0
 80002e8:	039b      	lsls	r3, r3, #14
 80002ea:	4013      	ands	r3, r2
 80002ec:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:333
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	2380      	movs	r3, #128	; 0x80
 80002f4:	025b      	lsls	r3, r3, #9
 80002f6:	4013      	ands	r3, r2
 80002f8:	607b      	str	r3, [r7, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:336
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	0c9b      	lsrs	r3, r3, #18
 80002fe:	3302      	adds	r3, #2
 8000300:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:338
      
      if (pllsource == 0x00)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10c      	bne.n	8000322 <SystemCoreClockUpdate+0x7e>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:341
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000308:	68b9      	ldr	r1, [r7, #8]
 800030a:	000a      	movs	r2, r1
 800030c:	0152      	lsls	r2, r2, #5
 800030e:	1a52      	subs	r2, r2, r1
 8000310:	0193      	lsls	r3, r2, #6
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	185b      	adds	r3, r3, r1
 8000318:	021b      	lsls	r3, r3, #8
 800031a:	001a      	movs	r2, r3
 800031c:	4b1f      	ldr	r3, [pc, #124]	; (800039c <SystemCoreClockUpdate+0xf8>)
 800031e:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:400
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000320:	e023      	b.n	800036a <SystemCoreClockUpdate+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:351
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000322:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	2380      	movs	r3, #128	; 0x80
 8000328:	029b      	lsls	r3, r3, #10
 800032a:	4013      	ands	r3, r2
 800032c:	d00c      	beq.n	8000348 <SystemCoreClockUpdate+0xa4>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:353
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800032e:	68b9      	ldr	r1, [r7, #8]
 8000330:	000a      	movs	r2, r1
 8000332:	0152      	lsls	r2, r2, #5
 8000334:	1a52      	subs	r2, r2, r1
 8000336:	0193      	lsls	r3, r2, #6
 8000338:	1a9b      	subs	r3, r3, r2
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	185b      	adds	r3, r3, r1
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	001a      	movs	r2, r3
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000344:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:400
      break;
 8000346:	e010      	b.n	800036a <SystemCoreClockUpdate+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:357
          SystemCoreClock = HSE_VALUE * pllmull;
 8000348:	68b9      	ldr	r1, [r7, #8]
 800034a:	000a      	movs	r2, r1
 800034c:	0152      	lsls	r2, r2, #5
 800034e:	1a52      	subs	r2, r2, r1
 8000350:	0193      	lsls	r3, r2, #6
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	185b      	adds	r3, r3, r1
 8000358:	025b      	lsls	r3, r3, #9
 800035a:	001a      	movs	r2, r3
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <SystemCoreClockUpdate+0xf8>)
 800035e:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:400
      break;
 8000360:	e003      	b.n	800036a <SystemCoreClockUpdate+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:403

    default:
      SystemCoreClock = HSI_VALUE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <SystemCoreClockUpdate+0xfc>)
 8000366:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:404
      break;
 8000368:	46c0      	nop			; (mov r8, r8)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:409
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036a:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <SystemCoreClockUpdate+0xf4>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	091b      	lsrs	r3, r3, #4
 8000370:	220f      	movs	r2, #15
 8000372:	4013      	ands	r3, r2
 8000374:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <SystemCoreClockUpdate+0x100>)
 8000376:	5cd3      	ldrb	r3, [r2, r3]
 8000378:	061b      	lsls	r3, r3, #24
 800037a:	0e1b      	lsrs	r3, r3, #24
 800037c:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:411
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800037e:	4b07      	ldr	r3, [pc, #28]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	40da      	lsrs	r2, r3
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <SystemCoreClockUpdate+0xf8>)
 8000388:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:412
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b004      	add	sp, #16
 8000390:	bc80      	pop	{r7}
 8000392:	bc01      	pop	{r0}
 8000394:	4700      	bx	r0
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	40021000 	.word	0x40021000
 800039c:	20000000 	.word	0x20000000
 80003a0:	007a1200 	.word	0x007a1200
 80003a4:	20000004 	.word	0x20000004

080003a8 <SetSysClock>:
SetSysClock():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:420
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:432
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80003ac:	f000 f805 	bl	80003ba <SetSysClockTo72>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:437
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	bc01      	pop	{r0}
 80003b8:	4700      	bx	r0

080003ba <SetSysClockTo72>:
SetSysClockTo72():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:988
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:989
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	2300      	movs	r3, #0
 80003c6:	603b      	str	r3, [r7, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <SetSysClockTo72+0x106>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b3c      	ldr	r3, [pc, #240]	; (80004c0 <SetSysClockTo72+0x106>)
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	0249      	lsls	r1, r1, #9
 80003d2:	430a      	orrs	r2, r1
 80003d4:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:998 (discriminator 2)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80003d6:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <SetSysClockTo72+0x106>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	029b      	lsls	r3, r3, #10
 80003de:	4013      	ands	r3, r2
 80003e0:	603b      	str	r3, [r7, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:999 (discriminator 2)
    StartUpCounter++;  
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3301      	adds	r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000 (discriminator 2)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d104      	bne.n	80003f8 <SetSysClockTo72+0x3e>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000 (discriminator 1)
 80003ee:	687a      	ldr	r2, [r7, #4]
 80003f0:	23a0      	movs	r3, #160	; 0xa0
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d1ee      	bne.n	80003d6 <SetSysClockTo72+0x1c>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80003f8:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <SetSysClockTo72+0x106>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	029b      	lsls	r3, r3, #10
 8000400:	4013      	ands	r3, r2
 8000402:	d002      	beq.n	800040a <SetSysClockTo72+0x50>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 8000404:	2301      	movs	r3, #1
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	e001      	b.n	800040e <SetSysClockTo72+0x54>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1008
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800040a:	2300      	movs	r3, #0
 800040c:	603b      	str	r3, [r7, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1011
  }  

  if (HSEStatus == (uint32_t)0x01)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d14e      	bne.n	80004b2 <SetSysClockTo72+0xf8>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1014
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000414:	4b2b      	ldr	r3, [pc, #172]	; (80004c4 <SetSysClockTo72+0x10a>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <SetSysClockTo72+0x10a>)
 800041a:	2110      	movs	r1, #16
 800041c:	430a      	orrs	r2, r1
 800041e:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1017

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <SetSysClockTo72+0x10a>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b27      	ldr	r3, [pc, #156]	; (80004c4 <SetSysClockTo72+0x10a>)
 8000426:	2103      	movs	r1, #3
 8000428:	438a      	bics	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <SetSysClockTo72+0x10a>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <SetSysClockTo72+0x10a>)
 8000432:	2102      	movs	r1, #2
 8000434:	430a      	orrs	r2, r1
 8000436:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1022

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000438:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <SetSysClockTo72+0x106>)
 800043a:	4b21      	ldr	r3, [pc, #132]	; (80004c0 <SetSysClockTo72+0x106>)
 800043c:	6852      	ldr	r2, [r2, #4]
 800043e:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1025
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000440:	4a1f      	ldr	r2, [pc, #124]	; (80004c0 <SetSysClockTo72+0x106>)
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <SetSysClockTo72+0x106>)
 8000444:	6852      	ldr	r2, [r2, #4]
 8000446:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1028
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000448:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <SetSysClockTo72+0x106>)
 800044a:	685a      	ldr	r2, [r3, #4]
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <SetSysClockTo72+0x106>)
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	00c9      	lsls	r1, r1, #3
 8000452:	430a      	orrs	r2, r1
 8000454:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000456:	4b1a      	ldr	r3, [pc, #104]	; (80004c0 <SetSysClockTo72+0x106>)
 8000458:	685a      	ldr	r2, [r3, #4]
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <SetSysClockTo72+0x106>)
 800045c:	491a      	ldr	r1, [pc, #104]	; (80004c8 <SetSysClockTo72+0x10e>)
 800045e:	400a      	ands	r2, r1
 8000460:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1056
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <SetSysClockTo72+0x106>)
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <SetSysClockTo72+0x106>)
 8000468:	21e8      	movs	r1, #232	; 0xe8
 800046a:	0349      	lsls	r1, r1, #13
 800046c:	430a      	orrs	r2, r1
 800046e:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1060
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <SetSysClockTo72+0x106>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <SetSysClockTo72+0x106>)
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	0449      	lsls	r1, r1, #17
 800047a:	430a      	orrs	r2, r1
 800047c:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1063

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800047e:	46c0      	nop			; (mov r8, r8)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1063 (discriminator 1)
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <SetSysClockTo72+0x106>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	049b      	lsls	r3, r3, #18
 8000488:	4013      	ands	r3, r2
 800048a:	d0f9      	beq.n	8000480 <SetSysClockTo72+0xc6>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1068
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <SetSysClockTo72+0x106>)
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <SetSysClockTo72+0x106>)
 8000492:	2103      	movs	r1, #3
 8000494:	438a      	bics	r2, r1
 8000496:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000498:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <SetSysClockTo72+0x106>)
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <SetSysClockTo72+0x106>)
 800049e:	2102      	movs	r1, #2
 80004a0:	430a      	orrs	r2, r1
 80004a2:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1072

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80004a4:	46c0      	nop			; (mov r8, r8)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1072 (discriminator 1)
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <SetSysClockTo72+0x106>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	220c      	movs	r2, #12
 80004ac:	4013      	ands	r3, r2
 80004ae:	2b08      	cmp	r3, #8
 80004b0:	d1f9      	bne.n	80004a6 <SetSysClockTo72+0xec>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1080
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bc80      	pop	{r7}
 80004ba:	bc01      	pop	{r0}
 80004bc:	4700      	bx	r0
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40022000 	.word	0x40022000
 80004c8:	ffc0ffff 	.word	0xffc0ffff

080004cc <NMI_Handler>:
NMI_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:52
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:54
	
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	bc01      	pop	{r0}
 80004d8:	4700      	bx	r0

080004da <HardFault_Handler>:
HardFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:62
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:64 (discriminator 1)
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:
MemManage_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:75
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:77 (discriminator 1)
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:
BusFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:88
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:90 (discriminator 1)
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:
UsageFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:101
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:104 (discriminator 1)

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:
SVC_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:115
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:116
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	bc01      	pop	{r0}
 80004fe:	4700      	bx	r0

08000500 <DebugMon_Handler>:
DebugMon_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:124
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:125
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	bc01      	pop	{r0}
 800050c:	4700      	bx	r0
	...

08000510 <__NVIC_SetPriorityGrouping>:
__NVIC_SetPriorityGrouping():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1481
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1483
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2207      	movs	r2, #7
 800051c:	4013      	ands	r3, r2
 800051e:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1485

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <__NVIC_SetPriorityGrouping+0x40>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1486
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <__NVIC_SetPriorityGrouping+0x44>)
 800052a:	4013      	ands	r3, r2
 800052c:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1489
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	021a      	lsls	r2, r3, #8
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1488
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4313      	orrs	r3, r2
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1487
  reg_value  =  (reg_value                                   |
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <__NVIC_SetPriorityGrouping+0x48>)
 8000538:	4313      	orrs	r3, r2
 800053a:	60bb      	str	r3, [r7, #8]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1490
  SCB->AIRCR =  reg_value;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x40>)
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1491
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b004      	add	sp, #16
 8000548:	bc80      	pop	{r7}
 800054a:	bc01      	pop	{r0}
 800054c:	4700      	bx	r0
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	e000ed00 	.word	0xe000ed00
 8000554:	0000f8ff 	.word	0x0000f8ff
 8000558:	05fa0000 	.word	0x05fa0000

0800055c <__NVIC_EnableIRQ>:
__NVIC_EnableIRQ():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1512
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	0002      	movs	r2, r0
 8000564:	1dfb      	adds	r3, r7, #7
 8000566:	701a      	strb	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1513
  if ((int32_t)(IRQn) >= 0)
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b7f      	cmp	r3, #127	; 0x7f
 800056e:	d80f      	bhi.n	8000590 <__NVIC_EnableIRQ+0x34>
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1515
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	001a      	movs	r2, r3
 8000576:	231f      	movs	r3, #31
 8000578:	401a      	ands	r2, r3
 800057a:	4908      	ldr	r1, [pc, #32]	; (800059c <__NVIC_EnableIRQ+0x40>)
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	161b      	asrs	r3, r3, #24
 8000584:	095b      	lsrs	r3, r3, #5
 8000586:	2001      	movs	r0, #1
 8000588:	4090      	lsls	r0, r2
 800058a:	0002      	movs	r2, r0
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	505a      	str	r2, [r3, r1]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1517
  }
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bc80      	pop	{r7}
 8000598:	bc01      	pop	{r0}
 800059a:	4700      	bx	r0
 800059c:	e000e100 	.word	0xe000e100

080005a0 <__NVIC_SetPriority>:
__NVIC_SetPriority():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1640
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	0002      	movs	r2, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	701a      	strb	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1641
  if ((int32_t)(IRQn) >= 0)
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b7f      	cmp	r3, #127	; 0x7f
 80005b4:	d811      	bhi.n	80005da <__NVIC_SetPriority+0x3a>
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1643
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	061b      	lsls	r3, r3, #24
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	4911      	ldr	r1, [pc, #68]	; (8000604 <__NVIC_SetPriority+0x64>)
 80005be:	1dfa      	adds	r2, r7, #7
 80005c0:	7812      	ldrb	r2, [r2, #0]
 80005c2:	0612      	lsls	r2, r2, #24
 80005c4:	1612      	asrs	r2, r2, #24
 80005c6:	011b      	lsls	r3, r3, #4
 80005c8:	061b      	lsls	r3, r3, #24
 80005ca:	0e18      	lsrs	r0, r3, #24
 80005cc:	23c0      	movs	r3, #192	; 0xc0
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	188a      	adds	r2, r1, r2
 80005d2:	18d3      	adds	r3, r2, r3
 80005d4:	1c02      	adds	r2, r0, #0
 80005d6:	701a      	strb	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1649
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d8:	e00e      	b.n	80005f8 <__NVIC_SetPriority+0x58>
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1647
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	061b      	lsls	r3, r3, #24
 80005de:	0e1a      	lsrs	r2, r3, #24
 80005e0:	4909      	ldr	r1, [pc, #36]	; (8000608 <__NVIC_SetPriority+0x68>)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	0018      	movs	r0, r3
 80005e8:	230f      	movs	r3, #15
 80005ea:	4003      	ands	r3, r0
 80005ec:	3b04      	subs	r3, #4
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	0612      	lsls	r2, r2, #24
 80005f2:	0e12      	lsrs	r2, r2, #24
 80005f4:	18cb      	adds	r3, r1, r3
 80005f6:	761a      	strb	r2, [r3, #24]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1649
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bc80      	pop	{r7}
 8000600:	bc01      	pop	{r0}
 8000602:	4700      	bx	r0
 8000604:	e000e100 	.word	0xe000e100
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <NVIC_EncodePriority>:
NVIC_EncodePriority():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1687
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1688
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	2207      	movs	r2, #7
 800061c:	4013      	ands	r3, r2
 800061e:	61fb      	str	r3, [r7, #28]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1692
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	2207      	movs	r2, #7
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	2b04      	cmp	r3, #4
 8000628:	d900      	bls.n	800062c <NVIC_EncodePriority+0x20>
 800062a:	2304      	movs	r3, #4
 800062c:	61bb      	str	r3, [r7, #24]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1693
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800062e:	69fb      	ldr	r3, [r7, #28]
 8000630:	3304      	adds	r3, #4
 8000632:	2b06      	cmp	r3, #6
 8000634:	d902      	bls.n	800063c <NVIC_EncodePriority+0x30>
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1693 (discriminator 1)
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	3b03      	subs	r3, #3
 800063a:	e000      	b.n	800063e <NVIC_EncodePriority+0x32>
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1693 (discriminator 2)
 800063c:	2300      	movs	r3, #0
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1693 (discriminator 4)
 800063e:	617b      	str	r3, [r7, #20]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1696 (discriminator 4)

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	2301      	movs	r3, #1
 8000642:	425a      	negs	r2, r3
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	409a      	lsls	r2, r3
 8000648:	0013      	movs	r3, r2
 800064a:	43db      	mvns	r3, r3
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	401a      	ands	r2, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	409a      	lsls	r2, r3
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1697 (discriminator 4)
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	2301      	movs	r3, #1
 8000656:	4259      	negs	r1, r3
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	4099      	lsls	r1, r3
 800065c:	000b      	movs	r3, r1
 800065e:	43db      	mvns	r3, r3
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	400b      	ands	r3, r1
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1696 (discriminator 4)
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	4313      	orrs	r3, r2
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1699 (discriminator 4)
         );
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b008      	add	sp, #32
 800066c:	bc80      	pop	{r7}
 800066e:	bc02      	pop	{r1}
 8000670:	4708      	bx	r1

08000672 <USART1_Init>:
USART1_Init():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:44


/*##############################����ΪUSART1��������#################################################*/
#if(USART1_EN==1)
void USART1_Init(void)
{   
 8000672:	b590      	push	{r4, r7, lr}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:47
   unsigned int integer;                   //����һ���������洢��������
   float   decimal;                        //����һ���������洢С������
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 8000678:	4b3f      	ldr	r3, [pc, #252]	; (8000778 <USART1_Init+0x106>)
 800067a:	699a      	ldr	r2, [r3, #24]
 800067c:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <USART1_Init+0x106>)
 800067e:	493f      	ldr	r1, [pc, #252]	; (800077c <USART1_Init+0x10a>)
 8000680:	430a      	orrs	r2, r1
 8000682:	619a      	str	r2, [r3, #24]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:48
	 RCC->APB2RSTR|=(1<<14);                 //��λ����USART1
 8000684:	4b3c      	ldr	r3, [pc, #240]	; (8000778 <USART1_Init+0x106>)
 8000686:	68da      	ldr	r2, [r3, #12]
 8000688:	4b3b      	ldr	r3, [pc, #236]	; (8000778 <USART1_Init+0x106>)
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	01c9      	lsls	r1, r1, #7
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:49
	 RCC->APB2RSTR&=(~(1<<14));              //ֹͣ��λ
 8000692:	4b39      	ldr	r3, [pc, #228]	; (8000778 <USART1_Init+0x106>)
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <USART1_Init+0x106>)
 8000698:	4939      	ldr	r1, [pc, #228]	; (8000780 <USART1_Init+0x10e>)
 800069a:	400a      	ands	r2, r1
 800069c:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:51
	 
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 800069e:	4b39      	ldr	r3, [pc, #228]	; (8000784 <USART1_Init+0x112>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <USART1_Init+0x112>)
 80006a4:	4938      	ldr	r1, [pc, #224]	; (8000788 <USART1_Init+0x116>)
 80006a6:	400a      	ands	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:52
	 GPIOA->CRH|=0X000008B0;                 //����PA10Ϊ�������룬����PA9Ϊ�����������
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <USART1_Init+0x112>)
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <USART1_Init+0x112>)
 80006b0:	218b      	movs	r1, #139	; 0x8b
 80006b2:	0109      	lsls	r1, r1, #4
 80006b4:	430a      	orrs	r2, r1
 80006b6:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:55
	
	
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <USART1_Init+0x11a>)
 80006ba:	899b      	ldrh	r3, [r3, #12]
 80006bc:	041b      	lsls	r3, r3, #16
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	4932      	ldr	r1, [pc, #200]	; (800078c <USART1_Init+0x11a>)
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0192      	lsls	r2, r2, #6
 80006c6:	4313      	orrs	r3, r2
 80006c8:	041b      	lsls	r3, r3, #16
 80006ca:	0c1b      	lsrs	r3, r3, #16
 80006cc:	818b      	strh	r3, [r1, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:56
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <USART1_Init+0x11a>)
 80006d0:	899b      	ldrh	r3, [r3, #12]
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	0c1b      	lsrs	r3, r3, #16
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <USART1_Init+0x11a>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430b      	orrs	r3, r1
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	8193      	strh	r3, [r2, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:57
	 USART1->CR1|=(1<<5);                    //���ж�
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <USART1_Init+0x11a>)
 80006e4:	899b      	ldrh	r3, [r3, #12]
 80006e6:	041b      	lsls	r3, r3, #16
 80006e8:	0c1b      	lsrs	r3, r3, #16
 80006ea:	4a28      	ldr	r2, [pc, #160]	; (800078c <USART1_Init+0x11a>)
 80006ec:	2120      	movs	r1, #32
 80006ee:	430b      	orrs	r3, r1
 80006f0:	041b      	lsls	r3, r3, #16
 80006f2:	0c1b      	lsrs	r3, r3, #16
 80006f4:	8193      	strh	r3, [r2, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:58
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <USART1_Init+0x11a>)
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	041b      	lsls	r3, r3, #16
 80006fc:	0c1b      	lsrs	r3, r3, #16
 80006fe:	4a23      	ldr	r2, [pc, #140]	; (800078c <USART1_Init+0x11a>)
 8000700:	2108      	movs	r1, #8
 8000702:	430b      	orrs	r3, r1
 8000704:	041b      	lsls	r3, r3, #16
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	8193      	strh	r3, [r2, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:61
	 
	
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
 800070a:	2327      	movs	r3, #39	; 0x27
 800070c:	607b      	str	r3, [r7, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:62
   decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   //ȡ��С������
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f94a 	bl	80009a8 <__aeabi_ui2f>
 8000714:	1c03      	adds	r3, r0, #0
 8000716:	1c19      	adds	r1, r3, #0
 8000718:	481d      	ldr	r0, [pc, #116]	; (8000790 <USART1_Init+0x11e>)
 800071a:	f000 f865 	bl	80007e8 <__aeabi_fsub>
 800071e:	1c03      	adds	r3, r0, #0
 8000720:	603b      	str	r3, [r7, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:63
   USART1->BRR=(integer<<4)|((unsigned int)decimal*16);  //��ת�����ֵ����BRR�Ĵ���
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	041b      	lsls	r3, r3, #16
 8000726:	0c1b      	lsrs	r3, r3, #16
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	041b      	lsls	r3, r3, #16
 800072c:	0c1c      	lsrs	r4, r3, #16
 800072e:	6838      	ldr	r0, [r7, #0]
 8000730:	f000 f9ac 	bl	8000a8c <__aeabi_f2uiz>
 8000734:	0003      	movs	r3, r0
 8000736:	041b      	lsls	r3, r3, #16
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	011b      	lsls	r3, r3, #4
 800073c:	041b      	lsls	r3, r3, #16
 800073e:	0c1b      	lsrs	r3, r3, #16
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <USART1_Init+0x11a>)
 8000742:	4323      	orrs	r3, r4
 8000744:	041b      	lsls	r3, r3, #16
 8000746:	0c1b      	lsrs	r3, r3, #16
 8000748:	8113      	strh	r3, [r2, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:65
   
   NVIC_SetPriorityGrouping(1);            //�������ȼ�����1
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff fee0 	bl	8000510 <__NVIC_SetPriorityGrouping>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:66
   NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(1,2,1));     //������ռ���ȼ�Ϊ1�������ȼ�Ϊ1
 8000750:	2201      	movs	r2, #1
 8000752:	2102      	movs	r1, #2
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ff59 	bl	800060c <NVIC_EncodePriority>
 800075a:	0003      	movs	r3, r0
 800075c:	0019      	movs	r1, r3
 800075e:	2025      	movs	r0, #37	; 0x25
 8000760:	f7ff ff1e 	bl	80005a0 <__NVIC_SetPriority>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:67
   NVIC_EnableIRQ(USART1_IRQn);            //ʹ��USART�ж�
 8000764:	2025      	movs	r0, #37	; 0x25
 8000766:	f7ff fef9 	bl	800055c <__NVIC_EnableIRQ>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:69
   
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b003      	add	sp, #12
 8000770:	bc90      	pop	{r4, r7}
 8000772:	bc01      	pop	{r0}
 8000774:	4700      	bx	r0
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	00004004 	.word	0x00004004
 8000780:	ffffbfff 	.word	0xffffbfff
 8000784:	40010800 	.word	0x40010800
 8000788:	fffff00f 	.word	0xfffff00f
 800078c:	40013800 	.word	0x40013800
 8000790:	421c0000 	.word	0x421c0000

08000794 <USART1_PrintString>:
USART1_PrintString():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:73


void USART1_PrintString(const char *String)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:75
   const char *p;                            
   p=String;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:77

   while(*p)
 80007a0:	e011      	b.n	80007c6 <USART1_PrintString+0x32>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:79
   {
      USART1->DR=*p;                        
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <USART1_PrintString+0x48>)
 80007a8:	041b      	lsls	r3, r3, #16
 80007aa:	0c1b      	lsrs	r3, r3, #16
 80007ac:	8093      	strh	r3, [r2, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:80
      while(!(USART1->SR&(1<<6)));
 80007ae:	46c0      	nop			; (mov r8, r8)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:80 (discriminator 1)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <USART1_PrintString+0x48>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	041b      	lsls	r3, r3, #16
 80007b6:	0c1b      	lsrs	r3, r3, #16
 80007b8:	001a      	movs	r2, r3
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	4013      	ands	r3, r2
 80007be:	d0f7      	beq.n	80007b0 <USART1_PrintString+0x1c>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:81
      p++;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3301      	adds	r3, #1
 80007c4:	60fb      	str	r3, [r7, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:77
   while(*p)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1e9      	bne.n	80007a2 <USART1_PrintString+0xe>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:84
    }

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b004      	add	sp, #16
 80007d4:	bc80      	pop	{r7}
 80007d6:	bc01      	pop	{r0}
 80007d8:	4700      	bx	r0
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40013800 	.word	0x40013800

080007e0 <__aeabi_frsub>:
__aeabi_frsub():
 80007e0:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
 80007e4:	ea000000 	b	80007ec <__addsf3>

080007e8 <__aeabi_fsub>:
__aeabi_fsub():
 80007e8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

080007ec <__addsf3>:
__addsf3():
 80007ec:	e1b02080 	lsls	r2, r0, #1
 80007f0:	11b03081 	lslsne	r3, r1, #1
 80007f4:	11320003 	teqne	r2, r3
 80007f8:	11f0cc42 	mvnsne	ip, r2, asr #24
 80007fc:	11f0cc43 	mvnsne	ip, r3, asr #24
 8000800:	0a000047 	beq	8000924 <__addsf3+0x138>
 8000804:	e1a02c22 	lsr	r2, r2, #24
 8000808:	e0723c23 	rsbs	r3, r2, r3, lsr #24
 800080c:	c0822003 	addgt	r2, r2, r3
 8000810:	c0201001 	eorgt	r1, r0, r1
 8000814:	c0210000 	eorgt	r0, r1, r0
 8000818:	c0201001 	eorgt	r1, r0, r1
 800081c:	b2633000 	rsblt	r3, r3, #0
 8000820:	e3530019 	cmp	r3, #25
 8000824:	812fff1e 	bxhi	lr
 8000828:	e3100102 	tst	r0, #-2147483648	; 0x80000000
 800082c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
 8000830:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
 8000834:	12600000 	rsbne	r0, r0, #0
 8000838:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 800083c:	e3811502 	orr	r1, r1, #8388608	; 0x800000
 8000840:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
 8000844:	12611000 	rsbne	r1, r1, #0
 8000848:	e1320003 	teq	r2, r3
 800084c:	0a00002e 	beq	800090c <__addsf3+0x120>
 8000850:	e2422001 	sub	r2, r2, #1
 8000854:	e0900351 	adds	r0, r0, r1, asr r3
 8000858:	e2633020 	rsb	r3, r3, #32
 800085c:	e1a01311 	lsl	r1, r1, r3
 8000860:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
 8000864:	5a000001 	bpl	8000870 <__addsf3+0x84>
 8000868:	e2711000 	rsbs	r1, r1, #0
 800086c:	e2e00000 	rsc	r0, r0, #0
 8000870:	e3500502 	cmp	r0, #8388608	; 0x800000
 8000874:	3a00000b 	bcc	80008a8 <__addsf3+0xbc>
 8000878:	e3500401 	cmp	r0, #16777216	; 0x1000000
 800087c:	3a000004 	bcc	8000894 <__addsf3+0xa8>
 8000880:	e1b000a0 	lsrs	r0, r0, #1
 8000884:	e1a01061 	rrx	r1, r1
 8000888:	e2822001 	add	r2, r2, #1
 800088c:	e35200fe 	cmp	r2, #254	; 0xfe
 8000890:	2a000038 	bcs	8000978 <__addsf3+0x18c>
 8000894:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 8000898:	e0a00b82 	adc	r0, r0, r2, lsl #23
 800089c:	03c00001 	biceq	r0, r0, #1
 80008a0:	e1800003 	orr	r0, r0, r3
 80008a4:	e12fff1e 	bx	lr
 80008a8:	e1b01081 	lsls	r1, r1, #1
 80008ac:	e0a00000 	adc	r0, r0, r0
 80008b0:	e3100502 	tst	r0, #8388608	; 0x800000
 80008b4:	e2422001 	sub	r2, r2, #1
 80008b8:	1afffff5 	bne	8000894 <__addsf3+0xa8>
 80008bc:	e1b0c620 	lsrs	ip, r0, #12
 80008c0:	01a00600 	lsleq	r0, r0, #12
 80008c4:	0242200c 	subeq	r2, r2, #12
 80008c8:	e31008ff 	tst	r0, #16711680	; 0xff0000
 80008cc:	01a00400 	lsleq	r0, r0, #8
 80008d0:	02422008 	subeq	r2, r2, #8
 80008d4:	e310060f 	tst	r0, #15728640	; 0xf00000
 80008d8:	01a00200 	lsleq	r0, r0, #4
 80008dc:	02422004 	subeq	r2, r2, #4
 80008e0:	e3100503 	tst	r0, #12582912	; 0xc00000
 80008e4:	01a00100 	lsleq	r0, r0, #2
 80008e8:	02422002 	subeq	r2, r2, #2
 80008ec:	e3500502 	cmp	r0, #8388608	; 0x800000
 80008f0:	31a00080 	lslcc	r0, r0, #1
 80008f4:	e2d22000 	sbcs	r2, r2, #0
 80008f8:	a0800b82 	addge	r0, r0, r2, lsl #23
 80008fc:	b2622000 	rsblt	r2, r2, #0
 8000900:	a1800003 	orrge	r0, r0, r3
 8000904:	b1830230 	orrlt	r0, r3, r0, lsr r2
 8000908:	e12fff1e 	bx	lr
 800090c:	e3320000 	teq	r2, #0
 8000910:	e2211502 	eor	r1, r1, #8388608	; 0x800000
 8000914:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
 8000918:	02822001 	addeq	r2, r2, #1
 800091c:	12433001 	subne	r3, r3, #1
 8000920:	eaffffca 	b	8000850 <__addsf3+0x64>
 8000924:	e1a03081 	lsl	r3, r1, #1
 8000928:	e1f0cc42 	mvns	ip, r2, asr #24
 800092c:	11f0cc43 	mvnsne	ip, r3, asr #24
 8000930:	0a000013 	beq	8000984 <__addsf3+0x198>
 8000934:	e1320003 	teq	r2, r3
 8000938:	0a000002 	beq	8000948 <__addsf3+0x15c>
 800093c:	e3320000 	teq	r2, #0
 8000940:	01a00001 	moveq	r0, r1
 8000944:	e12fff1e 	bx	lr
 8000948:	e1300001 	teq	r0, r1
 800094c:	13a00000 	movne	r0, #0
 8000950:	112fff1e 	bxne	lr
 8000954:	e31204ff 	tst	r2, #-16777216	; 0xff000000
 8000958:	1a000002 	bne	8000968 <__addsf3+0x17c>
 800095c:	e1b00080 	lsls	r0, r0, #1
 8000960:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
 8000964:	e12fff1e 	bx	lr
 8000968:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
 800096c:	32800502 	addcc	r0, r0, #8388608	; 0x800000
 8000970:	312fff1e 	bxcc	lr
 8000974:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
 8000978:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
 800097c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
 8000980:	e12fff1e 	bx	lr
 8000984:	e1f02c42 	mvns	r2, r2, asr #24
 8000988:	11a00001 	movne	r0, r1
 800098c:	01f03c43 	mvnseq	r3, r3, asr #24
 8000990:	11a01000 	movne	r1, r0
 8000994:	e1b02480 	lsls	r2, r0, #9
 8000998:	01b03481 	lslseq	r3, r1, #9
 800099c:	01300001 	teqeq	r0, r1
 80009a0:	13800501 	orrne	r0, r0, #4194304	; 0x400000
 80009a4:	e12fff1e 	bx	lr

080009a8 <__aeabi_ui2f>:
__floatunsisf():
 80009a8:	e3a03000 	mov	r3, #0
 80009ac:	ea000001 	b	80009b8 <__aeabi_i2f+0x8>

080009b0 <__aeabi_i2f>:
__floatsisf():
 80009b0:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
 80009b4:	42600000 	rsbmi	r0, r0, #0
 80009b8:	e1b0c000 	movs	ip, r0
 80009bc:	012fff1e 	bxeq	lr
 80009c0:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
 80009c4:	e1a01000 	mov	r1, r0
 80009c8:	e3a00000 	mov	r0, #0
 80009cc:	ea00000f 	b	8000a10 <__aeabi_l2f+0x30>

080009d0 <__aeabi_ul2f>:
__aeabi_ul2f():
 80009d0:	e1902001 	orrs	r2, r0, r1
 80009d4:	012fff1e 	bxeq	lr
 80009d8:	e3a03000 	mov	r3, #0
 80009dc:	ea000005 	b	80009f8 <__aeabi_l2f+0x18>

080009e0 <__aeabi_l2f>:
__aeabi_l2f():
 80009e0:	e1902001 	orrs	r2, r0, r1
 80009e4:	012fff1e 	bxeq	lr
 80009e8:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
 80009ec:	5a000001 	bpl	80009f8 <__aeabi_l2f+0x18>
 80009f0:	e2700000 	rsbs	r0, r0, #0
 80009f4:	e2e11000 	rsc	r1, r1, #0
 80009f8:	e1b0c001 	movs	ip, r1
 80009fc:	01a0c000 	moveq	ip, r0
 8000a00:	01a01000 	moveq	r1, r0
 8000a04:	03a00000 	moveq	r0, #0
 8000a08:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
 8000a0c:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
 8000a10:	e2433502 	sub	r3, r3, #8388608	; 0x800000
 8000a14:	e3a02017 	mov	r2, #23
 8000a18:	e35c0801 	cmp	ip, #65536	; 0x10000
 8000a1c:	21a0c82c 	lsrcs	ip, ip, #16
 8000a20:	22422010 	subcs	r2, r2, #16
 8000a24:	e35c0c01 	cmp	ip, #256	; 0x100
 8000a28:	21a0c42c 	lsrcs	ip, ip, #8
 8000a2c:	22422008 	subcs	r2, r2, #8
 8000a30:	e35c0010 	cmp	ip, #16
 8000a34:	21a0c22c 	lsrcs	ip, ip, #4
 8000a38:	22422004 	subcs	r2, r2, #4
 8000a3c:	e35c0004 	cmp	ip, #4
 8000a40:	22422002 	subcs	r2, r2, #2
 8000a44:	304220ac 	subcc	r2, r2, ip, lsr #1
 8000a48:	e05221ac 	subs	r2, r2, ip, lsr #3
 8000a4c:	e0433b82 	sub	r3, r3, r2, lsl #23
 8000a50:	ba000006 	blt	8000a70 <__aeabi_l2f+0x90>
 8000a54:	e0833211 	add	r3, r3, r1, lsl r2
 8000a58:	e1a0c210 	lsl	ip, r0, r2
 8000a5c:	e2622020 	rsb	r2, r2, #32
 8000a60:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 8000a64:	e0a30230 	adc	r0, r3, r0, lsr r2
 8000a68:	03c00001 	biceq	r0, r0, #1
 8000a6c:	e12fff1e 	bx	lr
 8000a70:	e2822020 	add	r2, r2, #32
 8000a74:	e1a0c211 	lsl	ip, r1, r2
 8000a78:	e2622020 	rsb	r2, r2, #32
 8000a7c:	e190008c 	orrs	r0, r0, ip, lsl #1
 8000a80:	e0a30231 	adc	r0, r3, r1, lsr r2
 8000a84:	01c00fac 	biceq	r0, r0, ip, lsr #31
 8000a88:	e12fff1e 	bx	lr

08000a8c <__aeabi_f2uiz>:
__fixunssfsi():
 8000a8c:	e1b02080 	lsls	r2, r0, #1
 8000a90:	2a000008 	bcs	8000ab8 <__aeabi_f2uiz+0x2c>
 8000a94:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
 8000a98:	3a000006 	bcc	8000ab8 <__aeabi_f2uiz+0x2c>
 8000a9c:	e3a0309e 	mov	r3, #158	; 0x9e
 8000aa0:	e0532c22 	subs	r2, r3, r2, lsr #24
 8000aa4:	4a000005 	bmi	8000ac0 <__aeabi_f2uiz+0x34>
 8000aa8:	e1a03400 	lsl	r3, r0, #8
 8000aac:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 8000ab0:	e1a00233 	lsr	r0, r3, r2
 8000ab4:	e12fff1e 	bx	lr
 8000ab8:	e3a00000 	mov	r0, #0
 8000abc:	e12fff1e 	bx	lr
 8000ac0:	e3720061 	cmn	r2, #97	; 0x61
 8000ac4:	1a000001 	bne	8000ad0 <__aeabi_f2uiz+0x44>
 8000ac8:	e1b02480 	lsls	r2, r0, #9
 8000acc:	1a000001 	bne	8000ad8 <__aeabi_f2uiz+0x4c>
 8000ad0:	e3e00000 	mvn	r0, #0
 8000ad4:	e12fff1e 	bx	lr
 8000ad8:	e3a00000 	mov	r0, #0
 8000adc:	e12fff1e 	bx	lr

08000ae0 <__libc_init_array>:
__libc_init_array():
 8000ae0:	e92d4070 	push	{r4, r5, r6, lr}
 8000ae4:	e59f606c 	ldr	r6, [pc, #108]	; 8000b58 <__libc_init_array+0x78>
 8000ae8:	e59f506c 	ldr	r5, [pc, #108]	; 8000b5c <__libc_init_array+0x7c>
 8000aec:	e0466005 	sub	r6, r6, r5
 8000af0:	e1b06146 	asrs	r6, r6, #2
 8000af4:	0a000007 	beq	8000b18 <__libc_init_array+0x38>
 8000af8:	e3a04000 	mov	r4, #0
 8000afc:	e2455004 	sub	r5, r5, #4
 8000b00:	e2844001 	add	r4, r4, #1
 8000b04:	e5b53004 	ldr	r3, [r5, #4]!
 8000b08:	e1a0e00f 	mov	lr, pc
 8000b0c:	e12fff13 	bx	r3
 8000b10:	e1560004 	cmp	r6, r4
 8000b14:	1afffff9 	bne	8000b00 <__libc_init_array+0x20>
 8000b18:	e59f6040 	ldr	r6, [pc, #64]	; 8000b60 <__libc_init_array+0x80>
 8000b1c:	e59f5040 	ldr	r5, [pc, #64]	; 8000b64 <__libc_init_array+0x84>
 8000b20:	e0466005 	sub	r6, r6, r5
 8000b24:	eb00007a 	bl	8000d14 <_init>
 8000b28:	e1b06146 	asrs	r6, r6, #2
 8000b2c:	0a000007 	beq	8000b50 <__libc_init_array+0x70>
 8000b30:	e3a04000 	mov	r4, #0
 8000b34:	e2455004 	sub	r5, r5, #4
 8000b38:	e2844001 	add	r4, r4, #1
 8000b3c:	e5b53004 	ldr	r3, [r5, #4]!
 8000b40:	e1a0e00f 	mov	lr, pc
 8000b44:	e12fff13 	bx	r3
 8000b48:	e1560004 	cmp	r6, r4
 8000b4c:	1afffff9 	bne	8000b38 <__libc_init_array+0x58>
 8000b50:	e8bd4070 	pop	{r4, r5, r6, lr}
 8000b54:	e12fff1e 	bx	lr
 8000b58:	08000d44 	.word	0x08000d44
 8000b5c:	08000d44 	.word	0x08000d44
 8000b60:	08000d4c 	.word	0x08000d4c
 8000b64:	08000d44 	.word	0x08000d44

08000b68 <register_fini>:
register_fini():
 8000b68:	e59f3018 	ldr	r3, [pc, #24]	; 8000b88 <register_fini+0x20>
 8000b6c:	e3530000 	cmp	r3, #0
 8000b70:	012fff1e 	bxeq	lr
 8000b74:	e92d4010 	push	{r4, lr}
 8000b78:	e59f000c 	ldr	r0, [pc, #12]	; 8000b8c <register_fini+0x24>
 8000b7c:	eb000003 	bl	8000b90 <atexit>
 8000b80:	e8bd4010 	pop	{r4, lr}
 8000b84:	e12fff1e 	bx	lr
 8000b88:	00000000 	.word	0x00000000
 8000b8c:	08000bb0 	.word	0x08000bb0

08000b90 <atexit>:
atexit():
 8000b90:	e3a03000 	mov	r3, #0
 8000b94:	e92d4010 	push	{r4, lr}
 8000b98:	e1a01000 	mov	r1, r0
 8000b9c:	e1a02003 	mov	r2, r3
 8000ba0:	e1a00003 	mov	r0, r3
 8000ba4:	eb000015 	bl	8000c00 <__register_exitproc>
 8000ba8:	e8bd4010 	pop	{r4, lr}
 8000bac:	e12fff1e 	bx	lr

08000bb0 <__libc_fini_array>:
__libc_fini_array():
 8000bb0:	e92d4070 	push	{r4, r5, r6, lr}
 8000bb4:	e59f4034 	ldr	r4, [pc, #52]	; 8000bf0 <__libc_fini_array+0x40>
 8000bb8:	e59f5034 	ldr	r5, [pc, #52]	; 8000bf4 <__libc_fini_array+0x44>
 8000bbc:	e0444005 	sub	r4, r4, r5
 8000bc0:	e1b04144 	asrs	r4, r4, #2
 8000bc4:	0a000006 	beq	8000be4 <__libc_fini_array+0x34>
 8000bc8:	e0855104 	add	r5, r5, r4, lsl #2
 8000bcc:	e2444001 	sub	r4, r4, #1
 8000bd0:	e5353004 	ldr	r3, [r5, #-4]!
 8000bd4:	e1a0e00f 	mov	lr, pc
 8000bd8:	e12fff13 	bx	r3
 8000bdc:	e3540000 	cmp	r4, #0
 8000be0:	1afffff9 	bne	8000bcc <__libc_fini_array+0x1c>
 8000be4:	eb000050 	bl	8000d2c <_fini>
 8000be8:	e8bd4070 	pop	{r4, r5, r6, lr}
 8000bec:	e12fff1e 	bx	lr
 8000bf0:	08000d50 	.word	0x08000d50
 8000bf4:	08000d4c 	.word	0x08000d4c

08000bf8 <__retarget_lock_acquire_recursive>:
__retarget_lock_acquire_recursive():
 8000bf8:	e12fff1e 	bx	lr

08000bfc <__retarget_lock_release_recursive>:
__retarget_lock_release_recursive():
 8000bfc:	e12fff1e 	bx	lr

08000c00 <__register_exitproc>:
__register_exitproc():
 8000c00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 8000c04:	e59f40a4 	ldr	r4, [pc, #164]	; 8000cb0 <__register_exitproc+0xb0>
 8000c08:	e1a05000 	mov	r5, r0
 8000c0c:	e5940000 	ldr	r0, [r4]
 8000c10:	e1a08002 	mov	r8, r2
 8000c14:	e1a07003 	mov	r7, r3
 8000c18:	e1a06001 	mov	r6, r1
 8000c1c:	ebfffff5 	bl	8000bf8 <__retarget_lock_acquire_recursive>
 8000c20:	e59f308c 	ldr	r3, [pc, #140]	; 8000cb4 <__register_exitproc+0xb4>
 8000c24:	e5932000 	ldr	r2, [r3]
 8000c28:	e5923148 	ldr	r3, [r2, #328]	; 0x148
 8000c2c:	e3530000 	cmp	r3, #0
 8000c30:	02823f53 	addeq	r3, r2, #332	; 0x14c
 8000c34:	05823148 	streq	r3, [r2, #328]	; 0x148
 8000c38:	e5932004 	ldr	r2, [r3, #4]
 8000c3c:	e352001f 	cmp	r2, #31
 8000c40:	e5940000 	ldr	r0, [r4]
 8000c44:	ca000016 	bgt	8000ca4 <__register_exitproc+0xa4>
 8000c48:	e3550000 	cmp	r5, #0
 8000c4c:	1a000007 	bne	8000c70 <__register_exitproc+0x70>
 8000c50:	e2821001 	add	r1, r2, #1
 8000c54:	e2822002 	add	r2, r2, #2
 8000c58:	e5831004 	str	r1, [r3, #4]
 8000c5c:	e7836102 	str	r6, [r3, r2, lsl #2]
 8000c60:	ebffffe5 	bl	8000bfc <__retarget_lock_release_recursive>
 8000c64:	e3a00000 	mov	r0, #0
 8000c68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 8000c6c:	e12fff1e 	bx	lr
 8000c70:	e3a0c001 	mov	ip, #1
 8000c74:	e083e102 	add	lr, r3, r2, lsl #2
 8000c78:	e58e8088 	str	r8, [lr, #136]	; 0x88
 8000c7c:	e5931188 	ldr	r1, [r3, #392]	; 0x188
 8000c80:	e1a0c21c 	lsl	ip, ip, r2
 8000c84:	e181100c 	orr	r1, r1, ip
 8000c88:	e5831188 	str	r1, [r3, #392]	; 0x188
 8000c8c:	e58e7108 	str	r7, [lr, #264]	; 0x108
 8000c90:	e3550002 	cmp	r5, #2
 8000c94:	0593118c 	ldreq	r1, [r3, #396]	; 0x18c
 8000c98:	0181c00c 	orreq	ip, r1, ip
 8000c9c:	0583c18c 	streq	ip, [r3, #396]	; 0x18c
 8000ca0:	eaffffea 	b	8000c50 <__register_exitproc+0x50>
 8000ca4:	ebffffd4 	bl	8000bfc <__retarget_lock_release_recursive>
 8000ca8:	e3e00000 	mvn	r0, #0
 8000cac:	eaffffed 	b	8000c68 <__register_exitproc+0x68>
 8000cb0:	20000440 	.word	0x20000440
 8000cb4:	08000d10 	.word	0x08000d10

08000cb8 <Reset_Handler>:
Reset_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:68
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cb8:	2100      	movs	r1, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:69
  b	LoopCopyDataInit
 8000cba:	e003      	b.n	8000cc4 <LoopCopyDataInit>

08000cbc <CopyDataInit>:
CopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72

CopyDataInit:
	ldr	r3, =_sidata
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <LoopFillZerobss+0x14>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:73
	ldr	r3, [r3, r1]
 8000cbe:	585b      	ldr	r3, [r3, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:74
	str	r3, [r0, r1]
 8000cc0:	5043      	str	r3, [r0, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:75
	adds	r1, r1, #4
 8000cc2:	3104      	adds	r1, #4

08000cc4 <LoopCopyDataInit>:
LoopCopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <LoopFillZerobss+0x18>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x1c>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:80
	adds	r2, r0, r1
 8000cc8:	1842      	adds	r2, r0, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:81
	cmp	r2, r3
 8000cca:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:82
	bcc	CopyDataInit
 8000ccc:	d3f6      	bcc.n	8000cbc <CopyDataInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <LoopFillZerobss+0x20>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:84
	b	LoopFillZerobss
 8000cd0:	e002      	b.n	8000cd8 <LoopFillZerobss>

08000cd2 <FillZerobss>:
FillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:87
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cd2:	2300      	movs	r3, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:88
	str	r3, [r2], #4
 8000cd4:	f842 3b04 	str.w	r3, [r2], #4

08000cd8 <LoopFillZerobss>:
LoopFillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <LoopFillZerobss+0x24>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:92
	cmp	r2, r3
 8000cda:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:93
	bcc	FillZerobss
 8000cdc:	d3f9      	bcc.n	8000cd2 <FillZerobss>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:96

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cde:	f7ff faa5 	bl	800022c <SystemInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:98
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f7ff fefd 	bl	8000ae0 <__libc_init_array>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:100
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fa66 	bl	80001b6 <main>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:101
	bx	lr
 8000cea:	4770      	bx	lr
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72
	ldr	r3, =_sidata
 8000cec:	08000d50 	.word	0x08000d50
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78
	ldr	r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000cf4:	20000444 	.word	0x20000444
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 8000cf8:	20000444 	.word	0x20000444
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91
	ldr	r3, = _ebss
 8000cfc:	20000484 	.word	0x20000484

08000d00 <ADC1_2_IRQHandler>:
USBWakeUp_IRQHandler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:115
 * @retval : None
*/
  .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC1_2_IRQHandler>
 8000d02:	0000      	movs	r0, r0
 8000d04:	20535452 	.word	0x20535452
 8000d08:	72617453 	.word	0x72617453
 8000d0c:	000a0d74 	.word	0x000a0d74

08000d10 <_global_impure_ptr>:
 8000d10:	20000018                                ... 

08000d14 <_init>:
_init():
 8000d14:	e1a0c00d 	mov	ip, sp
 8000d18:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 8000d1c:	e24cb004 	sub	fp, ip, #4
 8000d20:	e24bd028 	sub	sp, fp, #40	; 0x28
 8000d24:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8000d28:	e12fff1e 	bx	lr

08000d2c <_fini>:
_fini():
 8000d2c:	e1a0c00d 	mov	ip, sp
 8000d30:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
 8000d34:	e24cb004 	sub	fp, ip, #4
 8000d38:	e24bd028 	sub	sp, fp, #40	; 0x28
 8000d3c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8000d40:	e12fff1e 	bx	lr
