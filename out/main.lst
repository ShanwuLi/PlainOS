
out/main.elf:     file format elf32-littlearm
out/main.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000509

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000588 memsz 0x00000588 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x08000588 align 2**16
         filesz 0x0000042c memsz 0x0000056c flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector       0000010c  08000000  08000000  00010000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text             00000470  0800010c  0800010c  0001010c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes   0000002b  0800057c  0800057c  0002042c  2**0  CONTENTS, READONLY
  3 .init_array       00000008  0800057c  0800057c  0001057c  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array       00000004  08000584  08000584  00010584  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data             0000042c  20000000  08000588  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              00000040  2000042c  080009b4  0002042c  2**2  ALLOC
  7 ._user_heap_stack 00000100  2000046c  080009f4  0002042c  2**0  ALLOC
  8 .debug_frame      0000030c  00000000  00000000  00020458  2**2  CONTENTS, READONLY, DEBUGGING
  9 .debug_info       00001267  00000000  00000000  00020764  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     000005bd  00000000  00000000  000219cb  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    00000100  00000000  00000000  00021f88  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges     000000b8  00000000  00000000  00022088  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_line       00000a77  00000000  00000000  00022140  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str        00000891  00000000  00000000  00022bb7  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment          00000076  00000000  00000000  00023448  2**0  CONTENTS, READONLY
 16 .debug_loc        000001fb  00000000  00000000  000234be  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
0800057c l    d  .ARM.attributes	00000000 .ARM.attributes
0800057c l    d  .init_array	00000000 .init_array
08000584 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
2000042c l    d  .bss	00000000 .bss
2000046c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 out/./arch/arm/stm32f103c8t6/startup_stm32f10x_md.o
f108f85f l       *ABS*	00000000 BootRAM
08000514 l       .text	00000000 LoopCopyDataInit
0800050c l       .text	00000000 CopyDataInit
08000528 l       .text	00000000 LoopFillZerobss
08000522 l       .text	00000000 FillZerobss
08000550 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800010c l     F .text	00000000 __do_global_dtors_aux
2000042c l       .bss	00000001 completed.8885
08000584 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000130 l     F .text	00000000 frame_dummy
20000430 l       .bss	00000018 object.8890
08000580 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08000194 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 main.c
08000274 l     F .text	0000002a delay
00000000 l    df *ABS*	00000000 system_stm32f10x.c
08000300 l     F .text	000000d0 SetSysClockTo72
080003d0 l     F .text	0000000c SetSysClock
00000000 l    df *ABS*	00000000 stm32f10x_it.c
00000000 l    df *ABS*	00000000 USART.c
00000000 l    df *ABS*	00000000 impure.c
20000000 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7-m/nofp/crti.o
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 
08000588 l       .fini_array	00000000 __fini_array_end
08000584 l       .fini_array	00000000 __fini_array_start
08000584 l       .init_array	00000000 __init_array_end
0800057c l       .ARM.attributes	00000000 __preinit_array_end
0800057c l       .init_array	00000000 __init_array_start
0800057c l       .ARM.attributes	00000000 __preinit_array_start
08000550  w    F .text	00000002 EXTI2_IRQHandler
08000444 g     F .text	00000002 DebugMon_Handler
20000448 g     O .bss	00000001 __lock___atexit_recursive_mutex
08000550  w    F .text	00000002 TIM1_CC_IRQHandler
0800043a g     F .text	00000002 HardFault_Handler
00000100 g       *ABS*	00000000 _Min_Stack_Size
08000550  w    F .text	00000002 SysTick_Handler
2000044c g     O .bss	00000001 __lock___arc4random_mutex
08000550  w    F .text	00000002 PVD_IRQHandler
08000588 g       .fini_array	00000000 _sidata
08000550  w    F .text	00000002 PendSV_Handler
08000438 g     F .text	00000002 NMI_Handler
0800057c g       .text	00000000 __exidx_end
08000550  w    F .text	00000002 EXTI3_IRQHandler
20000428 g     O .data	00000004 __atexit_recursive_mutex
0800057c g       .text	00000000 _etext
2000042c g       .bss	00000000 _sbss
08000550  w    F .text	00000002 EXTI0_IRQHandler
08000550  w    F .text	00000002 I2C2_EV_IRQHandler
08000440 g     F .text	00000002 UsageFault_Handler
08000550  w    F .text	00000002 ADC1_2_IRQHandler
2000042c g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000550  w    F .text	00000002 SPI1_IRQHandler
08000550  w    F .text	00000002 TAMPER_IRQHandler
0800057c g       .text	00000000 __exidx_start
20000450 g     O .bss	00000001 __lock___env_recursive_mutex
20000454 g     O .bss	00000001 __lock___sinit_recursive_mutex
08000554 g     O .text	00000004 _global_impure_ptr
0800014c g     F .text	00000048 __libc_init_array
08000550  w    F .text	00000002 DMA1_Channel4_IRQHandler
08000564 g     F .text	00000000 _init
080004e8 g     F .text	00000020 USART1_PrintString
08000550  w    F .text	00000002 USART3_IRQHandler
080001b4 g     F .text	00000034 __libc_fini_array
08000550  w    F .text	00000002 RTC_IRQHandler
2000046c g       .bss	00000000 _ebss
08000550  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000508  w    F .text	00000034 Reset_Handler
08000550  w    F .text	00000002 CAN1_RX1_IRQHandler
20000458 g     O .bss	00000001 __lock___malloc_recursive_mutex
08000550  w    F .text	00000002 TIM4_IRQHandler
08000550  w    F .text	00000002 I2C1_EV_IRQHandler
080001ec g     F .text	00000002 __retarget_lock_release_recursive
08000550  w    F .text	00000002 DMA1_Channel6_IRQHandler
2000046c g       .bss	00000000 __bss_end__
08000550  w    F .text	00000002 TIM3_IRQHandler
08000550  w    F .text	00000002 RCC_IRQHandler
08000448 g     F .text	000000a0 USART1_Init
08000550  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
00000000 g       *ABS*	00000000 _Min_Heap_Size
08000550  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000550 g       .text	00000002 Default_Handler
08000550  w    F .text	00000002 EXTI15_10_IRQHandler
080001f0 g     F .text	00000084 __register_exitproc
08000550  w    F .text	00000002 EXTI9_5_IRQHandler
08000550  w    F .text	00000002 SPI2_IRQHandler
080001e8 g     F .text	00000002 __retarget_lock_acquire_recursive
0800043c g     F .text	00000002 MemManage_Handler
080002a0 g     F .text	00000060 main
08000442 g     F .text	00000002 SVC_Handler
08000550  w    F .text	00000002 DMA1_Channel5_IRQHandler
08000550  w    F .text	00000002 EXTI4_IRQHandler
08000550  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
080003dc g     F .text	0000005c SystemInit
08000570 g     F .text	00000000 _fini
08000550  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
080001a8 g     F .text	0000000c atexit
08000550  w    F .text	00000002 DMA1_Channel3_IRQHandler
08000550  w    F .text	00000002 TIM1_UP_IRQHandler
08000550  w    F .text	00000002 WWDG_IRQHandler
08000550  w    F .text	00000002 TIM2_IRQHandler
08000550  w    F .text	00000002 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
08000550  w    F .text	00000002 EXTI1_IRQHandler
2000042c g       .data	00000000 _edata
2000045c g     O .bss	00000001 __lock___at_quick_exit_mutex
08000550  w    F .text	00000002 RTCAlarm_IRQHandler
08000550  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000550  w    F .text	00000002 I2C2_ER_IRQHandler
08000550  w    F .text	00000002 DMA1_Channel2_IRQHandler
08000550  w    F .text	00000002 CAN1_SCE_IRQHandler
08000550  w    F .text	00000002 FLASH_IRQHandler
0800043e g     F .text	00000002 BusFault_Handler
08000550  w    F .text	00000002 USART1_IRQHandler
20000460 g     O .bss	00000001 __lock___dd_hash_mutex
20000464 g     O .bss	00000001 __lock___tz_mutex
08000550  w    F .text	00000002 I2C1_ER_IRQHandler
08000550  w    F .text	00000002 USBWakeUp_IRQHandler
20000468 g     O .bss	00000001 __lock___sfp_recursive_mutex



Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
__do_global_dtors_aux():
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000042c 	.word	0x2000042c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800010c 	.word	0x0800010c

08000130 <frame_dummy>:
frame_dummy():
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000430 	.word	0x20000430
 8000148:	0800010c 	.word	0x0800010c

0800014c <__libc_init_array>:
__libc_init_array():
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	4e0d      	ldr	r6, [pc, #52]	; (8000184 <__libc_init_array+0x38>)
 8000150:	4d0d      	ldr	r5, [pc, #52]	; (8000188 <__libc_init_array+0x3c>)
 8000152:	1b76      	subs	r6, r6, r5
 8000154:	10b6      	asrs	r6, r6, #2
 8000156:	d006      	beq.n	8000166 <__libc_init_array+0x1a>
 8000158:	2400      	movs	r4, #0
 800015a:	3401      	adds	r4, #1
 800015c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000160:	4798      	blx	r3
 8000162:	42a6      	cmp	r6, r4
 8000164:	d1f9      	bne.n	800015a <__libc_init_array+0xe>
 8000166:	4e09      	ldr	r6, [pc, #36]	; (800018c <__libc_init_array+0x40>)
 8000168:	4d09      	ldr	r5, [pc, #36]	; (8000190 <__libc_init_array+0x44>)
 800016a:	f000 f9fb 	bl	8000564 <_init>
 800016e:	1b76      	subs	r6, r6, r5
 8000170:	10b6      	asrs	r6, r6, #2
 8000172:	d006      	beq.n	8000182 <__libc_init_array+0x36>
 8000174:	2400      	movs	r4, #0
 8000176:	3401      	adds	r4, #1
 8000178:	f855 3b04 	ldr.w	r3, [r5], #4
 800017c:	4798      	blx	r3
 800017e:	42a6      	cmp	r6, r4
 8000180:	d1f9      	bne.n	8000176 <__libc_init_array+0x2a>
 8000182:	bd70      	pop	{r4, r5, r6, pc}
 8000184:	0800057c 	.word	0x0800057c
 8000188:	0800057c 	.word	0x0800057c
 800018c:	08000584 	.word	0x08000584
 8000190:	0800057c 	.word	0x0800057c

08000194 <register_fini>:
register_fini():
 8000194:	4b02      	ldr	r3, [pc, #8]	; (80001a0 <register_fini+0xc>)
 8000196:	b113      	cbz	r3, 800019e <register_fini+0xa>
 8000198:	4802      	ldr	r0, [pc, #8]	; (80001a4 <register_fini+0x10>)
 800019a:	f000 b805 	b.w	80001a8 <atexit>
 800019e:	4770      	bx	lr
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080001b5 	.word	0x080001b5

080001a8 <atexit>:
atexit():
 80001a8:	2300      	movs	r3, #0
 80001aa:	4601      	mov	r1, r0
 80001ac:	461a      	mov	r2, r3
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 b81e 	b.w	80001f0 <__register_exitproc>

080001b4 <__libc_fini_array>:
__libc_fini_array():
 80001b4:	b538      	push	{r3, r4, r5, lr}
 80001b6:	4c0a      	ldr	r4, [pc, #40]	; (80001e0 <__libc_fini_array+0x2c>)
 80001b8:	4d0a      	ldr	r5, [pc, #40]	; (80001e4 <__libc_fini_array+0x30>)
 80001ba:	1b64      	subs	r4, r4, r5
 80001bc:	10a4      	asrs	r4, r4, #2
 80001be:	d00a      	beq.n	80001d6 <__libc_fini_array+0x22>
 80001c0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80001c4:	3b01      	subs	r3, #1
 80001c6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80001ca:	3c01      	subs	r4, #1
 80001cc:	f855 3904 	ldr.w	r3, [r5], #-4
 80001d0:	4798      	blx	r3
 80001d2:	2c00      	cmp	r4, #0
 80001d4:	d1f9      	bne.n	80001ca <__libc_fini_array+0x16>
 80001d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80001da:	f000 b9c9 	b.w	8000570 <_fini>
 80001de:	bf00      	nop
 80001e0:	08000588 	.word	0x08000588
 80001e4:	08000584 	.word	0x08000584

080001e8 <__retarget_lock_acquire_recursive>:
__retarget_lock_acquire_recursive():
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop

080001ec <__retarget_lock_release_recursive>:
__retarget_lock_release_recursive():
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop

080001f0 <__register_exitproc>:
__register_exitproc():
 80001f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80001f4:	4c1d      	ldr	r4, [pc, #116]	; (800026c <__register_exitproc+0x7c>)
 80001f6:	4605      	mov	r5, r0
 80001f8:	6820      	ldr	r0, [r4, #0]
 80001fa:	4690      	mov	r8, r2
 80001fc:	461f      	mov	r7, r3
 80001fe:	460e      	mov	r6, r1
 8000200:	f7ff fff2 	bl	80001e8 <__retarget_lock_acquire_recursive>
 8000204:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <__register_exitproc+0x80>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 800020c:	b31b      	cbz	r3, 8000256 <__register_exitproc+0x66>
 800020e:	685a      	ldr	r2, [r3, #4]
 8000210:	6820      	ldr	r0, [r4, #0]
 8000212:	2a1f      	cmp	r2, #31
 8000214:	dc24      	bgt.n	8000260 <__register_exitproc+0x70>
 8000216:	b94d      	cbnz	r5, 800022c <__register_exitproc+0x3c>
 8000218:	1c51      	adds	r1, r2, #1
 800021a:	3202      	adds	r2, #2
 800021c:	6059      	str	r1, [r3, #4]
 800021e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 8000222:	f7ff ffe3 	bl	80001ec <__retarget_lock_release_recursive>
 8000226:	2000      	movs	r0, #0
 8000228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800022c:	2401      	movs	r4, #1
 800022e:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8000232:	f8cc 8088 	str.w	r8, [ip, #136]	; 0x88
 8000236:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 800023a:	4094      	lsls	r4, r2
 800023c:	4321      	orrs	r1, r4
 800023e:	2d02      	cmp	r5, #2
 8000240:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
 8000244:	f8cc 7108 	str.w	r7, [ip, #264]	; 0x108
 8000248:	d1e6      	bne.n	8000218 <__register_exitproc+0x28>
 800024a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 800024e:	430c      	orrs	r4, r1
 8000250:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 8000254:	e7e0      	b.n	8000218 <__register_exitproc+0x28>
 8000256:	f502 73a6 	add.w	r3, r2, #332	; 0x14c
 800025a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800025e:	e7d6      	b.n	800020e <__register_exitproc+0x1e>
 8000260:	f7ff ffc4 	bl	80001ec <__retarget_lock_release_recursive>
 8000264:	f04f 30ff 	mov.w	r0, #4294967295
 8000268:	e7de      	b.n	8000228 <__register_exitproc+0x38>
 800026a:	bf00      	nop
 800026c:	20000428 	.word	0x20000428
 8000270:	08000554 	.word	0x08000554

08000274 <delay>:
delay():
C:\Users\lisha\Desktop\plain-os/main.c:14
 * ************************************************
*/
#include "stm32f10x.h"

static void delay(int x)
{
 8000274:	b082      	sub	sp, #8
C:\Users\lisha\Desktop\plain-os/main.c:16
    volatile int i,j;
    for (i = 0; i < x; i++)
 8000276:	2300      	movs	r3, #0
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	e002      	b.n	8000282 <delay+0xe>
C:\Users\lisha\Desktop\plain-os/main.c:16 (discriminator 2)
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	9301      	str	r3, [sp, #4]
C:\Users\lisha\Desktop\plain-os/main.c:16 (discriminator 1)
 8000282:	9b01      	ldr	r3, [sp, #4]
 8000284:	4283      	cmp	r3, r0
 8000286:	da08      	bge.n	800029a <delay+0x26>
C:\Users\lisha\Desktop\plain-os/main.c:18
    {
        for (j = 0; j < 10; j++)
 8000288:	2300      	movs	r3, #0
 800028a:	9300      	str	r3, [sp, #0]
C:\Users\lisha\Desktop\plain-os/main.c:18 (discriminator 1)
 800028c:	9b00      	ldr	r3, [sp, #0]
 800028e:	2b09      	cmp	r3, #9
 8000290:	dcf4      	bgt.n	800027c <delay+0x8>
C:\Users\lisha\Desktop\plain-os/main.c:18 (discriminator 3)
 8000292:	9b00      	ldr	r3, [sp, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	e7f8      	b.n	800028c <delay+0x18>
C:\Users\lisha\Desktop\plain-os/main.c:21
            ;
    }
}
 800029a:	b002      	add	sp, #8
 800029c:	4770      	bx	lr
	...

080002a0 <main>:
main():
C:\Users\lisha\Desktop\plain-os/main.c:25
#include "drivers/USART.h"

int main()
{
 80002a0:	b510      	push	{r4, lr}
C:\Users\lisha\Desktop\plain-os/main.c:27
	//开启GPIOB端口时钟
	RCC->APB2ENR |= (1<<4);
 80002a2:	4a11      	ldr	r2, [pc, #68]	; (80002e8 <main+0x48>)
 80002a4:	6993      	ldr	r3, [r2, #24]
 80002a6:	2110      	movs	r1, #16
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6193      	str	r3, [r2, #24]
C:\Users\lisha\Desktop\plain-os/main.c:29
	//清空控制PB0的端口位
	GPIOC->CRH &= ~( 0x0f<< (20));
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <main+0x4c>)
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	490f      	ldr	r1, [pc, #60]	; (80002f0 <main+0x50>)
 80002b2:	400a      	ands	r2, r1
 80002b4:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/main.c:31
	//配置PB0为通用推挽输出，速度为10M
	GPIOC->CRH |= (0x03<<20);
 80002b6:	6859      	ldr	r1, [r3, #4]
 80002b8:	22c0      	movs	r2, #192	; 0xc0
 80002ba:	0392      	lsls	r2, r2, #14
 80002bc:	430a      	orrs	r2, r1
 80002be:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/main.c:33
	//PB0输出低电平
	GPIOC->ODR &= (~(1 << 13));
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	490c      	ldr	r1, [pc, #48]	; (80002f4 <main+0x54>)
 80002c4:	400a      	ands	r2, r1
 80002c6:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/main.c:35

	USART1_Init();
 80002c8:	f000 f8be 	bl	8000448 <USART1_Init>
C:\Users\lisha\Desktop\plain-os/main.c:36
	USART1_PrintString("RTS Start\r\n");
 80002cc:	480a      	ldr	r0, [pc, #40]	; (80002f8 <main+0x58>)
 80002ce:	f000 f90b 	bl	80004e8 <USART1_PrintString>
C:\Users\lisha\Desktop\plain-os/main.c:40 (discriminator 1)

	while (1)
	{
		USART1_PrintString("RTS Start\r\n");
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <main+0x58>)
 80002d4:	f000 f908 	bl	80004e8 <USART1_PrintString>
C:\Users\lisha\Desktop\plain-os/main.c:41 (discriminator 1)
		GPIOC->ODR = ~GPIOC->ODR;
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <main+0x4c>)
 80002da:	68d3      	ldr	r3, [r2, #12]
 80002dc:	43db      	mvns	r3, r3
 80002de:	60d3      	str	r3, [r2, #12]
C:\Users\lisha\Desktop\plain-os/main.c:42 (discriminator 1)
		delay(100000);
 80002e0:	4806      	ldr	r0, [pc, #24]	; (80002fc <main+0x5c>)
 80002e2:	f7ff ffc7 	bl	8000274 <delay>
 80002e6:	e7f4      	b.n	80002d2 <main+0x32>
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40011000 	.word	0x40011000
 80002f0:	ff0fffff 	.word	0xff0fffff
 80002f4:	ffffdfff 	.word	0xffffdfff
 80002f8:	08000558 	.word	0x08000558
 80002fc:	000186a0 	.word	0x000186a0

08000300 <SetSysClockTo72>:
SetSysClockTo72():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:988
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000300:	b082      	sub	sp, #8
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:989
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	9300      	str	r3, [sp, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000308:	4a2e      	ldr	r2, [pc, #184]	; (80003c4 <SetSysClockTo72+0xc4>)
 800030a:	6811      	ldr	r1, [r2, #0]
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	025b      	lsls	r3, r3, #9
 8000310:	430b      	orrs	r3, r1
 8000312:	6013      	str	r3, [r2, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:998 (discriminator 2)
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <SetSysClockTo72+0xc4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	0292      	lsls	r2, r2, #10
 800031c:	4013      	ands	r3, r2
 800031e:	9300      	str	r3, [sp, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:999 (discriminator 2)
    StartUpCounter++;  
 8000320:	9b01      	ldr	r3, [sp, #4]
 8000322:	3301      	adds	r3, #1
 8000324:	9301      	str	r3, [sp, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000 (discriminator 2)
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000326:	9b00      	ldr	r3, [sp, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d104      	bne.n	8000336 <SetSysClockTo72+0x36>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000 (discriminator 1)
 800032c:	9a01      	ldr	r2, [sp, #4]
 800032e:	23a0      	movs	r3, #160	; 0xa0
 8000330:	00db      	lsls	r3, r3, #3
 8000332:	429a      	cmp	r2, r3
 8000334:	d1ee      	bne.n	8000314 <SetSysClockTo72+0x14>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000336:	4b23      	ldr	r3, [pc, #140]	; (80003c4 <SetSysClockTo72+0xc4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	039b      	lsls	r3, r3, #14
 800033c:	d506      	bpl.n	800034c <SetSysClockTo72+0x4c>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 800033e:	2301      	movs	r3, #1
 8000340:	9300      	str	r3, [sp, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1011
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000342:	9b00      	ldr	r3, [sp, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d004      	beq.n	8000352 <SetSysClockTo72+0x52>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1080
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000348:	b002      	add	sp, #8
 800034a:	4770      	bx	lr
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1008
    HSEStatus = (uint32_t)0x00;
 800034c:	2300      	movs	r3, #0
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	e7f7      	b.n	8000342 <SetSysClockTo72+0x42>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1014
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <SetSysClockTo72+0xc8>)
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	2110      	movs	r1, #16
 8000358:	430a      	orrs	r2, r1
 800035a:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1017
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	390d      	subs	r1, #13
 8000360:	438a      	bics	r2, r1
 8000362:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	3901      	subs	r1, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1022
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <SetSysClockTo72+0xc4>)
 800036e:	685a      	ldr	r2, [r3, #4]
 8000370:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1025
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1028
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000376:	6859      	ldr	r1, [r3, #4]
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	00d2      	lsls	r2, r2, #3
 800037c:	430a      	orrs	r2, r1
 800037e:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000380:	685a      	ldr	r2, [r3, #4]
 8000382:	4912      	ldr	r1, [pc, #72]	; (80003cc <SetSysClockTo72+0xcc>)
 8000384:	400a      	ands	r2, r1
 8000386:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1056
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000388:	6859      	ldr	r1, [r3, #4]
 800038a:	22e8      	movs	r2, #232	; 0xe8
 800038c:	0352      	lsls	r2, r2, #13
 800038e:	430a      	orrs	r2, r1
 8000390:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1060
    RCC->CR |= RCC_CR_PLLON;
 8000392:	6819      	ldr	r1, [r3, #0]
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	0452      	lsls	r2, r2, #17
 8000398:	430a      	orrs	r2, r1
 800039a:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1063 (discriminator 1)
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <SetSysClockTo72+0xc4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	019b      	lsls	r3, r3, #6
 80003a2:	d5fb      	bpl.n	800039c <SetSysClockTo72+0x9c>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1068
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <SetSysClockTo72+0xc4>)
 80003a6:	685a      	ldr	r2, [r3, #4]
 80003a8:	2103      	movs	r1, #3
 80003aa:	438a      	bics	r2, r1
 80003ac:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	3901      	subs	r1, #1
 80003b2:	430a      	orrs	r2, r1
 80003b4:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1072 (discriminator 1)
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80003b6:	4b03      	ldr	r3, [pc, #12]	; (80003c4 <SetSysClockTo72+0xc4>)
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	230c      	movs	r3, #12
 80003bc:	4013      	ands	r3, r2
 80003be:	2b08      	cmp	r3, #8
 80003c0:	d1f9      	bne.n	80003b6 <SetSysClockTo72+0xb6>
 80003c2:	e7c1      	b.n	8000348 <SetSysClockTo72+0x48>
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40022000 	.word	0x40022000
 80003cc:	ffc0ffff 	.word	0xffc0ffff

080003d0 <SetSysClock>:
SetSysClock():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:420
{
 80003d0:	b510      	push	{r4, lr}
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:432
  SetSysClockTo72();
 80003d2:	f7ff ff95 	bl	8000300 <SetSysClockTo72>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:437
}
 80003d6:	bc10      	pop	{r4}
 80003d8:	bc01      	pop	{r0}
 80003da:	4700      	bx	r0

080003dc <SystemInit>:
SystemInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:213
{
 80003dc:	b510      	push	{r4, lr}
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:216
  RCC->CR |= (uint32_t)0x00000001;
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <SystemInit+0x44>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	2101      	movs	r1, #1
 80003e4:	430a      	orrs	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:220
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003e8:	685a      	ldr	r2, [r3, #4]
 80003ea:	490e      	ldr	r1, [pc, #56]	; (8000424 <SystemInit+0x48>)
 80003ec:	400a      	ands	r2, r1
 80003ee:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:226
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <SystemInit+0x4c>)
 80003f4:	400a      	ands	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:229
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80003f8:	681a      	ldr	r2, [r3, #0]
 80003fa:	490c      	ldr	r1, [pc, #48]	; (800042c <SystemInit+0x50>)
 80003fc:	400a      	ands	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:232
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000400:	685a      	ldr	r2, [r3, #4]
 8000402:	490b      	ldr	r1, [pc, #44]	; (8000430 <SystemInit+0x54>)
 8000404:	400a      	ands	r2, r1
 8000406:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:251
  RCC->CIR = 0x009F0000;
 8000408:	229f      	movs	r2, #159	; 0x9f
 800040a:	0412      	lsls	r2, r2, #16
 800040c:	609a      	str	r2, [r3, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:262
  SetSysClock();
 800040e:	f7ff ffdf 	bl	80003d0 <SetSysClock>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:267
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <SystemInit+0x58>)
 8000414:	2280      	movs	r2, #128	; 0x80
 8000416:	0512      	lsls	r2, r2, #20
 8000418:	609a      	str	r2, [r3, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:269
}
 800041a:	bc10      	pop	{r4}
 800041c:	bc01      	pop	{r0}
 800041e:	4700      	bx	r0
 8000420:	40021000 	.word	0x40021000
 8000424:	f8ff0000 	.word	0xf8ff0000
 8000428:	fef6ffff 	.word	0xfef6ffff
 800042c:	fffbffff 	.word	0xfffbffff
 8000430:	ff80ffff 	.word	0xff80ffff
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <NMI_Handler>:
NMI_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:54
  * @retval None
  */
void NMI_Handler(void)
{
	
}
 8000438:	4770      	bx	lr

0800043a <HardFault_Handler>:
HardFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:66 (discriminator 1)
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800043a:	e7fe      	b.n	800043a <HardFault_Handler>

0800043c <MemManage_Handler>:
MemManage_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:79 (discriminator 1)
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800043c:	e7fe      	b.n	800043c <MemManage_Handler>

0800043e <BusFault_Handler>:
BusFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:92 (discriminator 1)
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800043e:	e7fe      	b.n	800043e <BusFault_Handler>

08000440 <UsageFault_Handler>:
UsageFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:106 (discriminator 1)
{

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000440:	e7fe      	b.n	8000440 <UsageFault_Handler>

08000442 <SVC_Handler>:
SVC_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:116
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8000442:	4770      	bx	lr

08000444 <DebugMon_Handler>:
DebugMon_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:125
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000444:	4770      	bx	lr
	...

08000448 <USART1_Init>:
USART1_Init():
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:47
#if(USART1_EN==1)
void USART1_Init(void)
{   
   unsigned int integer;                   //����һ���������洢��������
   float   decimal;                        //����һ���������洢С������
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <USART1_Init+0x74>)
 800044a:	6999      	ldr	r1, [r3, #24]
 800044c:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <USART1_Init+0x78>)
 800044e:	430a      	orrs	r2, r1
 8000450:	619a      	str	r2, [r3, #24]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:48
	 RCC->APB2RSTR|=(1<<14);                 //��λ����USART1
 8000452:	68d9      	ldr	r1, [r3, #12]
 8000454:	2280      	movs	r2, #128	; 0x80
 8000456:	01d2      	lsls	r2, r2, #7
 8000458:	430a      	orrs	r2, r1
 800045a:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:49
	 RCC->APB2RSTR&=(~(1<<14));              //ֹͣ��λ
 800045c:	68da      	ldr	r2, [r3, #12]
 800045e:	4919      	ldr	r1, [pc, #100]	; (80004c4 <USART1_Init+0x7c>)
 8000460:	400a      	ands	r2, r1
 8000462:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:51
	 
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 8000464:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <USART1_Init+0x80>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	4918      	ldr	r1, [pc, #96]	; (80004cc <USART1_Init+0x84>)
 800046a:	400a      	ands	r2, r1
 800046c:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:52
	 GPIOA->CRH|=0X000008B0;                 //����PA10Ϊ�������룬����PA9Ϊ�����������
 800046e:	6859      	ldr	r1, [r3, #4]
 8000470:	228b      	movs	r2, #139	; 0x8b
 8000472:	0112      	lsls	r2, r2, #4
 8000474:	430a      	orrs	r2, r1
 8000476:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:55
	
	
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <USART1_Init+0x88>)
 800047a:	8999      	ldrh	r1, [r3, #12]
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	0192      	lsls	r2, r2, #6
 8000480:	430a      	orrs	r2, r1
 8000482:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:56
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 8000484:	899a      	ldrh	r2, [r3, #12]
 8000486:	2104      	movs	r1, #4
 8000488:	430a      	orrs	r2, r1
 800048a:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:57
	 USART1->CR1|=(1<<5);                    //���ж�
 800048c:	899a      	ldrh	r2, [r3, #12]
 800048e:	2120      	movs	r1, #32
 8000490:	430a      	orrs	r2, r1
 8000492:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:58
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
 8000494:	899a      	ldrh	r2, [r3, #12]
 8000496:	2008      	movs	r0, #8
 8000498:	4302      	orrs	r2, r0
 800049a:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:63
	 
	
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
   decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   //ȡ��С������
   USART1->BRR=(integer<<4)|((unsigned int)decimal*16);  //��ת�����ֵ����BRR�Ĵ���
 800049c:	229c      	movs	r2, #156	; 0x9c
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	811a      	strh	r2, [r3, #8]
__NVIC_SetPriorityGrouping():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1485
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <USART1_Init+0x8c>)
 80004a4:	68c3      	ldr	r3, [r0, #12]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1486
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004a6:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <USART1_Init+0x90>)
 80004a8:	401a      	ands	r2, r3
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1487
  reg_value  =  (reg_value                                   |
 80004aa:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <USART1_Init+0x94>)
 80004ac:	4313      	orrs	r3, r2
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1490
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80004ae:	60c3      	str	r3, [r0, #12]
__NVIC_SetPriority():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1643
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <USART1_Init+0x98>)
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <USART1_Init+0x9c>)
 80004b4:	5499      	strb	r1, [r3, r2]
__NVIC_EnableIRQ():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1515
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b6:	2220      	movs	r2, #32
 80004b8:	605a      	str	r2, [r3, #4]
USART1_Init():
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:69
   
   NVIC_SetPriorityGrouping(1);            //�������ȼ�����1
   NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(1,2,1));     //������ռ���ȼ�Ϊ1�������ȼ�Ϊ1
   NVIC_EnableIRQ(USART1_IRQn);            //ʹ��USART�ж�
   
}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000
 80004c0:	00004004 	.word	0x00004004
 80004c4:	ffffbfff 	.word	0xffffbfff
 80004c8:	40010800 	.word	0x40010800
 80004cc:	fffff00f 	.word	0xfffff00f
 80004d0:	40013800 	.word	0x40013800
 80004d4:	e000ed00 	.word	0xe000ed00
 80004d8:	0000f8ff 	.word	0x0000f8ff
 80004dc:	05fa0100 	.word	0x05fa0100
 80004e0:	e000e100 	.word	0xe000e100
 80004e4:	00000325 	.word	0x00000325

080004e8 <USART1_PrintString>:
USART1_PrintString():
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:77
void USART1_PrintString(const char *String)
{
   const char *p;                            
   p=String;

   while(*p)
 80004e8:	e000      	b.n	80004ec <USART1_PrintString+0x4>
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:81
   {
      USART1->DR=*p;                        
      while(!(USART1->SR&(1<<6)));
      p++;
 80004ea:	3001      	adds	r0, #1
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:77
   while(*p)
 80004ec:	7803      	ldrb	r3, [r0, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <USART1_PrintString+0x18>
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:79
      USART1->DR=*p;                        
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <USART1_PrintString+0x1c>)
 80004f4:	8093      	strh	r3, [r2, #4]
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:80 (discriminator 1)
      while(!(USART1->SR&(1<<6)));
 80004f6:	4b03      	ldr	r3, [pc, #12]	; (8000504 <USART1_PrintString+0x1c>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	065b      	lsls	r3, r3, #25
 80004fc:	d5fb      	bpl.n	80004f6 <USART1_PrintString+0xe>
 80004fe:	e7f4      	b.n	80004ea <USART1_PrintString+0x2>
C:\Users\lisha\Desktop\plain-os/drivers/uart/USART.c:84
    }

}
 8000500:	4770      	bx	lr
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	40013800 	.word	0x40013800

08000508 <Reset_Handler>:
Reset_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:68
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000508:	2100      	movs	r1, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:69
  b	LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:
CopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72

CopyDataInit:
	ldr	r3, =_sidata
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <LoopFillZerobss+0x14>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:73
	ldr	r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:74
	str	r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:75
	adds	r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:
LoopCopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000514:	480a      	ldr	r0, [pc, #40]	; (8000540 <LoopFillZerobss+0x18>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:80
	adds	r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:81
	cmp	r2, r3
 800051a:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:82
	bcc	CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopFillZerobss+0x20>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:84
	b	LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
FillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:87
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000522:	2300      	movs	r3, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:88
	str	r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:
LoopFillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91

LoopFillZerobss:
	ldr	r3, = _ebss
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <LoopFillZerobss+0x24>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:92
	cmp	r2, r3
 800052a:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:93
	bcc	FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:96

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800052e:	f7ff ff55 	bl	80003dc <SystemInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:98
/* Call static constructors */
    bl __libc_init_array
 8000532:	f7ff fe0b 	bl	800014c <__libc_init_array>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:100
/* Call the application's entry point.*/
	bl	main
 8000536:	f7ff feb3 	bl	80002a0 <main>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:101
	bx	lr
 800053a:	4770      	bx	lr
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72
	ldr	r3, =_sidata
 800053c:	08000588 	.word	0x08000588
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78
	ldr	r0, =_sdata
 8000540:	20000000 	.word	0x20000000
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000544:	2000042c 	.word	0x2000042c
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 8000548:	2000042c 	.word	0x2000042c
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91
	ldr	r3, = _ebss
 800054c:	2000046c 	.word	0x2000046c

08000550 <ADC1_2_IRQHandler>:
USBWakeUp_IRQHandler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:115
 * @retval : None
*/
  .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC1_2_IRQHandler>
	...

08000554 <_global_impure_ptr>:
 8000554:	0000 2000 5452 2053 7453 7261 0d74 000a     ... RTS Start...

08000564 <_init>:
_init():
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr

08000570 <_fini>:
_fini():
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr
