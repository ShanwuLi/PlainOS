
out/main.elf:     file format elf32-littlearm
out/main.elf
architecture: armv7, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000559

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000005d8 memsz 0x000005d8 flags rwx
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x080005d8 align 2**16
         filesz 0x00000444 memsz 0x00000584 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .isr_vector       0000010c  08000000  08000000  00010000  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text             000004c0  0800010c  0800010c  0001010c  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes   0000002b  080005cc  080005cc  00020444  2**0  CONTENTS, READONLY
  3 .init_array       00000008  080005cc  080005cc  000105cc  2**2  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array       00000004  080005d4  080005d4  000105d4  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .data             00000444  20000000  080005d8  00020000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              00000040  20000444  08000a1c  00020444  2**2  ALLOC
  7 ._user_heap_stack 00000100  20000484  08000a5c  00020444  2**0  ALLOC
  8 .debug_frame      000002d0  00000000  00000000  00020470  2**2  CONTENTS, READONLY, DEBUGGING
  9 .debug_info       00001267  00000000  00000000  00020740  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev     00000634  00000000  00000000  000219a7  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges    000000a8  00000000  00000000  00021fe0  2**3  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges     00000088  00000000  00000000  00022088  2**3  CONTENTS, READONLY, DEBUGGING
 13 .debug_line       000009cb  00000000  00000000  00022110  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_str        0000081a  00000000  00000000  00022adb  2**0  CONTENTS, READONLY, DEBUGGING
 15 .comment          00000076  00000000  00000000  000232f5  2**0  CONTENTS, READONLY
 16 .debug_loc        0000019d  00000000  00000000  0002336b  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
0800010c l    d  .text	00000000 .text
080005cc l    d  .ARM.attributes	00000000 .ARM.attributes
080005cc l    d  .init_array	00000000 .init_array
080005d4 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000444 l    d  .bss	00000000 .bss
20000484 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 out/./arch/arm/stm32f103c8t6/startup_stm32f10x_md.o
f108f85f l       *ABS*	00000000 BootRAM
08000564 l       .text	00000000 LoopCopyDataInit
0800055c l       .text	00000000 CopyDataInit
08000578 l       .text	00000000 LoopFillZerobss
08000572 l       .text	00000000 FillZerobss
080005a0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800010c l     F .text	00000000 __do_global_dtors_aux
20000444 l       .bss	00000001 completed.8885
080005d4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000130 l     F .text	00000000 frame_dummy
20000448 l       .bss	00000018 object.8890
080005d0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 system_stm32f10x.c
00000000 l    df *ABS*	00000000 stm32f10x_it.c
00000000 l    df *ABS*	00000000 USART.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080003f0 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7-m/nofp/crti.o
00000000 l    df *ABS*	00000000 c:/users/lisha/.eide/tools/gcc_arm/bin/../lib/gcc/arm-none-eabi/8.3.1/thumb/v7-m/nofp/crtn.o
00000000 l    df *ABS*	00000000 
080005d8 l       .fini_array	00000000 __fini_array_end
080005d4 l       .fini_array	00000000 __fini_array_start
080005d4 l       .init_array	00000000 __init_array_end
080005cc l       .ARM.attributes	00000000 __preinit_array_end
080005cc l       .init_array	00000000 __init_array_start
080005cc l       .ARM.attributes	00000000 __preinit_array_start
080005a0  w    F .text	00000002 EXTI2_IRQHandler
080002e4 g     F .text	00000002 DebugMon_Handler
20000460 g     O .bss	00000001 __lock___atexit_recursive_mutex
080005a0  w    F .text	00000002 TIM1_CC_IRQHandler
080002d0 g     F .text	00000002 HardFault_Handler
00000100 g       *ABS*	00000000 _Min_Stack_Size
080005a0  w    F .text	00000002 SysTick_Handler
20000464 g     O .bss	00000001 __lock___arc4random_mutex
080005a0  w    F .text	00000002 PVD_IRQHandler
080005d8 g       .fini_array	00000000 _sidata
080005a0  w    F .text	00000002 PendSV_Handler
080002cc g     F .text	00000002 NMI_Handler
080005cc g       .text	00000000 __exidx_end
080005a0  w    F .text	00000002 EXTI3_IRQHandler
20000440 g     O .data	00000004 __atexit_recursive_mutex
080005cc g       .text	00000000 _etext
20000444 g       .bss	00000000 _sbss
080005a0  w    F .text	00000002 EXTI0_IRQHandler
080005a0  w    F .text	00000002 I2C2_EV_IRQHandler
20000010 g     O .data	00000004 SystemCoreClock
080002dc g     F .text	00000002 UsageFault_Handler
080005a0  w    F .text	00000002 ADC1_2_IRQHandler
20000444 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
080005a0  w    F .text	00000002 SPI1_IRQHandler
080005a0  w    F .text	00000002 TAMPER_IRQHandler
080005cc g       .text	00000000 __exidx_start
20000468 g     O .bss	00000001 __lock___env_recursive_mutex
2000046c g     O .bss	00000001 __lock___sinit_recursive_mutex
080005a4 g     O .text	00000004 _global_impure_ptr
080003a8 g     F .text	00000048 __libc_init_array
080005a0  w    F .text	00000002 DMA1_Channel4_IRQHandler
080005b4 g     F .text	00000000 _init
08000388 g     F .text	00000020 USART1_PrintString
080005a0  w    F .text	00000002 USART3_IRQHandler
08000410 g     F .text	00000034 __libc_fini_array
080005a0  w    F .text	00000002 RTC_IRQHandler
20000484 g       .bss	00000000 _ebss
080005a0  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000558  w    F .text	00000034 Reset_Handler
080005a0  w    F .text	00000002 CAN1_RX1_IRQHandler
20000470 g     O .bss	00000001 __lock___malloc_recursive_mutex
080005a0  w    F .text	00000002 TIM4_IRQHandler
080005a0  w    F .text	00000002 I2C1_EV_IRQHandler
08000448 g     F .text	00000002 __retarget_lock_release_recursive
080005a0  w    F .text	00000002 DMA1_Channel6_IRQHandler
20000484 g       .bss	00000000 __bss_end__
080005a0  w    F .text	00000002 TIM3_IRQHandler
080005a0  w    F .text	00000002 RCC_IRQHandler
080002e8 g     F .text	000000a0 USART1_Init
080005a0  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
00000000 g       *ABS*	00000000 _Min_Heap_Size
080005a0  w    F .text	00000002 DMA1_Channel1_IRQHandler
080005a0 g       .text	00000002 Default_Handler
20000000 g     O .data	00000010 AHBPrescTable
080005a0  w    F .text	00000002 EXTI15_10_IRQHandler
0800044c g     F .text	00000084 __register_exitproc
080005a0  w    F .text	00000002 EXTI9_5_IRQHandler
080005a0  w    F .text	00000002 SPI2_IRQHandler
08000444 g     F .text	00000002 __retarget_lock_acquire_recursive
080002d4 g     F .text	00000002 MemManage_Handler
080004d0 g     F .text	00000088 main
080002e0 g     F .text	00000002 SVC_Handler
080005a0  w    F .text	00000002 DMA1_Channel5_IRQHandler
080005a0  w    F .text	00000002 EXTI4_IRQHandler
080005a0  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
0800014c g     F .text	00000120 SystemInit
080005c0 g     F .text	00000000 _fini
080005a0  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08000404 g     F .text	0000000c atexit
080005a0  w    F .text	00000002 DMA1_Channel3_IRQHandler
080005a0  w    F .text	00000002 TIM1_UP_IRQHandler
080005a0  w    F .text	00000002 WWDG_IRQHandler
080005a0  w    F .text	00000002 TIM2_IRQHandler
080005a0  w    F .text	00000002 TIM1_BRK_IRQHandler
20005000 g       *ABS*	00000000 _estack
080005a0  w    F .text	00000002 EXTI1_IRQHandler
20000444 g       .data	00000000 _edata
20000474 g     O .bss	00000001 __lock___at_quick_exit_mutex
080005a0  w    F .text	00000002 RTCAlarm_IRQHandler
080005a0  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800026c g     F .text	00000060 SystemCoreClockUpdate
080005a0  w    F .text	00000002 I2C2_ER_IRQHandler
080005a0  w    F .text	00000002 DMA1_Channel2_IRQHandler
080005a0  w    F .text	00000002 CAN1_SCE_IRQHandler
080005a0  w    F .text	00000002 FLASH_IRQHandler
080002d8 g     F .text	00000002 BusFault_Handler
080005a0  w    F .text	00000002 USART1_IRQHandler
20000478 g     O .bss	00000001 __lock___dd_hash_mutex
2000047c g     O .bss	00000001 __lock___tz_mutex
080005a0  w    F .text	00000002 I2C1_ER_IRQHandler
080005a0  w    F .text	00000002 USBWakeUp_IRQHandler
20000480 g     O .bss	00000001 __lock___sfp_recursive_mutex



Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
__do_global_dtors_aux():
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000444 	.word	0x20000444
 8000128:	00000000 	.word	0x00000000
 800012c:	0800010c 	.word	0x0800010c

08000130 <frame_dummy>:
frame_dummy():
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000448 	.word	0x20000448
 8000148:	0800010c 	.word	0x0800010c

0800014c <SystemInit>:
SystemInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:216
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800014c:	2101      	movs	r1, #1
 800014e:	4b3f      	ldr	r3, [pc, #252]	; (800024c <SystemInit+0x100>)
 8000150:	681a      	ldr	r2, [r3, #0]
 8000152:	430a      	orrs	r2, r1
 8000154:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:220

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000156:	493e      	ldr	r1, [pc, #248]	; (8000250 <SystemInit+0x104>)
 8000158:	685a      	ldr	r2, [r3, #4]
 800015a:	400a      	ands	r2, r1
 800015c:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:226
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800015e:	493d      	ldr	r1, [pc, #244]	; (8000254 <SystemInit+0x108>)
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	400a      	ands	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:229

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000166:	493c      	ldr	r1, [pc, #240]	; (8000258 <SystemInit+0x10c>)
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	400a      	ands	r2, r1
 800016c:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:232

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800016e:	493b      	ldr	r1, [pc, #236]	; (800025c <SystemInit+0x110>)
 8000170:	685a      	ldr	r2, [r3, #4]
 8000172:	400a      	ands	r2, r1
 8000174:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:251

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000176:	229f      	movs	r2, #159	; 0x9f
 8000178:	0412      	lsls	r2, r2, #16
 800017a:	609a      	str	r2, [r3, #8]
SetSysClockTo72():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:989
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800017c:	2200      	movs	r2, #0
SystemInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:213
{
 800017e:	b082      	sub	sp, #8
SetSysClockTo72():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:989
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000180:	9200      	str	r2, [sp, #0]
 8000182:	9201      	str	r2, [sp, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:993
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000184:	2280      	movs	r2, #128	; 0x80
 8000186:	6819      	ldr	r1, [r3, #0]
 8000188:	0252      	lsls	r2, r2, #9
 800018a:	430a      	orrs	r2, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:998
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800018c:	2080      	movs	r0, #128	; 0x80
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800018e:	21a0      	movs	r1, #160	; 0xa0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:993
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000190:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:998
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000192:	0280      	lsls	r0, r0, #10
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000194:	00c9      	lsls	r1, r1, #3
 8000196:	e002      	b.n	800019e <SystemInit+0x52>
 8000198:	9a00      	ldr	r2, [sp, #0]
 800019a:	428a      	cmp	r2, r1
 800019c:	d008      	beq.n	80001b0 <SystemInit+0x64>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:998
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	4002      	ands	r2, r0
 80001a2:	9201      	str	r2, [sp, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:999
    StartUpCounter++;  
 80001a4:	9a00      	ldr	r2, [sp, #0]
 80001a6:	3201      	adds	r2, #1
 80001a8:	9200      	str	r2, [sp, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1000
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80001aa:	9a01      	ldr	r2, [sp, #4]
 80001ac:	2a00      	cmp	r2, #0
 80001ae:	d0f3      	beq.n	8000198 <SystemInit+0x4c>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1002

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80001b0:	2280      	movs	r2, #128	; 0x80
 80001b2:	4b26      	ldr	r3, [pc, #152]	; (800024c <SystemInit+0x100>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	0292      	lsls	r2, r2, #10
 80001b8:	4013      	ands	r3, r2
 80001ba:	d00a      	beq.n	80001d2 <SystemInit+0x86>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1004
  {
    HSEStatus = (uint32_t)0x01;
 80001bc:	2301      	movs	r3, #1
 80001be:	9301      	str	r3, [sp, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1011
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 80001c0:	9b01      	ldr	r3, [sp, #4]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d009      	beq.n	80001da <SystemInit+0x8e>
SystemInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:267
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c6:	2280      	movs	r2, #128	; 0x80
 80001c8:	4b25      	ldr	r3, [pc, #148]	; (8000260 <SystemInit+0x114>)
 80001ca:	0512      	lsls	r2, r2, #20
 80001cc:	609a      	str	r2, [r3, #8]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:269
}
 80001ce:	b002      	add	sp, #8
 80001d0:	4770      	bx	lr
SetSysClockTo72():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1008
    HSEStatus = (uint32_t)0x00;
 80001d2:	9301      	str	r3, [sp, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1011
  if (HSEStatus == (uint32_t)0x01)
 80001d4:	9b01      	ldr	r3, [sp, #4]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d1f5      	bne.n	80001c6 <SystemInit+0x7a>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1014
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80001da:	2110      	movs	r1, #16
 80001dc:	4b21      	ldr	r3, [pc, #132]	; (8000264 <SystemInit+0x118>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	430a      	orrs	r2, r1
 80001e2:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1017

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80001e4:	681a      	ldr	r2, [r3, #0]
 80001e6:	390d      	subs	r1, #13
 80001e8:	438a      	bics	r2, r1
 80001ea:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1018
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	3901      	subs	r1, #1
 80001f0:	430a      	orrs	r2, r1
 80001f2:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1022

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80001f4:	4b15      	ldr	r3, [pc, #84]	; (800024c <SystemInit+0x100>)
 80001f6:	685a      	ldr	r2, [r3, #4]
 80001f8:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1025
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80001fa:	685a      	ldr	r2, [r3, #4]
 80001fc:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1028
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80001fe:	2280      	movs	r2, #128	; 0x80
 8000200:	6859      	ldr	r1, [r3, #4]
 8000202:	00d2      	lsls	r2, r2, #3
 8000204:	430a      	orrs	r2, r1
 8000206:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1054
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000208:	4917      	ldr	r1, [pc, #92]	; (8000268 <SystemInit+0x11c>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	400a      	ands	r2, r1
 800020e:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1056
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000210:	22e8      	movs	r2, #232	; 0xe8
 8000212:	6859      	ldr	r1, [r3, #4]
 8000214:	0352      	lsls	r2, r2, #13
 8000216:	430a      	orrs	r2, r1
 8000218:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1060
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800021a:	2280      	movs	r2, #128	; 0x80
 800021c:	6819      	ldr	r1, [r3, #0]
 800021e:	0452      	lsls	r2, r2, #17
 8000220:	430a      	orrs	r2, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1063

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000222:	2180      	movs	r1, #128	; 0x80
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1060
    RCC->CR |= RCC_CR_PLLON;
 8000224:	601a      	str	r2, [r3, #0]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1063
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000226:	0489      	lsls	r1, r1, #18
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	420a      	tst	r2, r1
 800022c:	d0fc      	beq.n	8000228 <SystemInit+0xdc>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1068
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800022e:	2103      	movs	r1, #3
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	438a      	bics	r2, r1
 8000234:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1069
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	3901      	subs	r1, #1
 800023a:	430a      	orrs	r2, r1
 800023c:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:1072

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800023e:	220c      	movs	r2, #12
 8000240:	4902      	ldr	r1, [pc, #8]	; (800024c <SystemInit+0x100>)
 8000242:	684b      	ldr	r3, [r1, #4]
 8000244:	4013      	ands	r3, r2
 8000246:	2b08      	cmp	r3, #8
 8000248:	d1fb      	bne.n	8000242 <SystemInit+0xf6>
 800024a:	e7bc      	b.n	80001c6 <SystemInit+0x7a>
 800024c:	40021000 	.word	0x40021000
 8000250:	f8ff0000 	.word	0xf8ff0000
 8000254:	fef6ffff 	.word	0xfef6ffff
 8000258:	fffbffff 	.word	0xfffbffff
 800025c:	ff80ffff 	.word	0xff80ffff
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	40022000 	.word	0x40022000
 8000268:	ffc0ffff 	.word	0xffc0ffff

0800026c <SystemCoreClockUpdate>:
SystemCoreClockUpdate():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:319
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800026c:	230c      	movs	r3, #12
 800026e:	4914      	ldr	r1, [pc, #80]	; (80002c0 <SystemCoreClockUpdate+0x54>)
 8000270:	684a      	ldr	r2, [r1, #4]
 8000272:	4013      	ands	r3, r2
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:321
  switch (tmp)
 8000274:	2b08      	cmp	r3, #8
 8000276:	d009      	beq.n	800028c <SystemCoreClockUpdate+0x20>
 8000278:	4a12      	ldr	r2, [pc, #72]	; (80002c4 <SystemCoreClockUpdate+0x58>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:409
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800027a:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <SystemCoreClockUpdate+0x54>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4912      	ldr	r1, [pc, #72]	; (80002c8 <SystemCoreClockUpdate+0x5c>)
 8000280:	061b      	lsls	r3, r3, #24
 8000282:	0f1b      	lsrs	r3, r3, #28
 8000284:	5ccb      	ldrb	r3, [r1, r3]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:411
  SystemCoreClock >>= tmp;  
 8000286:	40da      	lsrs	r2, r3
 8000288:	610a      	str	r2, [r1, #16]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:412
}
 800028a:	4770      	bx	lr
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:332
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800028c:	684b      	ldr	r3, [r1, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:333
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800028e:	6848      	ldr	r0, [r1, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:336
      pllmull = ( pllmull >> 18) + 2;
 8000290:	029b      	lsls	r3, r3, #10
 8000292:	0f1b      	lsrs	r3, r3, #28
 8000294:	1c9a      	adds	r2, r3, #2
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:338
      if (pllsource == 0x00)
 8000296:	03c3      	lsls	r3, r0, #15
 8000298:	d50a      	bpl.n	80002b0 <SystemCoreClockUpdate+0x44>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:351
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800029a:	684b      	ldr	r3, [r1, #4]
 800029c:	039b      	lsls	r3, r3, #14
 800029e:	d407      	bmi.n	80002b0 <SystemCoreClockUpdate+0x44>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:357
          SystemCoreClock = HSE_VALUE * pllmull;
 80002a0:	0153      	lsls	r3, r2, #5
 80002a2:	1a9b      	subs	r3, r3, r2
 80002a4:	0199      	lsls	r1, r3, #6
 80002a6:	1acb      	subs	r3, r1, r3
 80002a8:	00db      	lsls	r3, r3, #3
 80002aa:	189a      	adds	r2, r3, r2
 80002ac:	0252      	lsls	r2, r2, #9
 80002ae:	e7e4      	b.n	800027a <SystemCoreClockUpdate+0xe>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/system_stm32f10x.c:353
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80002b0:	0153      	lsls	r3, r2, #5
 80002b2:	1a9b      	subs	r3, r3, r2
 80002b4:	0199      	lsls	r1, r3, #6
 80002b6:	1acb      	subs	r3, r1, r3
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	189a      	adds	r2, r3, r2
 80002bc:	0212      	lsls	r2, r2, #8
 80002be:	e7dc      	b.n	800027a <SystemCoreClockUpdate+0xe>
 80002c0:	40021000 	.word	0x40021000
 80002c4:	007a1200 	.word	0x007a1200
 80002c8:	20000000 	.word	0x20000000

080002cc <NMI_Handler>:
NMI_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:54
  * @retval None
  */
void NMI_Handler(void)
{
	
}
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <HardFault_Handler>:
HardFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:66 (discriminator 1)
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80002d0:	e7fe      	b.n	80002d0 <HardFault_Handler>
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <MemManage_Handler>:
MemManage_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:79 (discriminator 1)
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80002d4:	e7fe      	b.n	80002d4 <MemManage_Handler>
 80002d6:	46c0      	nop			; (mov r8, r8)

080002d8 <BusFault_Handler>:
BusFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:92 (discriminator 1)
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002d8:	e7fe      	b.n	80002d8 <BusFault_Handler>
 80002da:	46c0      	nop			; (mov r8, r8)

080002dc <UsageFault_Handler>:
UsageFault_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:106 (discriminator 1)
{

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002dc:	e7fe      	b.n	80002dc <UsageFault_Handler>
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <SVC_Handler>:
SVC_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:106 (discriminator 1)
 80002e0:	4770      	bx	lr
 80002e2:	46c0      	nop			; (mov r8, r8)

080002e4 <DebugMon_Handler>:
DebugMon_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/stm32f10x_it.c:106 (discriminator 1)
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <USART1_Init>:
USART1_Init():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:47
#if(USART1_EN==1)
void USART1_Init(void)
{   
   unsigned int integer;                   //����һ���������洢��������
   float   decimal;                        //����һ���������洢С������
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 80002e8:	4b1c      	ldr	r3, [pc, #112]	; (800035c <USART1_Init+0x74>)
 80002ea:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <USART1_Init+0x78>)
 80002ec:	6999      	ldr	r1, [r3, #24]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	619a      	str	r2, [r3, #24]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:48
	 RCC->APB2RSTR|=(1<<14);                 //��λ����USART1
 80002f2:	2280      	movs	r2, #128	; 0x80
 80002f4:	68d9      	ldr	r1, [r3, #12]
 80002f6:	01d2      	lsls	r2, r2, #7
 80002f8:	430a      	orrs	r2, r1
 80002fa:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:49
	 RCC->APB2RSTR&=(~(1<<14));              //ֹͣ��λ
 80002fc:	4919      	ldr	r1, [pc, #100]	; (8000364 <USART1_Init+0x7c>)
 80002fe:	68da      	ldr	r2, [r3, #12]
 8000300:	400a      	ands	r2, r1
 8000302:	60da      	str	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:51
	 
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <USART1_Init+0x80>)
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <USART1_Init+0x84>)
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	400a      	ands	r2, r1
 800030c:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:52
	 GPIOA->CRH|=0X000008B0;                 //����PA10Ϊ�������룬����PA9Ϊ�����������
 800030e:	228b      	movs	r2, #139	; 0x8b
 8000310:	6859      	ldr	r1, [r3, #4]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	430a      	orrs	r2, r1
 8000316:	605a      	str	r2, [r3, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:55
	
	
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 8000318:	2280      	movs	r2, #128	; 0x80
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <USART1_Init+0x88>)
 800031c:	8999      	ldrh	r1, [r3, #12]
 800031e:	0192      	lsls	r2, r2, #6
 8000320:	430a      	orrs	r2, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:56
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 8000322:	2104      	movs	r1, #4
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:55
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 8000324:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:56
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 8000326:	899a      	ldrh	r2, [r3, #12]
 8000328:	430a      	orrs	r2, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:57
	 USART1->CR1|=(1<<5);                    //���ж�
 800032a:	2120      	movs	r1, #32
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:58
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
 800032c:	2008      	movs	r0, #8
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:56
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 800032e:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:57
	 USART1->CR1|=(1<<5);                    //���ж�
 8000330:	899a      	ldrh	r2, [r3, #12]
 8000332:	430a      	orrs	r2, r1
 8000334:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:58
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
 8000336:	899a      	ldrh	r2, [r3, #12]
 8000338:	4302      	orrs	r2, r0
 800033a:	819a      	strh	r2, [r3, #12]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:63
	 
	
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
   decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   //ȡ��С������
   USART1->BRR=(integer<<4)|((unsigned int)decimal*16);  //��ת�����ֵ����BRR�Ĵ���
 800033c:	229c      	movs	r2, #156	; 0x9c
 800033e:	0092      	lsls	r2, r2, #2
 8000340:	811a      	strh	r2, [r3, #8]
__NVIC_SetPriorityGrouping():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1485
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <USART1_Init+0x8c>)
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1486
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000344:	4a0c      	ldr	r2, [pc, #48]	; (8000378 <USART1_Init+0x90>)
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1485
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000346:	68c3      	ldr	r3, [r0, #12]
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1486
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000348:	401a      	ands	r2, r3
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1487
  reg_value  =  (reg_value                                   |
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <USART1_Init+0x94>)
 800034c:	4313      	orrs	r3, r2
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1490
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 800034e:	60c3      	str	r3, [r0, #12]
__NVIC_SetPriority():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1643
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <USART1_Init+0x98>)
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <USART1_Init+0x9c>)
 8000354:	5499      	strb	r1, [r3, r2]
__NVIC_EnableIRQ():
C:\Users\lisha\Desktop\plain-os/./arch/arm/stm32f103c8t6/cmsis/core_cm3.h:1515
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000356:	2220      	movs	r2, #32
 8000358:	605a      	str	r2, [r3, #4]
USART1_Init():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:69
   
   NVIC_SetPriorityGrouping(1);            //�������ȼ�����1
   NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(1,2,1));     //������ռ���ȼ�Ϊ1�������ȼ�Ϊ1
   NVIC_EnableIRQ(USART1_IRQn);            //ʹ��USART�ж�
   
}
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000
 8000360:	00004004 	.word	0x00004004
 8000364:	ffffbfff 	.word	0xffffbfff
 8000368:	40010800 	.word	0x40010800
 800036c:	fffff00f 	.word	0xfffff00f
 8000370:	40013800 	.word	0x40013800
 8000374:	e000ed00 	.word	0xe000ed00
 8000378:	0000f8ff 	.word	0x0000f8ff
 800037c:	05fa0100 	.word	0x05fa0100
 8000380:	00000325 	.word	0x00000325
 8000384:	e000e100 	.word	0xe000e100

08000388 <USART1_PrintString>:
USART1_PrintString():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:77
void USART1_PrintString(const char *String)
{
   const char *p;                            
   p=String;

   while(*p)
 8000388:	7803      	ldrb	r3, [r0, #0]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d009      	beq.n	80003a2 <USART1_PrintString+0x1a>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:80
   {
      USART1->DR=*p;                        
      while(!(USART1->SR&(1<<6)));
 800038e:	2140      	movs	r1, #64	; 0x40
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:79
      USART1->DR=*p;                        
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <USART1_PrintString+0x1c>)
 8000392:	8093      	strh	r3, [r2, #4]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:80 (discriminator 1)
      while(!(USART1->SR&(1<<6)));
 8000394:	8813      	ldrh	r3, [r2, #0]
 8000396:	4219      	tst	r1, r3
 8000398:	d0fc      	beq.n	8000394 <USART1_PrintString+0xc>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:81
      p++;
 800039a:	3001      	adds	r0, #1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:77
   while(*p)
 800039c:	7803      	ldrb	r3, [r0, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f7      	bne.n	8000392 <USART1_PrintString+0xa>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/USART.c:84
    }

}
 80003a2:	4770      	bx	lr
 80003a4:	40013800 	.word	0x40013800

080003a8 <__libc_init_array>:
__libc_init_array():
 80003a8:	b570      	push	{r4, r5, r6, lr}
 80003aa:	4e0d      	ldr	r6, [pc, #52]	; (80003e0 <__libc_init_array+0x38>)
 80003ac:	4d0d      	ldr	r5, [pc, #52]	; (80003e4 <__libc_init_array+0x3c>)
 80003ae:	1b76      	subs	r6, r6, r5
 80003b0:	10b6      	asrs	r6, r6, #2
 80003b2:	d006      	beq.n	80003c2 <__libc_init_array+0x1a>
 80003b4:	2400      	movs	r4, #0
 80003b6:	3401      	adds	r4, #1
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	42a6      	cmp	r6, r4
 80003c0:	d1f9      	bne.n	80003b6 <__libc_init_array+0xe>
 80003c2:	4e09      	ldr	r6, [pc, #36]	; (80003e8 <__libc_init_array+0x40>)
 80003c4:	4d09      	ldr	r5, [pc, #36]	; (80003ec <__libc_init_array+0x44>)
 80003c6:	f000 f8f5 	bl	80005b4 <_init>
 80003ca:	1b76      	subs	r6, r6, r5
 80003cc:	10b6      	asrs	r6, r6, #2
 80003ce:	d006      	beq.n	80003de <__libc_init_array+0x36>
 80003d0:	2400      	movs	r4, #0
 80003d2:	3401      	adds	r4, #1
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d1f9      	bne.n	80003d2 <__libc_init_array+0x2a>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	080005cc 	.word	0x080005cc
 80003e4:	080005cc 	.word	0x080005cc
 80003e8:	080005d4 	.word	0x080005d4
 80003ec:	080005cc 	.word	0x080005cc

080003f0 <register_fini>:
register_fini():
 80003f0:	4b02      	ldr	r3, [pc, #8]	; (80003fc <register_fini+0xc>)
 80003f2:	b113      	cbz	r3, 80003fa <register_fini+0xa>
 80003f4:	4802      	ldr	r0, [pc, #8]	; (8000400 <register_fini+0x10>)
 80003f6:	f000 b805 	b.w	8000404 <atexit>
 80003fa:	4770      	bx	lr
 80003fc:	00000000 	.word	0x00000000
 8000400:	08000411 	.word	0x08000411

08000404 <atexit>:
atexit():
 8000404:	2300      	movs	r3, #0
 8000406:	4601      	mov	r1, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f000 b81e 	b.w	800044c <__register_exitproc>

08000410 <__libc_fini_array>:
__libc_fini_array():
 8000410:	b538      	push	{r3, r4, r5, lr}
 8000412:	4c0a      	ldr	r4, [pc, #40]	; (800043c <__libc_fini_array+0x2c>)
 8000414:	4d0a      	ldr	r5, [pc, #40]	; (8000440 <__libc_fini_array+0x30>)
 8000416:	1b64      	subs	r4, r4, r5
 8000418:	10a4      	asrs	r4, r4, #2
 800041a:	d00a      	beq.n	8000432 <__libc_fini_array+0x22>
 800041c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8000420:	3b01      	subs	r3, #1
 8000422:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000426:	3c01      	subs	r4, #1
 8000428:	f855 3904 	ldr.w	r3, [r5], #-4
 800042c:	4798      	blx	r3
 800042e:	2c00      	cmp	r4, #0
 8000430:	d1f9      	bne.n	8000426 <__libc_fini_array+0x16>
 8000432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000436:	f000 b8c3 	b.w	80005c0 <_fini>
 800043a:	bf00      	nop
 800043c:	080005d8 	.word	0x080005d8
 8000440:	080005d4 	.word	0x080005d4

08000444 <__retarget_lock_acquire_recursive>:
__retarget_lock_acquire_recursive():
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <__retarget_lock_release_recursive>:
__retarget_lock_release_recursive():
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop

0800044c <__register_exitproc>:
__register_exitproc():
 800044c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000450:	4c1d      	ldr	r4, [pc, #116]	; (80004c8 <__register_exitproc+0x7c>)
 8000452:	4605      	mov	r5, r0
 8000454:	6820      	ldr	r0, [r4, #0]
 8000456:	4690      	mov	r8, r2
 8000458:	461f      	mov	r7, r3
 800045a:	460e      	mov	r6, r1
 800045c:	f7ff fff2 	bl	8000444 <__retarget_lock_acquire_recursive>
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <__register_exitproc+0x80>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
 8000468:	b31b      	cbz	r3, 80004b2 <__register_exitproc+0x66>
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	6820      	ldr	r0, [r4, #0]
 800046e:	2a1f      	cmp	r2, #31
 8000470:	dc24      	bgt.n	80004bc <__register_exitproc+0x70>
 8000472:	b94d      	cbnz	r5, 8000488 <__register_exitproc+0x3c>
 8000474:	1c51      	adds	r1, r2, #1
 8000476:	3202      	adds	r2, #2
 8000478:	6059      	str	r1, [r3, #4]
 800047a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800047e:	f7ff ffe3 	bl	8000448 <__retarget_lock_release_recursive>
 8000482:	2000      	movs	r0, #0
 8000484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000488:	2401      	movs	r4, #1
 800048a:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 800048e:	f8cc 8088 	str.w	r8, [ip, #136]	; 0x88
 8000492:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8000496:	4094      	lsls	r4, r2
 8000498:	4321      	orrs	r1, r4
 800049a:	2d02      	cmp	r5, #2
 800049c:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
 80004a0:	f8cc 7108 	str.w	r7, [ip, #264]	; 0x108
 80004a4:	d1e6      	bne.n	8000474 <__register_exitproc+0x28>
 80004a6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 80004aa:	430c      	orrs	r4, r1
 80004ac:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 80004b0:	e7e0      	b.n	8000474 <__register_exitproc+0x28>
 80004b2:	f502 73a6 	add.w	r3, r2, #332	; 0x14c
 80004b6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80004ba:	e7d6      	b.n	800046a <__register_exitproc+0x1e>
 80004bc:	f7ff ffc4 	bl	8000448 <__retarget_lock_release_recursive>
 80004c0:	f04f 30ff 	mov.w	r0, #4294967295
 80004c4:	e7de      	b.n	8000484 <__register_exitproc+0x38>
 80004c6:	bf00      	nop
 80004c8:	20000440 	.word	0x20000440
 80004cc:	080005a4 	.word	0x080005a4

080004d0 <main>:
main():
C:\Users\lisha\Desktop\plain-os/main.c:27
#include "USART.h"

int main()
{
	//开启GPIOB端口时钟
	RCC->APB2ENR |= (1<<4);
 80004d0:	2110      	movs	r1, #16
 80004d2:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <main+0x70>)
 80004d4:	6993      	ldr	r3, [r2, #24]
 80004d6:	430b      	orrs	r3, r1
C:\Users\lisha\Desktop\plain-os/main.c:25
{
 80004d8:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\Users\lisha\Desktop\plain-os/main.c:27
	RCC->APB2ENR |= (1<<4);
 80004da:	6193      	str	r3, [r2, #24]
C:\Users\lisha\Desktop\plain-os/main.c:29
	//清空控制PB0的端口位
	GPIOC->CRH &= ~( 0x0f<< (20));
 80004dc:	4e19      	ldr	r6, [pc, #100]	; (8000544 <main+0x74>)
 80004de:	4a1a      	ldr	r2, [pc, #104]	; (8000548 <main+0x78>)
 80004e0:	6873      	ldr	r3, [r6, #4]
 80004e2:	4013      	ands	r3, r2
 80004e4:	6073      	str	r3, [r6, #4]
C:\Users\lisha\Desktop\plain-os/main.c:31
	//配置PB0为通用推挽输出，速度为10M
	GPIOC->CRH |= (0x03<<20);
 80004e6:	23c0      	movs	r3, #192	; 0xc0
 80004e8:	6872      	ldr	r2, [r6, #4]
 80004ea:	039b      	lsls	r3, r3, #14
 80004ec:	4313      	orrs	r3, r2
 80004ee:	6073      	str	r3, [r6, #4]
C:\Users\lisha\Desktop\plain-os/main.c:33
	//PB0输出低电平
	GPIOC->ODR &= (~(1 << 13));
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <main+0x7c>)
 80004f2:	68f3      	ldr	r3, [r6, #12]
 80004f4:	4013      	ands	r3, r2
C:\Users\lisha\Desktop\plain-os/main.c:25
{
 80004f6:	b083      	sub	sp, #12
C:\Users\lisha\Desktop\plain-os/main.c:33
	GPIOC->ODR &= (~(1 << 13));
 80004f8:	60f3      	str	r3, [r6, #12]
C:\Users\lisha\Desktop\plain-os/main.c:35

	USART1_Init();
 80004fa:	f7ff fef5 	bl	80002e8 <USART1_Init>
C:\Users\lisha\Desktop\plain-os/main.c:36
	USART1_PrintString("RTS Start\r\n");
 80004fe:	4f14      	ldr	r7, [pc, #80]	; (8000550 <main+0x80>)
 8000500:	0038      	movs	r0, r7
 8000502:	f7ff ff41 	bl	8000388 <USART1_PrintString>
delay():
C:\Users\lisha\Desktop\plain-os/main.c:16
    for (i = 0; i < x; i++)
 8000506:	2500      	movs	r5, #0
 8000508:	4c12      	ldr	r4, [pc, #72]	; (8000554 <main+0x84>)
main():
C:\Users\lisha\Desktop\plain-os/main.c:40 (discriminator 1)

	while (1)
	{
		USART1_PrintString("RTS Start\r\n");
 800050a:	0038      	movs	r0, r7
 800050c:	f7ff ff3c 	bl	8000388 <USART1_PrintString>
C:\Users\lisha\Desktop\plain-os/main.c:41 (discriminator 1)
		GPIOC->ODR = ~GPIOC->ODR;
 8000510:	68f3      	ldr	r3, [r6, #12]
 8000512:	43db      	mvns	r3, r3
 8000514:	60f3      	str	r3, [r6, #12]
delay():
C:\Users\lisha\Desktop\plain-os/main.c:16 (discriminator 1)
    for (i = 0; i < x; i++)
 8000516:	9500      	str	r5, [sp, #0]
 8000518:	9b00      	ldr	r3, [sp, #0]
 800051a:	42a3      	cmp	r3, r4
 800051c:	dcf5      	bgt.n	800050a <main+0x3a>
C:\Users\lisha\Desktop\plain-os/main.c:18
        for (j = 0; j < 10; j++)
 800051e:	9501      	str	r5, [sp, #4]
 8000520:	9b01      	ldr	r3, [sp, #4]
 8000522:	2b09      	cmp	r3, #9
 8000524:	dc05      	bgt.n	8000532 <main+0x62>
 8000526:	9b01      	ldr	r3, [sp, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b01      	ldr	r3, [sp, #4]
 800052e:	2b09      	cmp	r3, #9
 8000530:	ddf9      	ble.n	8000526 <main+0x56>
C:\Users\lisha\Desktop\plain-os/main.c:16
    for (i = 0; i < x; i++)
 8000532:	9b00      	ldr	r3, [sp, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	9b00      	ldr	r3, [sp, #0]
 800053a:	42a3      	cmp	r3, r4
 800053c:	ddef      	ble.n	800051e <main+0x4e>
 800053e:	e7e4      	b.n	800050a <main+0x3a>
 8000540:	40021000 	.word	0x40021000
 8000544:	40011000 	.word	0x40011000
 8000548:	ff0fffff 	.word	0xff0fffff
 800054c:	ffffdfff 	.word	0xffffdfff
 8000550:	080005a8 	.word	0x080005a8
 8000554:	000003e7 	.word	0x000003e7

08000558 <Reset_Handler>:
Reset_Handler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:68
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000558:	2100      	movs	r1, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:69
  b	LoopCopyDataInit
 800055a:	e003      	b.n	8000564 <LoopCopyDataInit>

0800055c <CopyDataInit>:
CopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72

CopyDataInit:
	ldr	r3, =_sidata
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <LoopFillZerobss+0x14>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:73
	ldr	r3, [r3, r1]
 800055e:	585b      	ldr	r3, [r3, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:74
	str	r3, [r0, r1]
 8000560:	5043      	str	r3, [r0, r1]
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:75
	adds	r1, r1, #4
 8000562:	3104      	adds	r1, #4

08000564 <LoopCopyDataInit>:
LoopCopyDataInit():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000564:	480a      	ldr	r0, [pc, #40]	; (8000590 <LoopFillZerobss+0x18>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LoopFillZerobss+0x1c>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:80
	adds	r2, r0, r1
 8000568:	1842      	adds	r2, r0, r1
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:81
	cmp	r2, r3
 800056a:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:82
	bcc	CopyDataInit
 800056c:	d3f6      	bcc.n	800055c <CopyDataInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopFillZerobss+0x20>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:84
	b	LoopFillZerobss
 8000570:	e002      	b.n	8000578 <LoopFillZerobss>

08000572 <FillZerobss>:
FillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:87
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000572:	2300      	movs	r3, #0
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:88
	str	r3, [r2], #4
 8000574:	f842 3b04 	str.w	r3, [r2], #4

08000578 <LoopFillZerobss>:
LoopFillZerobss():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91

LoopFillZerobss:
	ldr	r3, = _ebss
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <LoopFillZerobss+0x24>)
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:92
	cmp	r2, r3
 800057a:	429a      	cmp	r2, r3
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:93
	bcc	FillZerobss
 800057c:	d3f9      	bcc.n	8000572 <FillZerobss>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:96

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff fde5 	bl	800014c <SystemInit>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:98
/* Call static constructors */
    bl __libc_init_array
 8000582:	f7ff ff11 	bl	80003a8 <__libc_init_array>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:100
/* Call the application's entry point.*/
	bl	main
 8000586:	f7ff ffa3 	bl	80004d0 <main>
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:101
	bx	lr
 800058a:	4770      	bx	lr
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:72
	ldr	r3, =_sidata
 800058c:	080005d8 	.word	0x080005d8
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:78
	ldr	r0, =_sdata
 8000590:	20000000 	.word	0x20000000
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:79
	ldr	r3, =_edata
 8000594:	20000444 	.word	0x20000444
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:83
	ldr	r2, =_sbss
 8000598:	20000444 	.word	0x20000444
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:91
	ldr	r3, = _ebss
 800059c:	20000484 	.word	0x20000484

080005a0 <ADC1_2_IRQHandler>:
USBWakeUp_IRQHandler():
C:\Users\lisha\Desktop\plain-os/arch/arm/stm32f103c8t6/startup_stm32f10x_md.S:115
 * @retval : None
*/
  .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <_global_impure_ptr>:
 80005a4:	0018 2000 5452 2053 7453 7261 0d74 000a     ... RTS Start...

080005b4 <_init>:
_init():
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
_fini():
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
