
out/stm32f103c8t6.elf:     file format elf32-littlearm


Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800010c 	.word	0x0800010c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800010c 	.word	0x0800010c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2uiz>:
 8000368:	0042      	lsls	r2, r0, #1
 800036a:	d20e      	bcs.n	800038a <__aeabi_f2uiz+0x22>
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000370:	d30b      	bcc.n	800038a <__aeabi_f2uiz+0x22>
 8000372:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d409      	bmi.n	8000390 <__aeabi_f2uiz+0x28>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000384:	fa23 f002 	lsr.w	r0, r3, r2
 8000388:	4770      	bx	lr
 800038a:	f04f 0000 	mov.w	r0, #0
 800038e:	4770      	bx	lr
 8000390:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000394:	d101      	bne.n	800039a <__aeabi_f2uiz+0x32>
 8000396:	0242      	lsls	r2, r0, #9
 8000398:	d102      	bne.n	80003a0 <__aeabi_f2uiz+0x38>
 800039a:	f04f 30ff 	mov.w	r0, #4294967295
 800039e:	4770      	bx	lr
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <__aeabi_uldivmod>:
 80003a8:	b953      	cbnz	r3, 80003c0 <__aeabi_uldivmod+0x18>
 80003aa:	b94a      	cbnz	r2, 80003c0 <__aeabi_uldivmod+0x18>
 80003ac:	2900      	cmp	r1, #0
 80003ae:	bf08      	it	eq
 80003b0:	2800      	cmpeq	r0, #0
 80003b2:	bf1c      	itt	ne
 80003b4:	f04f 31ff 	movne.w	r1, #4294967295
 80003b8:	f04f 30ff 	movne.w	r0, #4294967295
 80003bc:	f000 b976 	b.w	80006ac <__aeabi_idiv0>
 80003c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c8:	f000 f806 	bl	80003d8 <__udivmoddi4>
 80003cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d4:	b004      	add	sp, #16
 80003d6:	4770      	bx	lr

080003d8 <__udivmoddi4>:
 80003d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003dc:	9e08      	ldr	r6, [sp, #32]
 80003de:	460d      	mov	r5, r1
 80003e0:	4604      	mov	r4, r0
 80003e2:	4688      	mov	r8, r1
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d14d      	bne.n	8000484 <__udivmoddi4+0xac>
 80003e8:	428a      	cmp	r2, r1
 80003ea:	4694      	mov	ip, r2
 80003ec:	d968      	bls.n	80004c0 <__udivmoddi4+0xe8>
 80003ee:	fab2 f282 	clz	r2, r2
 80003f2:	b152      	cbz	r2, 800040a <__udivmoddi4+0x32>
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	f1c2 0120 	rsb	r1, r2, #32
 80003fc:	fa20 f101 	lsr.w	r1, r0, r1
 8000400:	fa0c fc02 	lsl.w	ip, ip, r2
 8000404:	ea41 0803 	orr.w	r8, r1, r3
 8000408:	4094      	lsls	r4, r2
 800040a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800040e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000412:	fa1f fe8c 	uxth.w	lr, ip
 8000416:	fb01 8817 	mls	r8, r1, r7, r8
 800041a:	fb07 f00e 	mul.w	r0, r7, lr
 800041e:	0c23      	lsrs	r3, r4, #16
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	4298      	cmp	r0, r3
 8000426:	d90a      	bls.n	800043e <__udivmoddi4+0x66>
 8000428:	eb1c 0303 	adds.w	r3, ip, r3
 800042c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000430:	f080 811e 	bcs.w	8000670 <__udivmoddi4+0x298>
 8000434:	4298      	cmp	r0, r3
 8000436:	f240 811b 	bls.w	8000670 <__udivmoddi4+0x298>
 800043a:	3f02      	subs	r7, #2
 800043c:	4463      	add	r3, ip
 800043e:	1a1b      	subs	r3, r3, r0
 8000440:	fbb3 f0f1 	udiv	r0, r3, r1
 8000444:	fb01 3310 	mls	r3, r1, r0, r3
 8000448:	fb00 fe0e 	mul.w	lr, r0, lr
 800044c:	b2a4      	uxth	r4, r4
 800044e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000452:	45a6      	cmp	lr, r4
 8000454:	d90a      	bls.n	800046c <__udivmoddi4+0x94>
 8000456:	eb1c 0404 	adds.w	r4, ip, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8109 	bcs.w	8000674 <__udivmoddi4+0x29c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8106 	bls.w	8000674 <__udivmoddi4+0x29c>
 8000468:	4464      	add	r4, ip
 800046a:	3802      	subs	r0, #2
 800046c:	2100      	movs	r1, #0
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa8>
 8000478:	2300      	movs	r3, #0
 800047a:	40d4      	lsrs	r4, r2
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0xc2>
 8000488:	2e00      	cmp	r6, #0
 800048a:	f000 80ee 	beq.w	800066a <__udivmoddi4+0x292>
 800048e:	2100      	movs	r1, #0
 8000490:	e9c6 0500 	strd	r0, r5, [r6]
 8000494:	4608      	mov	r0, r1
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d14a      	bne.n	8000538 <__udivmoddi4+0x160>
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xd4>
 80004a6:	4282      	cmp	r2, r0
 80004a8:	f200 80fc 	bhi.w	80006a4 <__udivmoddi4+0x2cc>
 80004ac:	1a84      	subs	r4, r0, r2
 80004ae:	eb65 0303 	sbc.w	r3, r5, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	4698      	mov	r8, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d0e2      	beq.n	8000480 <__udivmoddi4+0xa8>
 80004ba:	e9c6 4800 	strd	r4, r8, [r6]
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0xa8>
 80004c0:	b902      	cbnz	r2, 80004c4 <__udivmoddi4+0xec>
 80004c2:	deff      	udf	#255	; 0xff
 80004c4:	fab2 f282 	clz	r2, r2
 80004c8:	2a00      	cmp	r2, #0
 80004ca:	f040 8091 	bne.w	80005f0 <__udivmoddi4+0x218>
 80004ce:	eba1 000c 	sub.w	r0, r1, ip
 80004d2:	2101      	movs	r1, #1
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb0 f3f7 	udiv	r3, r0, r7
 80004e0:	fb07 0013 	mls	r0, r7, r3, r0
 80004e4:	0c25      	lsrs	r5, r4, #16
 80004e6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004ea:	fb0e f003 	mul.w	r0, lr, r3
 80004ee:	42a8      	cmp	r0, r5
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x12c>
 80004f2:	eb1c 0505 	adds.w	r5, ip, r5
 80004f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x12a>
 80004fc:	42a8      	cmp	r0, r5
 80004fe:	f200 80ce 	bhi.w	800069e <__udivmoddi4+0x2c6>
 8000502:	4643      	mov	r3, r8
 8000504:	1a2d      	subs	r5, r5, r0
 8000506:	fbb5 f0f7 	udiv	r0, r5, r7
 800050a:	fb07 5510 	mls	r5, r7, r0, r5
 800050e:	fb0e fe00 	mul.w	lr, lr, r0
 8000512:	b2a4      	uxth	r4, r4
 8000514:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x156>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x154>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80b6 	bhi.w	8000698 <__udivmoddi4+0x2c0>
 800052c:	4628      	mov	r0, r5
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000536:	e79e      	b.n	8000476 <__udivmoddi4+0x9e>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa25 fa07 	lsr.w	sl, r5, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fbba f8f9 	udiv	r8, sl, r9
 8000552:	fa20 f307 	lsr.w	r3, r0, r7
 8000556:	fb09 aa18 	mls	sl, r9, r8, sl
 800055a:	408d      	lsls	r5, r1
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	431d      	orrs	r5, r3
 8000562:	fa00 f301 	lsl.w	r3, r0, r1
 8000566:	fb08 f00e 	mul.w	r0, r8, lr
 800056a:	0c2c      	lsrs	r4, r5, #16
 800056c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000570:	42a0      	cmp	r0, r4
 8000572:	fa02 f201 	lsl.w	r2, r2, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b8>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2bc>
 8000584:	42a0      	cmp	r0, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2bc>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1a24      	subs	r4, r4, r0
 8000592:	fbb4 f0f9 	udiv	r0, r4, r9
 8000596:	fb09 4410 	mls	r4, r9, r0, r4
 800059a:	fb00 fe0e 	mul.w	lr, r0, lr
 800059e:	b2ad      	uxth	r5, r5
 80005a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1e2>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f100 35ff 	add.w	r5, r0, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2b4>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2b4>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005be:	fba0 9502 	umull	r9, r5, r0, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x2a4>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x2a0>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2d0>
 80005d4:	ebb3 0208 	subs.w	r2, r3, r8
 80005d8:	eb64 040e 	sbc.w	r4, r4, lr
 80005dc:	fa22 f301 	lsr.w	r3, r2, r1
 80005e0:	fa04 f707 	lsl.w	r7, r4, r7
 80005e4:	431f      	orrs	r7, r3
 80005e6:	40cc      	lsrs	r4, r1
 80005e8:	e9c6 7400 	strd	r7, r4, [r6]
 80005ec:	2100      	movs	r1, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa8>
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	f1c2 0120 	rsb	r1, r2, #32
 80005f8:	fa25 f301 	lsr.w	r3, r5, r1
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa20 f101 	lsr.w	r1, r0, r1
 8000604:	4095      	lsls	r5, r2
 8000606:	430d      	orrs	r5, r1
 8000608:	fbb3 f1f7 	udiv	r1, r3, r7
 800060c:	fb07 3311 	mls	r3, r7, r1, r3
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	0c28      	lsrs	r0, r5, #16
 8000616:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800061a:	fb01 f30e 	mul.w	r3, r1, lr
 800061e:	4283      	cmp	r3, r0
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x260>
 8000626:	eb1c 0000 	adds.w	r0, ip, r0
 800062a:	f101 38ff 	add.w	r8, r1, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b8>
 8000630:	4283      	cmp	r3, r0
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b8>
 8000634:	3902      	subs	r1, #2
 8000636:	4460      	add	r0, ip
 8000638:	1ac0      	subs	r0, r0, r3
 800063a:	fbb0 f3f7 	udiv	r3, r0, r7
 800063e:	fb07 0013 	mls	r0, r7, r3, r0
 8000642:	b2ad      	uxth	r5, r5
 8000644:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000648:	fb03 f00e 	mul.w	r0, r3, lr
 800064c:	42a8      	cmp	r0, r5
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x28a>
 8000650:	eb1c 0505 	adds.w	r5, ip, r5
 8000654:	f103 38ff 	add.w	r8, r3, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2b0>
 800065a:	42a8      	cmp	r0, r5
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2b0>
 800065e:	3b02      	subs	r3, #2
 8000660:	4465      	add	r5, ip
 8000662:	1a28      	subs	r0, r5, r0
 8000664:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0x104>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e707      	b.n	8000480 <__udivmoddi4+0xa8>
 8000670:	462f      	mov	r7, r5
 8000672:	e6e4      	b.n	800043e <__udivmoddi4+0x66>
 8000674:	4618      	mov	r0, r3
 8000676:	e6f9      	b.n	800046c <__udivmoddi4+0x94>
 8000678:	454b      	cmp	r3, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f8>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3801      	subs	r0, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f8>
 8000688:	4643      	mov	r3, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x28a>
 800068c:	4628      	mov	r0, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1e2>
 8000690:	4641      	mov	r1, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x260>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b8>
 8000698:	4464      	add	r4, ip
 800069a:	3802      	subs	r0, #2
 800069c:	e747      	b.n	800052e <__udivmoddi4+0x156>
 800069e:	3b02      	subs	r3, #2
 80006a0:	4465      	add	r5, ip
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x12c>
 80006a4:	4608      	mov	r0, r1
 80006a6:	e706      	b.n	80004b6 <__udivmoddi4+0xde>
 80006a8:	4631      	mov	r1, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa8>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <__libc_init_array>:
 80006b0:	b570      	push	{r4, r5, r6, lr}
 80006b2:	2600      	movs	r6, #0
 80006b4:	4d0c      	ldr	r5, [pc, #48]	; (80006e8 <__libc_init_array+0x38>)
 80006b6:	4c0d      	ldr	r4, [pc, #52]	; (80006ec <__libc_init_array+0x3c>)
 80006b8:	1b64      	subs	r4, r4, r5
 80006ba:	10a4      	asrs	r4, r4, #2
 80006bc:	42a6      	cmp	r6, r4
 80006be:	d109      	bne.n	80006d4 <__libc_init_array+0x24>
 80006c0:	f001 f9aa 	bl	8001a18 <_init>
 80006c4:	2600      	movs	r6, #0
 80006c6:	4d0a      	ldr	r5, [pc, #40]	; (80006f0 <__libc_init_array+0x40>)
 80006c8:	4c0a      	ldr	r4, [pc, #40]	; (80006f4 <__libc_init_array+0x44>)
 80006ca:	1b64      	subs	r4, r4, r5
 80006cc:	10a4      	asrs	r4, r4, #2
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d105      	bne.n	80006de <__libc_init_array+0x2e>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d8:	4798      	blx	r3
 80006da:	3601      	adds	r6, #1
 80006dc:	e7ee      	b.n	80006bc <__libc_init_array+0xc>
 80006de:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e2:	4798      	blx	r3
 80006e4:	3601      	adds	r6, #1
 80006e6:	e7f2      	b.n	80006ce <__libc_init_array+0x1e>
 80006e8:	08001b38 	.word	0x08001b38
 80006ec:	08001b38 	.word	0x08001b38
 80006f0:	08001bd0 	.word	0x08001bd0
 80006f4:	08001bd4 	.word	0x08001bd4

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b410      	push	{r4}
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80006fa:	2000      	movs	r0, #0
  RCC->CIR = 0x009F0000;
 80006fc:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  RCC->CR |= (uint32_t)0x00000001;
 8000700:	4a39      	ldr	r2, [pc, #228]	; (80007e8 <SystemInit+0xf0>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <SystemInit+0xf4>)
  RCC->CR |= (uint32_t)0x00000001;
 8000704:	6811      	ldr	r1, [r2, #0]
{
 8000706:	b083      	sub	sp, #12
  RCC->CR |= (uint32_t)0x00000001;
 8000708:	f041 0101 	orr.w	r1, r1, #1
 800070c:	6011      	str	r1, [r2, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800070e:	6851      	ldr	r1, [r2, #4]
 8000710:	400b      	ands	r3, r1
 8000712:	6053      	str	r3, [r2, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000714:	6813      	ldr	r3, [r2, #0]
 8000716:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800071a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800071e:	6013      	str	r3, [r2, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000726:	6013      	str	r3, [r2, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000728:	6853      	ldr	r3, [r2, #4]
 800072a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800072e:	6053      	str	r3, [r2, #4]
  RCC->CIR = 0x009F0000;
 8000730:	6094      	str	r4, [r2, #8]
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000732:	9000      	str	r0, [sp, #0]
 8000734:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000736:	6813      	ldr	r3, [r2, #0]
 8000738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e003      	b.n	8000748 <SystemInit+0x50>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000740:	9b00      	ldr	r3, [sp, #0]
 8000742:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000746:	d009      	beq.n	800075c <SystemInit+0x64>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000748:	6813      	ldr	r3, [r2, #0]
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8000750:	9b00      	ldr	r3, [sp, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000756:	9b01      	ldr	r3, [sp, #4]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f1      	beq.n	8000740 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemInit+0xf0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000764:	bf18      	it	ne
 8000766:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000768:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800076a:	9b01      	ldr	r3, [sp, #4]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d006      	beq.n	800077e <SystemInit+0x86>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000770:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <SystemInit+0xf8>)
 8000776:	609a      	str	r2, [r3, #8]
}
 8000778:	b003      	add	sp, #12
 800077a:	bc10      	pop	{r4}
 800077c:	4770      	bx	lr
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800077e:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <SystemInit+0xfc>)
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <SystemInit+0xf0>)
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000782:	6811      	ldr	r1, [r2, #0]
 8000784:	f041 0110 	orr.w	r1, r1, #16
 8000788:	6011      	str	r1, [r2, #0]
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800078a:	6811      	ldr	r1, [r2, #0]
 800078c:	f021 0103 	bic.w	r1, r1, #3
 8000790:	6011      	str	r1, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000792:	6811      	ldr	r1, [r2, #0]
 8000794:	f041 0102 	orr.w	r1, r1, #2
 8000798:	6011      	str	r1, [r2, #0]
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007a8:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80007b0:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80007b2:	685a      	ldr	r2, [r3, #4]
 80007b4:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
 80007b8:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80007c0:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	d5fc      	bpl.n	80007c2 <SystemInit+0xca>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007c8:	6859      	ldr	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <SystemInit+0xf0>)
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007cc:	f021 0103 	bic.w	r1, r1, #3
 80007d0:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80007d2:	6859      	ldr	r1, [r3, #4]
 80007d4:	f041 0102 	orr.w	r1, r1, #2
 80007d8:	6059      	str	r1, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007da:	6853      	ldr	r3, [r2, #4]
 80007dc:	f003 030c 	and.w	r3, r3, #12
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	d1fa      	bne.n	80007da <SystemInit+0xe2>
 80007e4:	e7c4      	b.n	8000770 <SystemInit+0x78>
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	f8ff0000 	.word	0xf8ff0000
 80007f0:	e000ed00 	.word	0xe000ed00
 80007f4:	40022000 	.word	0x40022000

080007f8 <NMI_Handler>:
  * @retval None
  */
void NMI_Handler(void)
{
	
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <HardFault_Handler>
 80007fe:	bf00      	nop

08000800 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler>
 8000802:	bf00      	nop

08000804 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000804:	e7fe      	b.n	8000804 <BusFault_Handler>
 8000806:	bf00      	nop

08000808 <UsageFault_Handler>:
  */
void UsageFault_Handler(void)
{

  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000808:	e7fe      	b.n	8000808 <UsageFault_Handler>
 800080a:	bf00      	nop

0800080c <SVC_Handler>:
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <DebugMon_Handler>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <pl_port_putc_init>:
#include <kernel/initcall.h>
#include "early_setup/early_uart.h"
#include "stm32f10x.h"

int pl_port_putc_init(void)
{
 8000814:	b508      	push	{r3, lr}
	NVIC_EnableIRQ(PendSV_IRQn);
	USART1_Init(115200);
 8000816:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800081a:	f000 f843 	bl	80008a4 <USART1_Init>
	USART1_PrintChar(' ');
 800081e:	2020      	movs	r0, #32
 8000820:	f000 f89c 	bl	800095c <USART1_PrintChar>
	return 0;
}
 8000824:	2000      	movs	r0, #0
 8000826:	bd08      	pop	{r3, pc}

08000828 <pl_port_putc>:

int pl_port_putc(char c)
{
	int ret = USART1_PrintChar(c);
 8000828:	f000 b898 	b.w	800095c <USART1_PrintChar>

0800082c <pl_port_mask_interrupts>:
	return ret;
}

void pl_port_mask_interrupts(void)
{
	__asm__ volatile("cpsid	i\n\t");     /*< 关中断 */
 800082c:	b672      	cpsid	i
}
 800082e:	4770      	bx	lr

08000830 <pl_port_unmask_interrupts>:

void pl_port_unmask_interrupts(void)
{
	__asm__ volatile("cpsie	i\n\t");     /*< 开中断 */
 8000830:	b662      	cpsie	i
}
 8000832:	4770      	bx	lr

08000834 <pl_port_systick_init>:

//RTS OS滴答定时器初始化，移植时需要用户自己实现
int pl_port_systick_init(void)
{
 8000834:	b410      	push	{r4}
	/** 填写你的OS滴答定时器初始化代码 **/
	__asm__ volatile("cpsid	i\n\t");     /*< 关中断 */
 8000836:	b672      	cpsid	i
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000838:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800083c:	f640 640f 	movw	r4, #3599	; 0xe0f
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000840:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000844:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000846:	2207      	movs	r2, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <pl_port_systick_init+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	615c      	str	r4, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	611a      	str	r2, [r3, #16]
	SysTick_Config(3600); //900: 12.5us,  1800:25us,   3600:50us,   72000:1ms
	NVIC_EnableIRQ(SysTick_IRQn);
	__asm__ volatile("cpsie	i\n\t");     /*< 开中断 */
 8000854:	b662      	cpsie	i
	return 0;
}
 8000856:	bc10      	pop	{r4}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <SysTick_Handler>:

void SysTick_Handler(void);
void SysTick_Handler(void)
{
	pl_callee_systick_expiration();
 8000860:	f000 be68 	b.w	8001534 <pl_callee_systick_expiration>

08000864 <pl_port_task_stack_init>:
}

void *pl_port_task_stack_init(void *task, void *task_stack,
                               size_t stack_size, void *param)
{
 8000864:	b430      	push	{r4, r5}
	u32_t *stack = (u32_t *)task_stack;

	stack       +=  stack_size / sizeof(u32_t);
	*(--stack)  = (u32_t)(1<<24);  /* XPSR */
	*(--stack)  = (u32_t)task;     /* PC */
	*(--stack)  = (u32_t)0;        /* LR */
 8000866:	2400      	movs	r4, #0
	stack       +=  stack_size / sizeof(u32_t);
 8000868:	f022 0203 	bic.w	r2, r2, #3
 800086c:	4411      	add	r1, r2
	*(--stack)  = (u32_t)task;     /* PC */
 800086e:	e941 4003 	strd	r4, r0, [r1, #-12]
	*(--stack)  = (u32_t)(1<<24);  /* XPSR */
 8000872:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*(--stack)  = (u32_t)0;        /* R6 */
	*(--stack)  = (u32_t)0;        /* R7 */
	*(--stack)  = (u32_t)0;        /* R8 */
	*(--stack)  = (u32_t)0;        /* R9 */
	*(--stack)  = (u32_t)0;        /* R10 */
	*(--stack)  = (u32_t)0;        /* R11 */
 8000876:	4608      	mov	r0, r1
	*(--stack)  = (u32_t)0;        /* R3 */
 8000878:	e941 4405 	strd	r4, r4, [r1, #-20]
	*(--stack)  = (u32_t)0;        /* R1 */
 800087c:	e941 4407 	strd	r4, r4, [r1, #-28]
	*(--stack)  = (u32_t)0;        /* R4 */
 8000880:	e941 4309 	strd	r4, r3, [r1, #-36]	; 0x24
	*(--stack)  = (u32_t)0;        /* R6 */
 8000884:	e941 440b 	strd	r4, r4, [r1, #-44]	; 0x2c
	*(--stack)  = (u32_t)0;        /* R8 */
 8000888:	e941 440d 	strd	r4, r4, [r1, #-52]	; 0x34
	*(--stack)  = (u32_t)0;        /* R10 */
 800088c:	e941 440f 	strd	r4, r4, [r1, #-60]	; 0x3c
	*(--stack)  = (u32_t)(1<<24);  /* XPSR */
 8000890:	f841 5c04 	str.w	r5, [r1, #-4]
	*(--stack)  = (u32_t)0;        /* R11 */
 8000894:	f840 4d40 	str.w	r4, [r0, #-64]!
	return stack;
}
 8000898:	bc30      	pop	{r4, r5}
 800089a:	4770      	bx	lr

0800089c <pl_port_rodata_read8>:

u8_t pl_port_rodata_read8(void *addr)
{
	return *(u8_t *)(addr);
}
 800089c:	7800      	ldrb	r0, [r0, #0]
 800089e:	4770      	bx	lr

080008a0 <pl_port_rodata_read>:
}

uintptr_t pl_port_rodata_read(void *addr)
{
	return *(uintptr_t *)(addr);
 80008a0:	6800      	ldr	r0, [r0, #0]
 80008a2:	4770      	bx	lr

080008a4 <USART1_Init>:
#include <errno.h>
#include <types.h>
#include "early_uart.h"

void USART1_Init(uint_t USART1_BaudRate)
{
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   unsigned int integer;                   //����һ���������洢��������
   float   decimal;                        //����һ���������洢С������
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <USART1_Init+0x9c>)
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
	 USART1->CR1|=(1<<5);                    //���ж�
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
	 
	
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
 80008a8:	4c26      	ldr	r4, [pc, #152]	; (8000944 <USART1_Init+0xa0>)
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 80008aa:	699a      	ldr	r2, [r3, #24]
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
 80008ac:	0100      	lsls	r0, r0, #4
   RCC->APB2ENR|=(1<<14)|(1<<2);           //����USART1ʱ�Ӻ�GPIOAʱ��
 80008ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008b2:	f042 0204 	orr.w	r2, r2, #4
 80008b6:	619a      	str	r2, [r3, #24]
	 RCC->APB2RSTR|=(1<<14);                 //��λ����USART1
 80008b8:	68da      	ldr	r2, [r3, #12]
   integer=72*1000*1000/(USART1_BaudRate*16);         //ȡ����������
 80008ba:	fbb4 f4f0 	udiv	r4, r4, r0
	 RCC->APB2RSTR|=(1<<14);                 //��λ����USART1
 80008be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008c2:	60da      	str	r2, [r3, #12]
	 RCC->APB2RSTR&=(~(1<<14));              //ֹͣ��λ
 80008c4:	68da      	ldr	r2, [r3, #12]
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 80008c6:	4920      	ldr	r1, [pc, #128]	; (8000948 <USART1_Init+0xa4>)
	 RCC->APB2RSTR&=(~(1<<14));              //ֹͣ��λ
 80008c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80008cc:	60da      	str	r2, [r3, #12]
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 80008ce:	684b      	ldr	r3, [r1, #4]
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 80008d0:	4d1e      	ldr	r5, [pc, #120]	; (800094c <USART1_Init+0xa8>)
	 GPIOA->CRH&=0XFFFFF00F;                 //���֮ǰ����PA10��PA9
 80008d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80008d6:	604b      	str	r3, [r1, #4]
	 GPIOA->CRH|=0X000008B0;                 //����PA10Ϊ�������룬����PA9Ϊ�����������
 80008d8:	684b      	ldr	r3, [r1, #4]
   decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   //ȡ��С������
 80008da:	4620      	mov	r0, r4
	 GPIOA->CRH|=0X000008B0;                 //����PA10Ϊ�������룬����PA9Ϊ�����������
 80008dc:	f443 630b 	orr.w	r3, r3, #2224	; 0x8b0
 80008e0:	604b      	str	r3, [r1, #4]
   USART1->CR1|=(1<<13);                   //ʹ��USARTģ��
 80008e2:	89ab      	ldrh	r3, [r5, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	2620      	movs	r6, #32
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ec:	81ab      	strh	r3, [r5, #12]
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 80008ee:	89ab      	ldrh	r3, [r5, #12]
   USART1->BRR=(integer<<4)|((unsigned int)decimal*16);  //��ת�����ֵ����BRR�Ĵ���
 80008f0:	0124      	lsls	r4, r4, #4
   USART1->CR1|=(1<<2);                    //ʹ�ܽ���
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	81ab      	strh	r3, [r5, #12]
	 USART1->CR1|=(1<<5);                    //���ж�
 80008fa:	89ab      	ldrh	r3, [r5, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4f14      	ldr	r7, [pc, #80]	; (8000950 <USART1_Init+0xac>)
 80008fe:	b29b      	uxth	r3, r3
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	81ab      	strh	r3, [r5, #12]
   USART1->CR1|=(1<<3);                    //ʹ�ܷ���	
 8000906:	89ab      	ldrh	r3, [r5, #12]
 8000908:	b29b      	uxth	r3, r3
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	81ab      	strh	r3, [r5, #12]
   decimal=(float)(72*1000*1000/(USART1_BaudRate*16))-integer;   //ȡ��С������
 8000910:	f7ff fcd2 	bl	80002b8 <__aeabi_ui2f>
 8000914:	4601      	mov	r1, r0
 8000916:	f7ff fc1d 	bl	8000154 <__aeabi_fsub>
   USART1->BRR=(integer<<4)|((unsigned int)decimal*16);  //��ת�����ֵ����BRR�Ĵ���
 800091a:	f7ff fd25 	bl	8000368 <__aeabi_f2uiz>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8000922:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
 8000926:	b2a4      	uxth	r4, r4
 8000928:	812c      	strh	r4, [r5, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800092a:	68fa      	ldr	r2, [r7, #12]
  reg_value  =  (reg_value                                   |
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <USART1_Init+0xb0>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092e:	490a      	ldr	r1, [pc, #40]	; (8000958 <USART1_Init+0xb4>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000930:	ea02 020c 	and.w	r2, r2, ip
  reg_value  =  (reg_value                                   |
 8000934:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8000936:	60fb      	str	r3, [r7, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	f881 6325 	strb.w	r6, [r1, #805]	; 0x325
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093c:	604e      	str	r6, [r1, #4]
   
   NVIC_SetPriorityGrouping(1);            //�������ȼ�����1
   NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(1,2,1));     //������ռ���ȼ�Ϊ1�������ȼ�Ϊ1
   NVIC_EnableIRQ(USART1_IRQn);            //ʹ��USART�ж�
}
 800093e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	044aa200 	.word	0x044aa200
 8000948:	40010800 	.word	0x40010800
 800094c:	40013800 	.word	0x40013800
 8000950:	e000ed00 	.word	0xe000ed00
 8000954:	05fa0100 	.word	0x05fa0100
 8000958:	e000e100 	.word	0xe000e100

0800095c <USART1_PrintChar>:

int USART1_PrintChar(char c)
{
	uint_t times = 0;
	USART1->DR = c;
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <USART1_PrintChar+0x1c>)
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <USART1_PrintChar+0x20>)
 8000960:	8088      	strh	r0, [r1, #4]

	for (times = 0; times < 120000; times++)
 8000962:	e001      	b.n	8000968 <USART1_PrintChar+0xc>
 8000964:	3b01      	subs	r3, #1
 8000966:	d004      	beq.n	8000972 <USART1_PrintChar+0x16>
		if(USART1->SR & (1 << 6))
 8000968:	880a      	ldrh	r2, [r1, #0]
 800096a:	0652      	lsls	r2, r2, #25
 800096c:	d5fa      	bpl.n	8000964 <USART1_PrintChar+0x8>
			return 0;
 800096e:	2000      	movs	r0, #0

	return -ETIMEOUT;
 8000970:	4770      	bx	lr
	return -ETIMEOUT;
 8000972:	f06f 0023 	mvn.w	r0, #35	; 0x23
 8000976:	4770      	bx	lr
 8000978:	40013800 	.word	0x40013800
 800097c:	0001d4c0 	.word	0x0001d4c0

08000980 <pl_align_address>:
 *   Aligned address.
 ************************************************************************************/
void* pl_align_address(void* addr, uchar_t align)
{
	size_t align_mask = (size_t)align - 1;
	return (void*)(((uintptr_t)addr + align_mask) & (~align_mask));
 8000980:	3801      	subs	r0, #1
 8000982:	4408      	add	r0, r1
 8000984:	4249      	negs	r1, r1
}
 8000986:	4008      	ands	r0, r1
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <pl_align_size>:
 *   Aligned size.
 ************************************************************************************/
size_t pl_align_size(size_t size, uchar_t align)
{
	size_t align_mask = (size_t)align - 1;
	return (size + align_mask) & (~align_mask);
 800098c:	3801      	subs	r0, #1
 800098e:	4408      	add	r0, r1
 8000990:	4249      	negs	r1, r1
}
 8000992:	4008      	ands	r0, r1
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <pl_enter_critical>:
 *
 * Return:
 *   void.
 ************************************************************************************/
void pl_enter_critical(void)
{
 8000998:	b508      	push	{r3, lr}
	pl_port_mask_interrupts();
 800099a:	f7ff ff47 	bl	800082c <pl_port_mask_interrupts>
	++pl_critical_ref;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <pl_enter_critical+0x18>)
 80009a0:	6813      	ldr	r3, [r2, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	6013      	str	r3, [r2, #0]
	pl_port_cpu_isb();
}
 80009a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pl_port_cpu_isb();
 80009aa:	f000 bf95 	b.w	80018d8 <pl_port_cpu_isb>
 80009ae:	bf00      	nop
 80009b0:	2000004c 	.word	0x2000004c

080009b4 <pl_exit_critical>:
 *
 * Return:
 *   void.
 ************************************************************************************/
void pl_exit_critical(void)
{
 80009b4:	b508      	push	{r3, lr}
	--pl_critical_ref;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <pl_exit_critical+0x24>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	3a01      	subs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
	if (pl_critical_ref == 0)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	b11b      	cbz	r3, 80009ca <pl_exit_critical+0x16>
		pl_port_unmask_interrupts();
	pl_port_cpu_isb();
}
 80009c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pl_port_cpu_isb();
 80009c6:	f000 bf87 	b.w	80018d8 <pl_port_cpu_isb>
		pl_port_unmask_interrupts();
 80009ca:	f7ff ff31 	bl	8000830 <pl_port_unmask_interrupts>
}
 80009ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	pl_port_cpu_isb();
 80009d2:	f000 bf81 	b.w	80018d8 <pl_port_cpu_isb>
 80009d6:	bf00      	nop
 80009d8:	2000004c 	.word	0x2000004c

080009dc <pl_callee_entry>:
#include "syslog.h"
#include "task.h"
#include "idletask.h"

void pl_callee_entry(void)
{
 80009dc:	b508      	push	{r3, lr}
	int ret;
	pl_syslog_init();
 80009de:	f000 fb5d 	bl	800109c <pl_syslog_init>
	ret = pl_port_putc_init();
 80009e2:	f7ff ff17 	bl	8000814 <pl_port_putc_init>
	if (ret < 0)
 80009e6:	2800      	cmp	r0, #0
 80009e8:	da00      	bge.n	80009ec <pl_callee_entry+0x10>
		while(1);
 80009ea:	e7fe      	b.n	80009ea <pl_callee_entry+0xe>

	pl_default_mempool_init();
 80009ec:	f000 fa08 	bl	8000e00 <pl_default_mempool_init>
	pl_task_core_init();
 80009f0:	f000 fda2 	bl	8001538 <pl_task_core_init>
	pl_idle_task_init();
 80009f4:	f000 f824 	bl	8000a40 <pl_idle_task_init>
	while(1);
 80009f8:	e7fe      	b.n	80009f8 <pl_callee_entry+0x1c>
 80009fa:	bf00      	nop

080009fc <idle_task>:
/*************************************************************************************
 * Function Name: idle_task
 * Description: idle task for system.
 ************************************************************************************/
static int idle_task(int argc, char *argv[])
{
 80009fc:	b500      	push	{lr}
 80009fe:	b083      	sub	sp, #12
	USED(argc);
	USED(argv);
	pl_do_early_initcalls();
 8000a00:	f000 f832 	bl	8000a68 <pl_do_early_initcalls>
	pl_softtimer_core_init();
	pl_do_initcalls();

	while(1) {
		pl_early_syslog("idletask===============================================\r\n");
		for (volatile int i = 0; i < 10000; i++);
 8000a04:	2600      	movs	r6, #0
	pl_port_systick_init();
 8000a06:	f7ff ff15 	bl	8000834 <pl_port_systick_init>
	pl_softtimer_core_init();
 8000a0a:	f000 fe5f 	bl	80016cc <pl_softtimer_core_init>
	pl_do_initcalls();
 8000a0e:	f000 f84d 	bl	8000aac <pl_do_initcalls>
		pl_early_syslog("idletask===============================================\r\n");
 8000a12:	4d09      	ldr	r5, [pc, #36]	; (8000a38 <idle_task+0x3c>)
 8000a14:	4c09      	ldr	r4, [pc, #36]	; (8000a3c <idle_task+0x40>)
 8000a16:	4629      	mov	r1, r5
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f000 fb31 	bl	8001080 <pl_put_early_format_log>
		for (volatile int i = 0; i < 10000; i++);
 8000a1e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a22:	9601      	str	r6, [sp, #4]
 8000a24:	9b01      	ldr	r3, [sp, #4]
 8000a26:	4293      	cmp	r3, r2
 8000a28:	dcf5      	bgt.n	8000a16 <idle_task+0x1a>
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	9b01      	ldr	r3, [sp, #4]
 8000a32:	4293      	cmp	r3, r2
 8000a34:	ddf9      	ble.n	8000a2a <idle_task+0x2e>
 8000a36:	e7ee      	b.n	8000a16 <idle_task+0x1a>
 8000a38:	080018e0 	.word	0x080018e0
 8000a3c:	08000829 	.word	0x08000829

08000a40 <pl_idle_task_init>:
 *   none.
 * Return:
 *   Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_idle_task_init(void)
{
 8000a40:	b510      	push	{r4, lr}
	pl_task_create("idle_task", idle_task, PL_CFG_TASK_PRIORITIES_MAX,
 8000a42:	2400      	movs	r4, #0
{
 8000a44:	b082      	sub	sp, #8
	pl_task_create("idle_task", idle_task, PL_CFG_TASK_PRIORITIES_MAX,
 8000a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a4a:	2263      	movs	r2, #99	; 0x63
 8000a4c:	e9cd 4400 	strd	r4, r4, [sp]
 8000a50:	4903      	ldr	r1, [pc, #12]	; (8000a60 <pl_idle_task_init+0x20>)
 8000a52:	4804      	ldr	r0, [pc, #16]	; (8000a64 <pl_idle_task_init+0x24>)
 8000a54:	f000 fcb6 	bl	80013c4 <pl_task_create>
	                PL_CFG_IDLE_TASK_STACK_SIZE, 0, NULL);
	return 0;
}
 8000a58:	4620      	mov	r0, r4
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd10      	pop	{r4, pc}
 8000a5e:	bf00      	nop
 8000a60:	080009fd 	.word	0x080009fd
 8000a64:	0800191c 	.word	0x0800191c

08000a68 <pl_do_early_initcalls>:
 *
 * Return:
 *   none.
 ************************************************************************************/
void pl_do_early_initcalls(void)
{
 8000a68:	b538      	push	{r3, r4, r5, lr}
	int ret;
	initcall_t *init_fn;
	initcall_t init_f;

	for (init_fn = __early_initcall_start; init_fn < __early_initcall_end;
 8000a6a:	4c0b      	ldr	r4, [pc, #44]	; (8000a98 <pl_do_early_initcalls+0x30>)
 8000a6c:	4d0b      	ldr	r5, [pc, #44]	; (8000a9c <pl_do_early_initcalls+0x34>)
 8000a6e:	e007      	b.n	8000a80 <pl_do_early_initcalls+0x18>
	     init_fn++) {
		init_f = (initcall_t)pl_port_rodata_read(init_fn);
 8000a70:	4620      	mov	r0, r4
 8000a72:	f7ff ff15 	bl	80008a0 <pl_port_rodata_read>
		ret = init_f();
 8000a76:	4780      	blx	r0
		pl_assert(ret >= 0);
 8000a78:	2800      	cmp	r0, #0
	     init_fn++) {
 8000a7a:	f104 0404 	add.w	r4, r4, #4
		pl_assert(ret >= 0);
 8000a7e:	db02      	blt.n	8000a86 <pl_do_early_initcalls+0x1e>
	for (init_fn = __early_initcall_start; init_fn < __early_initcall_end;
 8000a80:	42ac      	cmp	r4, r5
 8000a82:	d3f5      	bcc.n	8000a70 <pl_do_early_initcalls+0x8>
	}
}
 8000a84:	bd38      	pop	{r3, r4, r5, pc}
		pl_assert(ret >= 0);
 8000a86:	f7ff ff87 	bl	8000998 <pl_enter_critical>
 8000a8a:	236e      	movs	r3, #110	; 0x6e
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <pl_do_early_initcalls+0x38>)
 8000a8e:	4905      	ldr	r1, [pc, #20]	; (8000aa4 <pl_do_early_initcalls+0x3c>)
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <pl_do_early_initcalls+0x40>)
 8000a92:	f000 faf5 	bl	8001080 <pl_put_early_format_log>
 8000a96:	e7fe      	b.n	8000a96 <pl_do_early_initcalls+0x2e>
 8000a98:	08001b38 	.word	0x08001b38
 8000a9c:	08001b38 	.word	0x08001b38
 8000aa0:	0800195c 	.word	0x0800195c
 8000aa4:	08001928 	.word	0x08001928
 8000aa8:	08000829 	.word	0x08000829

08000aac <pl_do_initcalls>:
 *
 * Return:
 *   none.
 ************************************************************************************/
void pl_do_initcalls(void)
{
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	4e0f      	ldr	r6, [pc, #60]	; (8000aec <pl_do_initcalls+0x40>)
 8000ab0:	f106 0728 	add.w	r7, r6, #40	; 0x28
	int ret;
	initcall_t **init_fns;

	for (init_fns = &initcall_levels[0]; init_fns < &initcall_levels[10];
	     init_fns++) {
		ret = call_initcall_level(*init_fns, *(init_fns + 1));
 8000ab4:	6834      	ldr	r4, [r6, #0]
 8000ab6:	f856 5f04 	ldr.w	r5, [r6, #4]!
	for (init_fn = init_fns_start; init_fn < init_fns_end; init_fn++) {
 8000aba:	42ac      	cmp	r4, r5
 8000abc:	d302      	bcc.n	8000ac4 <pl_do_initcalls+0x18>
 8000abe:	e012      	b.n	8000ae6 <pl_do_initcalls+0x3a>
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	d910      	bls.n	8000ae6 <pl_do_initcalls+0x3a>
		init_f = (initcall_t)pl_port_rodata_read(init_fn);
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f7ff feeb 	bl	80008a0 <pl_port_rodata_read>
		ret = init_f();
 8000aca:	4780      	blx	r0
		if (ret < 0)
 8000acc:	2800      	cmp	r0, #0
	for (init_fn = init_fns_start; init_fn < init_fns_end; init_fn++) {
 8000ace:	f104 0404 	add.w	r4, r4, #4
		if (ret < 0)
 8000ad2:	daf5      	bge.n	8000ac0 <pl_do_initcalls+0x14>
		pl_assert(ret >= 0);
 8000ad4:	f7ff ff60 	bl	8000998 <pl_enter_critical>
 8000ad8:	2386      	movs	r3, #134	; 0x86
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <pl_do_initcalls+0x44>)
 8000adc:	4905      	ldr	r1, [pc, #20]	; (8000af4 <pl_do_initcalls+0x48>)
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <pl_do_initcalls+0x4c>)
 8000ae0:	f000 face 	bl	8001080 <pl_put_early_format_log>
 8000ae4:	e7fe      	b.n	8000ae4 <pl_do_initcalls+0x38>
	for (init_fns = &initcall_levels[0]; init_fns < &initcall_levels[10];
 8000ae6:	42b7      	cmp	r7, r6
 8000ae8:	d1e4      	bne.n	8000ab4 <pl_do_initcalls+0x8>
	}
}
 8000aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aec:	20000004 	.word	0x20000004
 8000af0:	0800194c 	.word	0x0800194c
 8000af4:	08001928 	.word	0x08001928
 8000af8:	08000829 	.word	0x08000829

08000afc <list_init>:
 *   void
 ************************************************************************************/
void list_init(struct list_node *node)
{
	node->next = node;
	node->prev = node;
 8000afc:	e9c0 0000 	strd	r0, r0, [r0]
}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <list_add_node_at_tail>:
 * Return:
 *   void
 ************************************************************************************/
void list_add_node_at_tail(struct list_node *head, struct list_node *node)
{
	struct list_node *tail = head->prev;
 8000b04:	6803      	ldr	r3, [r0, #0]

	node->prev = tail;
 8000b06:	e9c1 3000 	strd	r3, r0, [r1]
	node->next = head;
	tail->next = node;
 8000b0a:	6059      	str	r1, [r3, #4]
	head->prev = node;
 8000b0c:	6001      	str	r1, [r0, #0]
}
 8000b0e:	4770      	bx	lr

08000b10 <list_del_front_node>:
 *   @head: head node of the list.
 * Return:
 *   void
 ************************************************************************************/
struct list_node *list_del_front_node(struct list_node *head)
{
 8000b10:	4603      	mov	r3, r0
	struct list_node *front = head->next;
 8000b12:	6840      	ldr	r0, [r0, #4]

	front->next->prev = head;
 8000b14:	6842      	ldr	r2, [r0, #4]
 8000b16:	6013      	str	r3, [r2, #0]
	head->next = front->next;
 8000b18:	605a      	str	r2, [r3, #4]
	return front;
}
 8000b1a:	4770      	bx	lr

08000b1c <list_del_node>:
 * Return:
 *   void
 ************************************************************************************/
void list_del_node(struct list_node *node)
{
	node->prev->next = node->next;
 8000b1c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000b20:	6053      	str	r3, [r2, #4]
	node->next->prev = node->prev;
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <list_is_empty>:
 * Return:
 *   @bool: is empty.
 ************************************************************************************/
bool list_is_empty(struct list_node *head)
{
	return head->next == head;
 8000b28:	6843      	ldr	r3, [r0, #4]
}
 8000b2a:	1a18      	subs	r0, r3, r0
 8000b2c:	fab0 f080 	clz	r0, r0
 8000b30:	0940      	lsrs	r0, r0, #5
 8000b32:	4770      	bx	lr

08000b34 <update_bit_map>:
 * Return:
 *   void.
 ************************************************************************************/
static void update_bit_map(struct mempool *mp, size_t blk_start_idx,
                           size_t bit_offset, size_t bit_num, bool set_bits)
{
 8000b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b38:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8000b3c:	4680      	mov	r8, r0
	uchar_t max_bits = 0;
	size_t blk_offset = blk_start_idx;

	if (set_bits) {
		bitmap = UINTPTR_T_MAX;
		first_bits = UINTPTR_T_BITS;
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	bf0b      	itete	eq
 8000b42:	462c      	moveq	r4, r5
 8000b44:	2420      	movne	r4, #32
 8000b46:	462e      	moveq	r6, r5
 8000b48:	f04f 36ff 	movne.w	r6, #4294967295
		max_bits = UINTPTR_T_BITS;
	}

	if (bit_num >= UINTPTR_T_BITS) {
 8000b4c:	2b1f      	cmp	r3, #31
{
 8000b4e:	460f      	mov	r7, r1
	if (bit_num >= UINTPTR_T_BITS) {
 8000b50:	d913      	bls.n	8000b7a <update_bit_map+0x46>
		for (i = 0; i < bit_num / UINTPTR_T_BITS; i++) {
 8000b52:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 8000b56:	eb01 1c53 	add.w	ip, r1, r3, lsr #5
			mp->blk_first_bits[blk_offset] = first_bits;
 8000b5a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000b5e:	55cc      	strb	r4, [r1, r7]
			mp->blk_max_bits[blk_offset] = max_bits;
 8000b60:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8000b64:	55cc      	strb	r4, [r1, r7]
			mp->blk_bitmaps[blk_offset] = bitmap;
 8000b66:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8000b6a:	f840 6027 	str.w	r6, [r0, r7, lsl #2]
			++blk_offset;
 8000b6e:	3701      	adds	r7, #1
		for (i = 0; i < bit_num / UINTPTR_T_BITS; i++) {
 8000b70:	4567      	cmp	r7, ip
 8000b72:	d1f2      	bne.n	8000b5a <update_bit_map+0x26>
		}
	}

	/* bit_num -= i * UINTPTR_T_BITS */
	bit_num -= i * UINTPTR_T_BITS;
 8000b74:	eba3 134e 	sub.w	r3, r3, lr, lsl #5
 8000b78:	e000      	b.n	8000b7c <update_bit_map+0x48>
	bitmap = mp->blk_bitmaps[blk_offset];
 8000b7a:	6880      	ldr	r0, [r0, #8]
	bitmap_mask = ((((uintptr_t)1 << bit_num) - 1) << bit_offset);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4099      	lsls	r1, r3
 8000b80:	3901      	subs	r1, #1
	bitmap = mp->blk_bitmaps[blk_offset];
 8000b82:	f850 3027 	ldr.w	r3, [r0, r7, lsl #2]
	bitmap_mask = ((((uintptr_t)1 << bit_num) - 1) << bit_offset);
 8000b86:	4091      	lsls	r1, r2
	bitmap = mp->blk_bitmaps[blk_offset];
 8000b88:	eb00 0087 	add.w	r0, r0, r7, lsl #2
	bitmap = set_bits ? (bitmap | bitmap_mask) : (bitmap & (~bitmap_mask));
 8000b8c:	b365      	cbz	r5, 8000be8 <update_bit_map+0xb4>
 8000b8e:	4319      	orrs	r1, r3
	uchar_t mbits = 0;
 8000b90:	2600      	movs	r6, #0
	mp->blk_bitmaps[blk_offset] = bitmap;
 8000b92:	6001      	str	r1, [r0, #0]
	uchar_t fbits_inc = 1;
 8000b94:	2001      	movs	r0, #1
	uchar_t bits = 0;
 8000b96:	46b4      	mov	ip, r6
	uchar_t fbits = 0;
 8000b98:	46b6      	mov	lr, r6
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000b9a:	4632      	mov	r2, r6
		if (blk_bitmap & ((uintptr_t)1 << i)) {
 8000b9c:	4681      	mov	r9, r0
 8000b9e:	e006      	b.n	8000bae <update_bit_map+0x7a>
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000ba0:	3201      	adds	r2, #1
 8000ba2:	2a20      	cmp	r2, #32
			fbits += fbits_inc;
 8000ba4:	fa5f fe85 	uxtb.w	lr, r5
			++bits;
 8000ba8:	fa5f fc84 	uxtb.w	ip, r4
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000bac:	d010      	beq.n	8000bd0 <update_bit_map+0x9c>
		if (blk_bitmap & ((uintptr_t)1 << i)) {
 8000bae:	fa09 f302 	lsl.w	r3, r9, r2
 8000bb2:	400b      	ands	r3, r1
			fbits += fbits_inc;
 8000bb4:	eb00 050e 	add.w	r5, r0, lr
			++bits;
 8000bb8:	f10c 0401 	add.w	r4, ip, #1
		if (blk_bitmap & ((uintptr_t)1 << i)) {
 8000bbc:	d1f0      	bne.n	8000ba0 <update_bit_map+0x6c>
			mbits = bits > mbits ? bits : mbits;
 8000bbe:	4566      	cmp	r6, ip
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000bc0:	f102 0201 	add.w	r2, r2, #1
			mbits = bits > mbits ? bits : mbits;
 8000bc4:	bf38      	it	cc
 8000bc6:	4666      	movcc	r6, ip
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000bc8:	2a20      	cmp	r2, #32
			fbits_inc = 0;
 8000bca:	469c      	mov	ip, r3
			bits = 0;
 8000bcc:	4618      	mov	r0, r3
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000bce:	d1ee      	bne.n	8000bae <update_bit_map+0x7a>
	mbits = bits > mbits ? bits : mbits;
 8000bd0:	4566      	cmp	r6, ip
 8000bd2:	bf38      	it	cc
 8000bd4:	4666      	movcc	r6, ip
	mp->blk_first_bits[blk_idx] = fbits;
 8000bd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000bda:	f803 e007 	strb.w	lr, [r3, r7]
	mp->blk_max_bits[blk_idx] = mbits;
 8000bde:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000be2:	55de      	strb	r6, [r3, r7]
	/* get rest bit_map */
	update_blk_bits(mp, blk_offset);
}
 8000be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bitmap = set_bits ? (bitmap | bitmap_mask) : (bitmap & (~bitmap_mask));
 8000be8:	ea23 0101 	bic.w	r1, r3, r1
 8000bec:	e7d0      	b.n	8000b90 <update_bit_map+0x5c>
 8000bee:	bf00      	nop

08000bf0 <pl_mempool_init>:
{
 8000bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (pool == NULL)
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d05e      	beq.n	8000cb6 <pl_mempool_init+0xc6>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4699      	mov	r9, r3
	min_pool_size += (size_t)1 << grain_order;
 8000bfc:	f04f 0801 	mov.w	r8, #1
 8000c00:	460d      	mov	r5, r1
	mp = (struct mempool*)pl_align_address(pool, sizeof(uintptr_t));
 8000c02:	2104      	movs	r1, #4
	if ((uintptr_t)pool + pool_size < (uintptr_t)mp + min_pool_size)
 8000c04:	4416      	add	r6, r2
	mp = (struct mempool*)pl_align_address(pool, sizeof(uintptr_t));
 8000c06:	f7ff febb 	bl	8000980 <pl_align_address>
	min_pool_size += (size_t)1 << grain_order;
 8000c0a:	fa08 f809 	lsl.w	r8, r8, r9
 8000c0e:	f108 0332 	add.w	r3, r8, #50	; 0x32
	if ((uintptr_t)pool + pool_size < (uintptr_t)mp + min_pool_size)
 8000c12:	4403      	add	r3, r0
 8000c14:	429e      	cmp	r6, r3
	mp = (struct mempool*)pl_align_address(pool, sizeof(uintptr_t));
 8000c16:	4604      	mov	r4, r0
	if ((uintptr_t)pool + pool_size < (uintptr_t)mp + min_pool_size)
 8000c18:	d34d      	bcc.n	8000cb6 <pl_mempool_init+0xc6>
	blk_size += ((size_t)1 << grain_order) * UINTPTR_T_BITS;
 8000c1a:	2720      	movs	r7, #32
 8000c1c:	fa07 f309 	lsl.w	r3, r7, r9
	blk_num = ((pool_size - gap_size) + blk_size - 1) / blk_size;
 8000c20:	f1a3 0027 	sub.w	r0, r3, #39	; 0x27
 8000c24:	4430      	add	r0, r6
	blk_size += ((size_t)1 << grain_order) * UINTPTR_T_BITS;
 8000c26:	3306      	adds	r3, #6
	blk_num = ((pool_size - gap_size) + blk_size - 1) / blk_size;
 8000c28:	1b00      	subs	r0, r0, r4
	if (blk_num == 0)
 8000c2a:	4283      	cmp	r3, r0
 8000c2c:	d843      	bhi.n	8000cb6 <pl_mempool_init+0xc6>
	blk_num = ((pool_size - gap_size) + blk_size - 1) / blk_size;
 8000c2e:	fbb0 f0f3 	udiv	r0, r0, r3
	mp->id = id;
 8000c32:	8025      	strh	r5, [r4, #0]
	mp->state = 0;
 8000c34:	2500      	movs	r5, #0
	mp->blk_bitmaps = (uintptr_t*)((uchar_t *)mp + sizeof(struct mempool));
 8000c36:	f104 031c 	add.w	r3, r4, #28
 8000c3a:	60a3      	str	r3, [r4, #8]
	mp->blk_first_bits = (uchar_t*)(mp->blk_bitmaps + blk_num);
 8000c3c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000c40:	60e3      	str	r3, [r4, #12]
	mp->blk_max_bits = mp->blk_first_bits + blk_num;
 8000c42:	4403      	add	r3, r0
	mp->blk_num = blk_num;
 8000c44:	6060      	str	r0, [r4, #4]
	mp->data_pool = mp->blk_max_bits + blk_num;
 8000c46:	4418      	add	r0, r3
	mp->blk_max_bits = mp->blk_first_bits + blk_num;
 8000c48:	6123      	str	r3, [r4, #16]
	mp->data_pool = (uchar_t*)pl_align_address(mp->data_pool, sizeof(uintptr_t) << 2);
 8000c4a:	2110      	movs	r1, #16
	mp->grain_order = grain_order;
 8000c4c:	f884 9003 	strb.w	r9, [r4, #3]
	mp->state = 0;
 8000c50:	70a5      	strb	r5, [r4, #2]
	mp->data_pool = mp->blk_max_bits + blk_num;
 8000c52:	61a0      	str	r0, [r4, #24]
	mp->data_pool = (uchar_t*)pl_align_address(mp->data_pool, sizeof(uintptr_t) << 2);
 8000c54:	f7ff fe94 	bl	8000980 <pl_align_address>
	for (i = 0; i < mp->blk_num - 1; i++) {
 8000c58:	6863      	ldr	r3, [r4, #4]
	mp->data_pool_size &= (~(((size_t)1 << grain_order) - 1));
 8000c5a:	f1c8 0800 	rsb	r8, r8, #0
	mp->data_pool_size = pool_size - ((size_t)mp->data_pool - (size_t)mp);
 8000c5e:	1a36      	subs	r6, r6, r0
	mp->data_pool_size &= (~(((size_t)1 << grain_order) - 1));
 8000c60:	ea06 0608 	and.w	r6, r6, r8
	for (i = 0; i < mp->blk_num - 1; i++) {
 8000c64:	2b01      	cmp	r3, #1
	mp->data_pool_size &= (~(((size_t)1 << grain_order) - 1));
 8000c66:	e9c4 6005 	strd	r6, r0, [r4, #20]
	for (i = 0; i < mp->blk_num - 1; i++) {
 8000c6a:	462b      	mov	r3, r5
 8000c6c:	d00e      	beq.n	8000c8c <pl_mempool_init+0x9c>
		mp->blk_bitmaps[i] = UINTPTR_T_MAX;
 8000c6e:	f04f 31ff 	mov.w	r1, #4294967295
		mp->blk_first_bits[i] = UINTPTR_T_BITS;
 8000c72:	68e2      	ldr	r2, [r4, #12]
 8000c74:	54d7      	strb	r7, [r2, r3]
		mp->blk_max_bits[i] = UINTPTR_T_BITS;
 8000c76:	6922      	ldr	r2, [r4, #16]
 8000c78:	54d7      	strb	r7, [r2, r3]
		mp->blk_bitmaps[i] = UINTPTR_T_MAX;
 8000c7a:	68a2      	ldr	r2, [r4, #8]
 8000c7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < mp->blk_num - 1; i++) {
 8000c80:	6862      	ldr	r2, [r4, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	3a01      	subs	r2, #1
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d3f3      	bcc.n	8000c72 <pl_mempool_init+0x82>
		mp->blk_bitmaps[i] = 0;
 8000c8a:	009d      	lsls	r5, r3, #2
	rest_size -= i * ((size_t)1 << mp->grain_order) * UINTPTR_T_BITS;
 8000c8c:	78e1      	ldrb	r1, [r4, #3]
	mp->blk_first_bits[i] = grain_num;
 8000c8e:	68e0      	ldr	r0, [r4, #12]
	rest_size -= i * ((size_t)1 << mp->grain_order) * UINTPTR_T_BITS;
 8000c90:	fa03 f201 	lsl.w	r2, r3, r1
 8000c94:	eba6 1242 	sub.w	r2, r6, r2, lsl #5
	grain_num = (uchar_t)(rest_size >> mp->grain_order);
 8000c98:	40ca      	lsrs	r2, r1
 8000c9a:	b2d2      	uxtb	r2, r2
	mp->blk_first_bits[i] = grain_num;
 8000c9c:	54c2      	strb	r2, [r0, r3]
	mp->blk_max_bits[i] = grain_num;
 8000c9e:	6921      	ldr	r1, [r4, #16]
 8000ca0:	54ca      	strb	r2, [r1, r3]
	if (grain_num == 0) {
 8000ca2:	b162      	cbz	r2, 8000cbe <pl_mempool_init+0xce>
	mp->blk_bitmaps[i] = ((uintptr_t)1 << grain_num) - 1;
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	68a3      	ldr	r3, [r4, #8]
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	3a01      	subs	r2, #1
}
 8000cae:	4620      	mov	r0, r4
	mp->blk_bitmaps[i] = ((uintptr_t)1 << grain_num) - 1;
 8000cb0:	515a      	str	r2, [r3, r5]
}
 8000cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return NULL;
 8000cb6:	2400      	movs	r4, #0
}
 8000cb8:	4620      	mov	r0, r4
 8000cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		mp->blk_bitmaps[i] = 0;
 8000cbe:	68a3      	ldr	r3, [r4, #8]
}
 8000cc0:	4620      	mov	r0, r4
		mp->blk_bitmaps[i] = 0;
 8000cc2:	515a      	str	r2, [r3, r5]
}
 8000cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000cc8 <pl_mempool_malloc>:
 *
 * Return:
 *   address of memory.
 ************************************************************************************/
void* pl_mempool_malloc(pl_mempool_handle_t mempool, size_t size)
{
 8000cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ccc:	4606      	mov	r6, r0
	bool found;
	size_t blk_idx;
	size_t bit_offset;
	struct mempool_data* data_addr;
	struct mempool *mp = (struct mempool *)mempool;
	size_t grain_size = (uintptr_t)1 << mp->grain_order;
 8000cce:	f04f 0801 	mov.w	r8, #1
{
 8000cd2:	460c      	mov	r4, r1
	size_t grain_size = (uintptr_t)1 << mp->grain_order;
 8000cd4:	78f3      	ldrb	r3, [r6, #3]
	size_t alloc_size = size + sizeof(struct mempool_data);
	size_t bit_num = (alloc_size + grain_size - 1) / grain_size;
 8000cd6:	1dca      	adds	r2, r1, #7
	size_t grain_size = (uintptr_t)1 << mp->grain_order;
 8000cd8:	fa08 f503 	lsl.w	r5, r8, r3
	size_t bit_num = (alloc_size + grain_size - 1) / grain_size;
 8000cdc:	4415      	add	r5, r2
 8000cde:	40dd      	lsrs	r5, r3

	/* check mp if is NULL */
	if (mp == NULL)
		return NULL;

	pl_semaplore_take(&pl_default_mempool.sem);
 8000ce0:	4846      	ldr	r0, [pc, #280]	; (8000dfc <pl_mempool_malloc+0x134>)
{
 8000ce2:	b082      	sub	sp, #8
	pl_semaplore_take(&pl_default_mempool.sem);
 8000ce4:	f000 fc84 	bl	80015f0 <pl_semaplore_take>
	/* get block index */
	if (bit_num < UINTPTR_T_BITS)
 8000ce8:	2d1f      	cmp	r5, #31
	for (i = 0; i < mp->blk_num; i++) {
 8000cea:	6877      	ldr	r7, [r6, #4]
	size_t alloc_size = size + sizeof(struct mempool_data);
 8000cec:	f104 0408 	add.w	r4, r4, #8
	if (bit_num < UINTPTR_T_BITS)
 8000cf0:	d966      	bls.n	8000dc0 <pl_mempool_malloc+0xf8>
	for (i = 0; i < mp->blk_num; i++) {
 8000cf2:	2f00      	cmp	r7, #0
 8000cf4:	d078      	beq.n	8000de8 <pl_mempool_malloc+0x120>
 8000cf6:	68b2      	ldr	r2, [r6, #8]
	if (iter < mp->blk_num - 1)
 8000cf8:	4641      	mov	r1, r8
	size_t max_continue_num = 0;
 8000cfa:	f04f 0c00 	mov.w	ip, #0
	if ((((*arg << mp->grain_order) * UINTPTR_T_BITS) |
 8000cfe:	78f0      	ldrb	r0, [r6, #3]
 8000d00:	3a04      	subs	r2, #4
	if (iter < mp->blk_num - 1)
 8000d02:	f107 38ff 	add.w	r8, r7, #4294967295
 8000d06:	e002      	b.n	8000d0e <pl_mempool_malloc+0x46>
	for (i = 0; i < mp->blk_num; i++) {
 8000d08:	42b9      	cmp	r1, r7
 8000d0a:	d26d      	bcs.n	8000de8 <pl_mempool_malloc+0x120>
 8000d0c:	4619      	mov	r1, r3
	if (iter < mp->blk_num - 1)
 8000d0e:	1e4b      	subs	r3, r1, #1
 8000d10:	4598      	cmp	r8, r3
	size_t first_blk_alloc = 0;
 8000d12:	bf94      	ite	ls
 8000d14:	2300      	movls	r3, #0
		mp->blk_first_bits[iter + 1];
 8000d16:	68f3      	ldrhi	r3, [r6, #12]
	*arg = (mp->blk_bitmaps[iter] == UINTPTR_T_MAX) ? *arg + 1 : 0;
 8000d18:	f852 ef04 	ldr.w	lr, [r2, #4]!
		mp->blk_first_bits[iter + 1];
 8000d1c:	bf84      	itt	hi
 8000d1e:	5c5b      	ldrbhi	r3, [r3, r1]
		first_blk_alloc = ((size_t)1 << mp->grain_order) *
 8000d20:	4083      	lslhi	r3, r0
	*arg = (mp->blk_bitmaps[iter] == UINTPTR_T_MAX) ? *arg + 1 : 0;
 8000d22:	f1be 3fff 	cmp.w	lr, #4294967295
 8000d26:	bf03      	ittte	eq
 8000d28:	f10c 0c01 	addeq.w	ip, ip, #1
	if ((((*arg << mp->grain_order) * UINTPTR_T_BITS) |
 8000d2c:	fa0c fe00 	lsleq.w	lr, ip, r0
 8000d30:	ea43 134e 	orreq.w	r3, r3, lr, lsl #5
	*arg = (mp->blk_bitmaps[iter] == UINTPTR_T_MAX) ? *arg + 1 : 0;
 8000d34:	f04f 0c00 	movne.w	ip, #0
	if ((((*arg << mp->grain_order) * UINTPTR_T_BITS) |
 8000d38:	429c      	cmp	r4, r3
	for (i = 0; i < mp->blk_num; i++) {
 8000d3a:	f101 0301 	add.w	r3, r1, #1
	if ((((*arg << mp->grain_order) * UINTPTR_T_BITS) |
 8000d3e:	d8e3      	bhi.n	8000d08 <pl_mempool_malloc+0x40>
			*idx = i - max_continue_num;
 8000d40:	eba1 010c 	sub.w	r1, r1, ip
		found = get_blk_idx(mp, alloc_size, find_bit_condition, &blk_idx);
	else
		found = get_blk_idx(mp, alloc_size, find_blk_condition, &blk_idx);

	/* check block index */
	if (!found || blk_idx >= mp->blk_num) {
 8000d44:	42b9      	cmp	r1, r7
 8000d46:	d24f      	bcs.n	8000de8 <pl_mempool_malloc+0x120>
	if (alloc_size >= (((size_t)1 << grain_order) * UINTPTR_T_BITS))
 8000d48:	2220      	movs	r2, #32
	uintptr_t blk_bitmap = mp->blk_bitmaps[blk_idx];
 8000d4a:	68b3      	ldr	r3, [r6, #8]
	if (alloc_size >= (((size_t)1 << grain_order) * UINTPTR_T_BITS))
 8000d4c:	4082      	lsls	r2, r0
 8000d4e:	4294      	cmp	r4, r2
	uintptr_t blk_bitmap = mp->blk_bitmaps[blk_idx];
 8000d50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	if (alloc_size >= (((size_t)1 << grain_order) * UINTPTR_T_BITS))
 8000d54:	d24f      	bcs.n	8000df6 <pl_mempool_malloc+0x12e>
	size_t max_continue_bits = 0;
 8000d56:	2200      	movs	r2, #0
		max_continue_bits = blk_bitmap & ((uintptr_t)1 << i) ?
 8000d58:	2701      	movs	r7, #1
	for (i = 0; i < UINTPTR_T_BITS; i++) {
 8000d5a:	4696      	mov	lr, r2
 8000d5c:	e004      	b.n	8000d68 <pl_mempool_malloc+0xa0>
 8000d5e:	f10e 0e01 	add.w	lr, lr, #1
 8000d62:	f1be 0f20 	cmp.w	lr, #32
 8000d66:	d00b      	beq.n	8000d80 <pl_mempool_malloc+0xb8>
		max_continue_bits = blk_bitmap & ((uintptr_t)1 << i) ?
 8000d68:	fa07 fc0e 	lsl.w	ip, r7, lr
			max_continue_bits + 1 : 0;
 8000d6c:	ea1c 0c03 	ands.w	ip, ip, r3
 8000d70:	f102 0201 	add.w	r2, r2, #1
		if ((max_continue_bits << grain_order) >= alloc_size)
 8000d74:	bf14      	ite	ne
 8000d76:	fa02 fc00 	lslne.w	ip, r2, r0
			max_continue_bits + 1 : 0;
 8000d7a:	4662      	moveq	r2, ip
		if ((max_continue_bits << grain_order) >= alloc_size)
 8000d7c:	4564      	cmp	r4, ip
 8000d7e:	d8ee      	bhi.n	8000d5e <pl_mempool_malloc+0x96>
	return i + 1 - max_continue_bits;
 8000d80:	f10e 0e01 	add.w	lr, lr, #1
 8000d84:	ebae 0202 	sub.w	r2, lr, r2

	/* get bit offset */
	bit_offset = get_bit_offset(mp, blk_idx, mp->grain_order, alloc_size);
	data_addr = (struct mempool_data*)(mp->data_pool +
		(((blk_idx << mp->grain_order) * UINTPTR_T_BITS) |
			(bit_offset << mp->grain_order)));
 8000d88:	fa02 f300 	lsl.w	r3, r2, r0
	/* set data structure */
	data_addr->bit_idx = (blk_idx * UINTPTR_T_BITS) | bit_offset;
	data_addr->bit_num = bit_num;

	/* update bitmap */
	update_bit_map(mp, blk_idx, bit_offset, bit_num, false);
 8000d8c:	f04f 0c00 	mov.w	ip, #0
	data_addr = (struct mempool_data*)(mp->data_pool +
 8000d90:	69b7      	ldr	r7, [r6, #24]
		(((blk_idx << mp->grain_order) * UINTPTR_T_BITS) |
 8000d92:	fa01 f000 	lsl.w	r0, r1, r0
 8000d96:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	data_addr = (struct mempool_data*)(mp->data_pool +
 8000d9a:	18fc      	adds	r4, r7, r3
	update_bit_map(mp, blk_idx, bit_offset, bit_num, false);
 8000d9c:	4630      	mov	r0, r6
	data_addr->bit_idx = (blk_idx * UINTPTR_T_BITS) | bit_offset;
 8000d9e:	ea42 1641 	orr.w	r6, r2, r1, lsl #5
 8000da2:	50fe      	str	r6, [r7, r3]
	update_bit_map(mp, blk_idx, bit_offset, bit_num, false);
 8000da4:	462b      	mov	r3, r5
	data_addr->bit_num = bit_num;
 8000da6:	6065      	str	r5, [r4, #4]
	update_bit_map(mp, blk_idx, bit_offset, bit_num, false);
 8000da8:	f8cd c000 	str.w	ip, [sp]
 8000dac:	f7ff fec2 	bl	8000b34 <update_bit_map>
	pl_semaplore_give(&pl_default_mempool.sem);
 8000db0:	4812      	ldr	r0, [pc, #72]	; (8000dfc <pl_mempool_malloc+0x134>)
 8000db2:	f000 fc43 	bl	800163c <pl_semaplore_give>

	return (void*)data_addr->data;
 8000db6:	f104 0008 	add.w	r0, r4, #8
}
 8000dba:	b002      	add	sp, #8
 8000dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < mp->blk_num; i++) {
 8000dc0:	b197      	cbz	r7, 8000de8 <pl_mempool_malloc+0x120>
 8000dc2:	6932      	ldr	r2, [r6, #16]
 8000dc4:	f107 3eff 	add.w	lr, r7, #4294967295
	if (mp->blk_max_bits[iter] * ((uintptr_t)1 << mp->grain_order)
 8000dc8:	78f0      	ldrb	r0, [r6, #3]
 8000dca:	4496      	add	lr, r2
 8000dcc:	1e53      	subs	r3, r2, #1
 8000dce:	f1c2 0c01 	rsb	ip, r2, #1
 8000dd2:	e001      	b.n	8000dd8 <pl_mempool_malloc+0x110>
	for (i = 0; i < mp->blk_num; i++) {
 8000dd4:	459e      	cmp	lr, r3
 8000dd6:	d007      	beq.n	8000de8 <pl_mempool_malloc+0x120>
 8000dd8:	eb0c 0103 	add.w	r1, ip, r3
	if (mp->blk_max_bits[iter] * ((uintptr_t)1 << mp->grain_order)
 8000ddc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000de0:	4082      	lsls	r2, r0
 8000de2:	4294      	cmp	r4, r2
 8000de4:	d8f6      	bhi.n	8000dd4 <pl_mempool_malloc+0x10c>
 8000de6:	e7ad      	b.n	8000d44 <pl_mempool_malloc+0x7c>
		pl_semaplore_give(&pl_default_mempool.sem);
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <pl_mempool_malloc+0x134>)
 8000dea:	f000 fc27 	bl	800163c <pl_semaplore_give>
		return NULL;
 8000dee:	2000      	movs	r0, #0
}
 8000df0:	b002      	add	sp, #8
 8000df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df6:	2300      	movs	r3, #0
		return 0;
 8000df8:	461a      	mov	r2, r3
 8000dfa:	e7c7      	b.n	8000d8c <pl_mempool_malloc+0xc4>
 8000dfc:	20000054 	.word	0x20000054

08000e00 <pl_default_mempool_init>:
 *
 * Return:
 *   Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_default_mempool_init(void)
{
 8000e00:	b510      	push	{r4, lr}
	int ret = pl_semaplore_init(&pl_default_mempool.sem, 1);
 8000e02:	2101      	movs	r1, #1
 8000e04:	4812      	ldr	r0, [pc, #72]	; (8000e50 <pl_default_mempool_init+0x50>)
 8000e06:	f000 fbdf 	bl	80015c8 <pl_semaplore_init>
	pl_assert(ret == OK);
 8000e0a:	b148      	cbz	r0, 8000e20 <pl_default_mempool_init+0x20>
 8000e0c:	f7ff fdc4 	bl	8000998 <pl_enter_critical>
 8000e10:	f44f 733c 	mov.w	r3, #752	; 0x2f0
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <pl_default_mempool_init+0x54>)
 8000e16:	4910      	ldr	r1, [pc, #64]	; (8000e58 <pl_default_mempool_init+0x58>)
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <pl_default_mempool_init+0x5c>)
 8000e1a:	f000 f931 	bl	8001080 <pl_put_early_format_log>
 8000e1e:	e7fe      	b.n	8000e1e <pl_default_mempool_init+0x1e>

	g_pl_default_mempool = pl_mempool_init(pl_default_mempool.pool_data,
 8000e20:	2304      	movs	r3, #4
 8000e22:	4601      	mov	r1, r0
 8000e24:	4604      	mov	r4, r0
 8000e26:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <pl_default_mempool_init+0x60>)
 8000e2c:	f7ff fee0 	bl	8000bf0 <pl_mempool_init>
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <pl_default_mempool_init+0x64>)
 8000e32:	6018      	str	r0, [r3, #0]
		0, PL_CFG_DEFAULT_MEMPOOL_SIZE, PL_CFG_DEFAULT_MEMPOOL_GRAIN_ORDER);
	pl_assert(g_pl_default_mempool != NULL);
 8000e34:	b108      	cbz	r0, 8000e3a <pl_default_mempool_init+0x3a>
	return OK;
}
 8000e36:	4620      	mov	r0, r4
 8000e38:	bd10      	pop	{r4, pc}
	pl_assert(g_pl_default_mempool != NULL);
 8000e3a:	f7ff fdad 	bl	8000998 <pl_enter_critical>
 8000e3e:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <pl_default_mempool_init+0x54>)
 8000e44:	4904      	ldr	r1, [pc, #16]	; (8000e58 <pl_default_mempool_init+0x58>)
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <pl_default_mempool_init+0x5c>)
 8000e48:	f000 f91a 	bl	8001080 <pl_put_early_format_log>
 8000e4c:	e7fe      	b.n	8000e4c <pl_default_mempool_init+0x4c>
 8000e4e:	bf00      	nop
 8000e50:	20000054 	.word	0x20000054
 8000e54:	08001974 	.word	0x08001974
 8000e58:	08001928 	.word	0x08001928
 8000e5c:	08000829 	.word	0x08000829
 8000e60:	20000064 	.word	0x20000064
 8000e64:	20000050 	.word	0x20000050

08000e68 <vformat_log>:
 * 
 * Return:
 *   none.
 ************************************************************************************/
static void vformat_log(int (*putc)(const char c), const char *fmt, va_list valist)
{
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	4615      	mov	r5, r2
	char str[24];
	int state = 0;
	const char *ch = fmt;

	for (; *fmt != '\0'; fmt++) {
 8000e6e:	780a      	ldrb	r2, [r1, #0]
{
 8000e70:	b088      	sub	sp, #32
	for (; *fmt != '\0'; fmt++) {
 8000e72:	b39a      	cbz	r2, 8000edc <vformat_log+0x74>
 8000e74:	460e      	mov	r6, r1
 8000e76:	4604      	mov	r4, r0
	int state = 0;
 8000e78:	2300      	movs	r3, #0
			pl_lib_ull2str(str, va_arg(valist, uint_t), 10);
			put_string(putc, str);
			break;

		case '%' + 'l' + 'd':
			pl_lib_ll2str(str, va_arg(valist, l_t), 10);
 8000e7a:	f04f 090a 	mov.w	r9, #10
		switch (state) {
 8000e7e:	f240 1861 	movw	r8, #353	; 0x161
 8000e82:	1c4f      	adds	r7, r1, #1
		state += *fmt;
 8000e84:	4413      	add	r3, r2
		switch (state) {
 8000e86:	2bf5      	cmp	r3, #245	; 0xf5
 8000e88:	f000 80c3 	beq.w	8001012 <vformat_log+0x1aa>
 8000e8c:	dd29      	ble.n	8000ee2 <vformat_log+0x7a>
 8000e8e:	4543      	cmp	r3, r8
 8000e90:	f000 80d3 	beq.w	800103a <vformat_log+0x1d2>
 8000e94:	f5b3 7fb1 	cmp.w	r3, #354	; 0x162
 8000e98:	db3e      	blt.n	8000f18 <vformat_log+0xb0>
 8000e9a:	f5b3 7fb9 	cmp.w	r3, #370	; 0x172
 8000e9e:	f000 808e 	beq.w	8000fbe <vformat_log+0x156>
 8000ea2:	f240 1275 	movw	r2, #373	; 0x175
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d167      	bne.n	8000f7a <vformat_log+0x112>
			pl_lib_ll2str(str, va_arg(valist, ll_t), 10);
			put_string(putc, str);
			break;

		case '%' + 'l' + 'l' + 'x':
			pl_lib_ull2str(str, va_arg(valist, ull_t), 16);
 8000eaa:	2110      	movs	r1, #16
 8000eac:	3507      	adds	r5, #7
 8000eae:	f025 0507 	bic.w	r5, r5, #7
 8000eb2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8000eb6:	a802      	add	r0, sp, #8
 8000eb8:	9100      	str	r1, [sp, #0]
 8000eba:	f000 fc23 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000ebe:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000ec2:	b128      	cbz	r0, 8000ed0 <vformat_log+0x68>
 8000ec4:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000ec6:	47a0      	blx	r4
	while (*str)
 8000ec8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d1fa      	bne.n	8000ec6 <vformat_log+0x5e>
			put_chars(putc, ch, fmt);
			break;
		}

		state = 0;
		ch = fmt + 1;
 8000ed0:	463e      	mov	r6, r7
		state = 0;
 8000ed2:	2300      	movs	r3, #0
	for (; *fmt != '\0'; fmt++) {
 8000ed4:	f817 2b01 	ldrb.w	r2, [r7], #1
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d1d3      	bne.n	8000e84 <vformat_log+0x1c>
	}
}
 8000edc:	b008      	add	sp, #32
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (state) {
 8000ee2:	2b98      	cmp	r3, #152	; 0x98
 8000ee4:	f000 80bf 	beq.w	8001066 <vformat_log+0x1fe>
 8000ee8:	dd30      	ble.n	8000f4c <vformat_log+0xe4>
 8000eea:	2b9a      	cmp	r3, #154	; 0x9a
 8000eec:	d07d      	beq.n	8000fea <vformat_log+0x182>
 8000eee:	2b9d      	cmp	r3, #157	; 0x9d
 8000ef0:	d143      	bne.n	8000f7a <vformat_log+0x112>
			pl_lib_ull2str(str, va_arg(valist, uint_t), 16);
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	f855 2b04 	ldr.w	r2, [r5], #4
 8000ef8:	2300      	movs	r3, #0
 8000efa:	a802      	add	r0, sp, #8
 8000efc:	9100      	str	r1, [sp, #0]
 8000efe:	f000 fc01 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000f02:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d0e2      	beq.n	8000ed0 <vformat_log+0x68>
 8000f0a:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000f0c:	47a0      	blx	r4
	while (*str)
 8000f0e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d1fa      	bne.n	8000f0c <vformat_log+0xa4>
 8000f16:	e7db      	b.n	8000ed0 <vformat_log+0x68>
		switch (state) {
 8000f18:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8000f1c:	d03c      	beq.n	8000f98 <vformat_log+0x130>
 8000f1e:	f240 1209 	movw	r2, #265	; 0x109
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d127      	bne.n	8000f76 <vformat_log+0x10e>
			pl_lib_ull2str(str, va_arg(valist, ul_t), 16);
 8000f26:	2110      	movs	r1, #16
 8000f28:	f855 2b04 	ldr.w	r2, [r5], #4
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	a802      	add	r0, sp, #8
 8000f30:	9100      	str	r1, [sp, #0]
 8000f32:	f000 fbe7 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000f36:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d0c8      	beq.n	8000ed0 <vformat_log+0x68>
 8000f3e:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000f40:	47a0      	blx	r4
	while (*str)
 8000f42:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d1fa      	bne.n	8000f40 <vformat_log+0xd8>
 8000f4a:	e7c1      	b.n	8000ed0 <vformat_log+0x68>
		switch (state) {
 8000f4c:	2b89      	cmp	r3, #137	; 0x89
 8000f4e:	d11e      	bne.n	8000f8e <vformat_log+0x126>
			pl_lib_ll2str(str, va_arg(valist, int_t), 10);
 8000f50:	f855 2b04 	ldr.w	r2, [r5], #4
 8000f54:	a802      	add	r0, sp, #8
 8000f56:	f8cd 9000 	str.w	r9, [sp]
 8000f5a:	17d3      	asrs	r3, r2, #31
 8000f5c:	f000 fc16 	bl	800178c <pl_lib_ll2str>
	while (*str)
 8000f60:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0b3      	beq.n	8000ed0 <vformat_log+0x68>
 8000f68:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000f6a:	47a0      	blx	r4
	while (*str)
 8000f6c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d1fa      	bne.n	8000f6a <vformat_log+0x102>
 8000f74:	e7ac      	b.n	8000ed0 <vformat_log+0x68>
		switch (state) {
 8000f76:	2bfd      	cmp	r3, #253	; 0xfd
 8000f78:	d0ac      	beq.n	8000ed4 <vformat_log+0x6c>
	for (ch = start; ch <= end; ch++)
 8000f7a:	f107 3aff 	add.w	sl, r7, #4294967295
 8000f7e:	45b2      	cmp	sl, r6
 8000f80:	d3a6      	bcc.n	8000ed0 <vformat_log+0x68>
		putc(*ch);
 8000f82:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000f86:	47a0      	blx	r4
	for (ch = start; ch <= end; ch++)
 8000f88:	4556      	cmp	r6, sl
 8000f8a:	d9fa      	bls.n	8000f82 <vformat_log+0x11a>
 8000f8c:	e7a0      	b.n	8000ed0 <vformat_log+0x68>
		switch (state) {
 8000f8e:	2b91      	cmp	r3, #145	; 0x91
 8000f90:	d0a0      	beq.n	8000ed4 <vformat_log+0x6c>
 8000f92:	2b25      	cmp	r3, #37	; 0x25
 8000f94:	d09e      	beq.n	8000ed4 <vformat_log+0x6c>
 8000f96:	e7f0      	b.n	8000f7a <vformat_log+0x112>
			pl_lib_ull2str(str, va_arg(valist, ul_t), 10);
 8000f98:	f855 2b04 	ldr.w	r2, [r5], #4
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	a802      	add	r0, sp, #8
 8000fa0:	f8cd 9000 	str.w	r9, [sp]
 8000fa4:	f000 fbae 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000fa8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d08f      	beq.n	8000ed0 <vformat_log+0x68>
 8000fb0:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000fb2:	47a0      	blx	r4
	while (*str)
 8000fb4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d1fa      	bne.n	8000fb2 <vformat_log+0x14a>
 8000fbc:	e788      	b.n	8000ed0 <vformat_log+0x68>
			pl_lib_ull2str(str, va_arg(valist, ull_t), 10);
 8000fbe:	3507      	adds	r5, #7
 8000fc0:	f025 0507 	bic.w	r5, r5, #7
 8000fc4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8000fc8:	a802      	add	r0, sp, #8
 8000fca:	f8cd 9000 	str.w	r9, [sp]
 8000fce:	f000 fb99 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000fd2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	f43f af7a 	beq.w	8000ed0 <vformat_log+0x68>
 8000fdc:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8000fde:	47a0      	blx	r4
	while (*str)
 8000fe0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8000fe4:	2800      	cmp	r0, #0
 8000fe6:	d1fa      	bne.n	8000fde <vformat_log+0x176>
 8000fe8:	e772      	b.n	8000ed0 <vformat_log+0x68>
			pl_lib_ull2str(str, va_arg(valist, uint_t), 10);
 8000fea:	f855 2b04 	ldr.w	r2, [r5], #4
 8000fee:	2300      	movs	r3, #0
 8000ff0:	a802      	add	r0, sp, #8
 8000ff2:	f8cd 9000 	str.w	r9, [sp]
 8000ff6:	f000 fb85 	bl	8001704 <pl_lib_ull2str>
	while (*str)
 8000ffa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000ffe:	2800      	cmp	r0, #0
 8001000:	f43f af66 	beq.w	8000ed0 <vformat_log+0x68>
 8001004:	ae02      	add	r6, sp, #8
		putc(*(str++));
 8001006:	47a0      	blx	r4
	while (*str)
 8001008:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 800100c:	2800      	cmp	r0, #0
 800100e:	d1fa      	bne.n	8001006 <vformat_log+0x19e>
 8001010:	e75e      	b.n	8000ed0 <vformat_log+0x68>
			pl_lib_ll2str(str, va_arg(valist, l_t), 10);
 8001012:	f855 2b04 	ldr.w	r2, [r5], #4
 8001016:	a802      	add	r0, sp, #8
 8001018:	f8cd 9000 	str.w	r9, [sp]
 800101c:	17d3      	asrs	r3, r2, #31
 800101e:	f000 fbb5 	bl	800178c <pl_lib_ll2str>
	while (*str)
 8001022:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001026:	2800      	cmp	r0, #0
 8001028:	f43f af52 	beq.w	8000ed0 <vformat_log+0x68>
 800102c:	ae02      	add	r6, sp, #8
		putc(*(str++));
 800102e:	47a0      	blx	r4
	while (*str)
 8001030:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8001034:	2800      	cmp	r0, #0
 8001036:	d1fa      	bne.n	800102e <vformat_log+0x1c6>
 8001038:	e74a      	b.n	8000ed0 <vformat_log+0x68>
			pl_lib_ll2str(str, va_arg(valist, ll_t), 10);
 800103a:	3507      	adds	r5, #7
 800103c:	f025 0507 	bic.w	r5, r5, #7
 8001040:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8001044:	a802      	add	r0, sp, #8
 8001046:	f8cd 9000 	str.w	r9, [sp]
 800104a:	f000 fb9f 	bl	800178c <pl_lib_ll2str>
	while (*str)
 800104e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001052:	2800      	cmp	r0, #0
 8001054:	f43f af3c 	beq.w	8000ed0 <vformat_log+0x68>
 8001058:	ae02      	add	r6, sp, #8
		putc(*(str++));
 800105a:	47a0      	blx	r4
	while (*str)
 800105c:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8001060:	2800      	cmp	r0, #0
 8001062:	d1fa      	bne.n	800105a <vformat_log+0x1f2>
 8001064:	e734      	b.n	8000ed0 <vformat_log+0x68>
			put_string(putc, va_arg(valist, char *));
 8001066:	f855 6b04 	ldr.w	r6, [r5], #4
	while (*str)
 800106a:	7830      	ldrb	r0, [r6, #0]
 800106c:	2800      	cmp	r0, #0
 800106e:	f43f af2f 	beq.w	8000ed0 <vformat_log+0x68>
		putc(*(str++));
 8001072:	47a0      	blx	r4
	while (*str)
 8001074:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8001078:	2800      	cmp	r0, #0
 800107a:	d1fa      	bne.n	8001072 <vformat_log+0x20a>
 800107c:	e728      	b.n	8000ed0 <vformat_log+0x68>
 800107e:	bf00      	nop

08001080 <pl_put_early_format_log>:
 * 
 * Return:
 *   none.
 ************************************************************************************/
void pl_put_early_format_log(int (*putc)(const char c), const char *fmt, ...)
{
 8001080:	b40e      	push	{r1, r2, r3}
 8001082:	b500      	push	{lr}
 8001084:	b082      	sub	sp, #8
 8001086:	aa03      	add	r2, sp, #12
 8001088:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list valist;

	va_start(valist, fmt);
 800108c:	9201      	str	r2, [sp, #4]
	vformat_log(putc, fmt, valist);
 800108e:	f7ff feeb 	bl	8000e68 <vformat_log>
	va_end(valist);
}
 8001092:	b002      	add	sp, #8
 8001094:	f85d eb04 	ldr.w	lr, [sp], #4
 8001098:	b003      	add	sp, #12
 800109a:	4770      	bx	lr

0800109c <pl_syslog_init>:
 *
 * Return:
 *  Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_syslog_init(void)
{
 800109c:	b508      	push	{r3, lr}
	pl_semaplore_init(&syslog_semaphore, 1);
 800109e:	2101      	movs	r1, #1
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <pl_syslog_init+0x10>)
 80010a2:	f000 fa91 	bl	80015c8 <pl_semaplore_init>
	return OK;
}
 80010a6:	2000      	movs	r0, #0
 80010a8:	bd08      	pop	{r3, pc}
 80010aa:	bf00      	nop
 80010ac:	20002864 	.word	0x20002864

080010b0 <pl_put_format_log>:
 *
 * Return:
 *  void.
 ************************************************************************************/
void pl_put_format_log(int (*putc)(const char c), const char *fmt, ...)
{
 80010b0:	b40e      	push	{r1, r2, r3}
 80010b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b4:	4605      	mov	r5, r0
 80010b6:	b082      	sub	sp, #8
 80010b8:	ac07      	add	r4, sp, #28
	va_list valist;

	pl_semaplore_take(&syslog_semaphore);
 80010ba:	4e0a      	ldr	r6, [pc, #40]	; (80010e4 <pl_put_format_log+0x34>)
{
 80010bc:	f854 7b04 	ldr.w	r7, [r4], #4
	pl_semaplore_take(&syslog_semaphore);
 80010c0:	4630      	mov	r0, r6
 80010c2:	f000 fa95 	bl	80015f0 <pl_semaplore_take>
	va_start(valist, fmt);
	vformat_log(putc, fmt, valist);
 80010c6:	4622      	mov	r2, r4
 80010c8:	4639      	mov	r1, r7
 80010ca:	4628      	mov	r0, r5
	va_start(valist, fmt);
 80010cc:	9401      	str	r4, [sp, #4]
	vformat_log(putc, fmt, valist);
 80010ce:	f7ff fecb 	bl	8000e68 <vformat_log>
	va_end(valist);
	pl_semaplore_give(&syslog_semaphore);
 80010d2:	4630      	mov	r0, r6
 80010d4:	f000 fab2 	bl	800163c <pl_semaplore_give>
}
 80010d8:	b002      	add	sp, #8
 80010da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010de:	b003      	add	sp, #12
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20002864 	.word	0x20002864

080010e8 <pl_task_get_curr_tcb>:
 * Return:
 *   @struct tcb: current tcb.
 ************************************************************************************/
struct tcb *pl_task_get_curr_tcb(void)
{
	return g_task_core_blk.curr_tcb;
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <pl_task_get_curr_tcb+0x8>)
}
 80010ea:	f8d3 0340 	ldr.w	r0, [r3, #832]	; 0x340
 80010ee:	4770      	bx	lr
 80010f0:	200028c4 	.word	0x200028c4

080010f4 <pl_callee_save_curr_context_sp>:
 *
 * Return:
 *    void *context sp;
 ************************************************************************************/
void pl_callee_save_curr_context_sp(void *context_sp)
{
 80010f4:	4602      	mov	r2, r0
	g_task_core_blk.curr_tcb->context_sp = context_sp;
 80010f6:	4b03      	ldr	r3, [pc, #12]	; (8001104 <pl_callee_save_curr_context_sp+0x10>)
	pl_port_putc('U');
 80010f8:	2055      	movs	r0, #85	; 0x55
	g_task_core_blk.curr_tcb->context_sp = context_sp;
 80010fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80010fe:	601a      	str	r2, [r3, #0]
	pl_port_putc('U');
 8001100:	f7ff bb92 	b.w	8000828 <pl_port_putc>
 8001104:	200028c4 	.word	0x200028c4

08001108 <pl_task_insert_tcb_to_rdylist>:
 *   @tcb: task control block.
 * Return:
 *   void
 ************************************************************************************/
void pl_task_insert_tcb_to_rdylist(struct tcb *tcb)
{
 8001108:	b570      	push	{r4, r5, r6, lr}
	u16_t prio = tcb->prio;
	struct task_list *rdylist = &g_task_core_blk.ready_list[prio];

	if (rdylist->head == NULL) {
 800110a:	4e13      	ldr	r6, [pc, #76]	; (8001158 <pl_task_insert_tcb_to_rdylist+0x50>)
	u16_t prio = tcb->prio;
 800110c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
{
 800110e:	4605      	mov	r5, r0
	if (rdylist->head == NULL) {
 8001110:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 8001114:	b1c8      	cbz	r0, 800114a <pl_task_insert_tcb_to_rdylist+0x42>
		list_init(&tcb->node);
		rdylist->head = tcb;
	} else {
		list_add_node_at_tail(&rdylist->head->node, &tcb->node);
 8001116:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800111a:	3024      	adds	r0, #36	; 0x24
 800111c:	f7ff fcf2 	bl	8000b04 <list_add_node_at_tail>
	}

	++rdylist->num;
 8001120:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 8001124:	88b3      	ldrh	r3, [r6, #4]
	set_bit_of_hiprio_bitmap(prio);
	tcb->curr_state = PL_TASK_STATE_READY;
 8001126:	2000      	movs	r0, #0
	++rdylist->num;
 8001128:	3301      	adds	r3, #1
 800112a:	80b3      	strh	r3, [r6, #4]
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 800112c:	2301      	movs	r3, #1
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <pl_task_insert_tcb_to_rdylist+0x54>)
 8001130:	0961      	lsrs	r1, r4, #5
 8001132:	f004 041f 	and.w	r4, r4, #31
 8001136:	fa03 f404 	lsl.w	r4, r3, r4
 800113a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
	tcb->curr_state = PL_TASK_STATE_READY;
 800113e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 8001142:	431c      	orrs	r4, r3
 8001144:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
}
 8001148:	bd70      	pop	{r4, r5, r6, pc}
		list_init(&tcb->node);
 800114a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800114e:	f7ff fcd5 	bl	8000afc <list_init>
		rdylist->head = tcb;
 8001152:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
 8001156:	e7e3      	b.n	8001120 <pl_task_insert_tcb_to_rdylist+0x18>
 8001158:	200028c4 	.word	0x200028c4
 800115c:	200028b4 	.word	0x200028b4

08001160 <pl_task_insert_tcb_to_waitlist>:
 *   @tcb: task control block.
 * Return:
 *   void
 ************************************************************************************/
void pl_task_insert_tcb_to_waitlist(struct list_node *wait_list, struct tcb *tcb)
{
 8001160:	b510      	push	{r4, lr}
 8001162:	460c      	mov	r4, r1
	list_add_node_at_tail(wait_list, &tcb->node);
 8001164:	3124      	adds	r1, #36	; 0x24
 8001166:	f7ff fccd 	bl	8000b04 <list_add_node_at_tail>
	tcb->curr_state = PL_TASK_STATE_WAITING;
 800116a:	2302      	movs	r3, #2
 800116c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001170:	bd10      	pop	{r4, pc}
 8001172:	bf00      	nop

08001174 <pl_task_remove_tcb_from_rdylist>:
 *   @tcb: task control block.
 * Return:
 *   void
 ************************************************************************************/
void pl_task_remove_tcb_from_rdylist(struct tcb *tcb)
{
 8001174:	b538      	push	{r3, r4, r5, lr}
	u16_t prio = tcb->prio;
	struct task_list *rdylist = &g_task_core_blk.ready_list[prio];
	u16_t num = rdylist->num;
 8001176:	4911      	ldr	r1, [pc, #68]	; (80011bc <pl_task_remove_tcb_from_rdylist+0x48>)
	u16_t prio = tcb->prio;
 8001178:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
	u16_t num = rdylist->num;
 800117a:	eb01 04c3 	add.w	r4, r1, r3, lsl #3

	if(num == 1) {
 800117e:	88a2      	ldrh	r2, [r4, #4]
 8001180:	2a01      	cmp	r2, #1
 8001182:	d00a      	beq.n	800119a <pl_task_remove_tcb_from_rdylist+0x26>
		rdylist->head = NULL;
		rdylist->num = 0;
		return;
	}

	rdylist->head = list_next_entry(tcb, struct tcb, node);
 8001184:	6a82      	ldr	r2, [r0, #40]	; 0x28
	list_del_node(&tcb->node);
 8001186:	3024      	adds	r0, #36	; 0x24
	rdylist->head = list_next_entry(tcb, struct tcb, node);
 8001188:	3a24      	subs	r2, #36	; 0x24
 800118a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	list_del_node(&tcb->node);
 800118e:	f7ff fcc5 	bl	8000b1c <list_del_node>
	--rdylist->num;
 8001192:	88a3      	ldrh	r3, [r4, #4]
 8001194:	3b01      	subs	r3, #1
 8001196:	80a3      	strh	r3, [r4, #4]
}
 8001198:	bd38      	pop	{r3, r4, r5, pc}
		rdylist->head = NULL;
 800119a:	2500      	movs	r5, #0
 800119c:	f841 5033 	str.w	r5, [r1, r3, lsl #3]
	g_hiprio_bitmap[idx] &= ~((u32_t)1 << offset);
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <pl_task_remove_tcb_from_rdylist+0x4c>)
 80011a2:	0958      	lsrs	r0, r3, #5
 80011a4:	f003 031f 	and.w	r3, r3, #31
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
		rdylist->num = 0;
 80011b0:	80a5      	strh	r5, [r4, #4]
	g_hiprio_bitmap[idx] &= ~((u32_t)1 << offset);
 80011b2:	ea22 0303 	bic.w	r3, r2, r3
 80011b6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
}
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
 80011bc:	200028c4 	.word	0x200028c4
 80011c0:	200028b4 	.word	0x200028b4

080011c4 <pl_callee_get_next_context_sp>:
 *
 * Return:
 *    void *context sp;
 ************************************************************************************/
void *pl_callee_get_next_context_sp(void)
{
 80011c4:	b510      	push	{r4, lr}
		if (g_hiprio_bitmap[i] != 0)
 80011c6:	4a1c      	ldr	r2, [pc, #112]	; (8001238 <pl_callee_get_next_context_sp+0x74>)
{
 80011c8:	b082      	sub	sp, #8
		if (g_hiprio_bitmap[i] != 0)
 80011ca:	6813      	ldr	r3, [r2, #0]
 80011cc:	bb53      	cbnz	r3, 8001224 <pl_callee_get_next_context_sp+0x60>
 80011ce:	6853      	ldr	r3, [r2, #4]
 80011d0:	bb5b      	cbnz	r3, 800122a <pl_callee_get_next_context_sp+0x66>
 80011d2:	6893      	ldr	r3, [r2, #8]
 80011d4:	bb5b      	cbnz	r3, 800122e <pl_callee_get_next_context_sp+0x6a>
 80011d6:	68d3      	ldr	r3, [r2, #12]
 80011d8:	bb5b      	cbnz	r3, 8001232 <pl_callee_get_next_context_sp+0x6e>
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 80011da:	2480      	movs	r4, #128	; 0x80
 80011dc:	6913      	ldr	r3, [r2, #16]
		if (*p != 0)
 80011de:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 80011e2:	d10d      	bne.n	8001200 <pl_callee_get_next_context_sp+0x3c>
 80011e4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80011e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80011ec:	d108      	bne.n	8001200 <pl_callee_get_next_context_sp+0x3c>
 80011ee:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 80011f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80011f6:	d103      	bne.n	8001200 <pl_callee_get_next_context_sp+0x3c>
 80011f8:	0e1a      	lsrs	r2, r3, #24
	last_bit = pl_port_rodata_read8(g_hiprio_idx_tbl + (*p));
 80011fa:	bf08      	it	eq
 80011fc:	f89d 2008 	ldrbeq.w	r2, [sp, #8]
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <pl_callee_get_next_context_sp+0x78>)
 8001202:	4410      	add	r0, r2
 8001204:	f7ff fb4a 	bl	800089c <pl_port_rodata_read8>
 8001208:	4602      	mov	r2, r0
	u16_t hiprio;
	struct tcb *next_rdy_tcb;

	/* get highest priority task and switch to it */
	hiprio = get_hiprio();
	next_rdy_tcb = g_task_core_blk.ready_list[hiprio].head;
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <pl_callee_get_next_context_sp+0x7c>)
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 800120c:	4414      	add	r4, r2
	next_rdy_tcb = g_task_core_blk.ready_list[hiprio].head;
 800120e:	b2a4      	uxth	r4, r4
 8001210:	f853 4034 	ldr.w	r4, [r3, r4, lsl #3]
	g_task_core_blk.curr_tcb = next_rdy_tcb;
	pl_port_putc('O');
 8001214:	204f      	movs	r0, #79	; 0x4f
	g_task_core_blk.curr_tcb = next_rdy_tcb;
 8001216:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
	pl_port_putc('O');
 800121a:	f7ff fb05 	bl	8000828 <pl_port_putc>
	return next_rdy_tcb->context_sp;
}
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	b002      	add	sp, #8
 8001222:	bd10      	pop	{r4, pc}
	for (i = 0; i < ARRAY_SIZE(g_hiprio_bitmap); i++) {
 8001224:	2400      	movs	r4, #0
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 8001226:	0164      	lsls	r4, r4, #5
 8001228:	e7d9      	b.n	80011de <pl_callee_get_next_context_sp+0x1a>
	for (i = 0; i < ARRAY_SIZE(g_hiprio_bitmap); i++) {
 800122a:	2401      	movs	r4, #1
 800122c:	e7fb      	b.n	8001226 <pl_callee_get_next_context_sp+0x62>
 800122e:	2402      	movs	r4, #2
 8001230:	e7f9      	b.n	8001226 <pl_callee_get_next_context_sp+0x62>
 8001232:	2403      	movs	r4, #3
 8001234:	e7f7      	b.n	8001226 <pl_callee_get_next_context_sp+0x62>
 8001236:	bf00      	nop
 8001238:	200028b4 	.word	0x200028b4
 800123c:	08001a30 	.word	0x08001a30
 8001240:	200028c4 	.word	0x200028c4

08001244 <pl_task_context_switch>:
 *
 * Return:
 *   none
 ************************************************************************************/
void pl_task_context_switch(void)
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b083      	sub	sp, #12
	u16_t hiprio;
	struct tcb *curr_tcb;
	struct tcb *next_tcb;
	struct tcb *idle_tcb;

	pl_enter_critical();
 8001248:	f7ff fba6 	bl	8000998 <pl_enter_critical>
		if (g_hiprio_bitmap[i] != 0)
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <pl_task_context_switch+0xa4>)
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d13f      	bne.n	80012d4 <pl_task_context_switch+0x90>
 8001254:	6853      	ldr	r3, [r2, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d13f      	bne.n	80012da <pl_task_context_switch+0x96>
 800125a:	6893      	ldr	r3, [r2, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d13e      	bne.n	80012de <pl_task_context_switch+0x9a>
 8001260:	68d3      	ldr	r3, [r2, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d13d      	bne.n	80012e2 <pl_task_context_switch+0x9e>
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 8001266:	2480      	movs	r4, #128	; 0x80
 8001268:	6913      	ldr	r3, [r2, #16]
		if (*p != 0)
 800126a:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
 800126e:	d10d      	bne.n	800128c <pl_task_context_switch+0x48>
 8001270:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8001274:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001278:	d108      	bne.n	800128c <pl_task_context_switch+0x48>
 800127a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 800127e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001282:	d103      	bne.n	800128c <pl_task_context_switch+0x48>
 8001284:	0e1a      	lsrs	r2, r3, #24
	last_bit = pl_port_rodata_read8(g_hiprio_idx_tbl + (*p));
 8001286:	bf08      	it	eq
 8001288:	f89d 2008 	ldrbeq.w	r2, [sp, #8]
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <pl_task_context_switch+0xa8>)
	hiprio = get_hiprio();
	curr_tcb = g_task_core_blk.curr_tcb;
 800128e:	4d18      	ldr	r5, [pc, #96]	; (80012f0 <pl_task_context_switch+0xac>)
	last_bit = pl_port_rodata_read8(g_hiprio_idx_tbl + (*p));
 8001290:	4410      	add	r0, r2
 8001292:	f7ff fb03 	bl	800089c <pl_port_rodata_read8>
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 8001296:	4404      	add	r4, r0
	next_tcb = g_task_core_blk.ready_list[hiprio].head;
 8001298:	b2a4      	uxth	r4, r4
 800129a:	f855 6034 	ldr.w	r6, [r5, r4, lsl #3]
	curr_tcb = g_task_core_blk.curr_tcb;
 800129e:	f8d5 7340 	ldr.w	r7, [r5, #832]	; 0x340
	pl_exit_critical();
 80012a2:	f7ff fb87 	bl	80009b4 <pl_exit_critical>

	idle_tcb = g_task_core_blk.ready_list[PL_CFG_TASK_PRIORITIES_MAX].head;
	if (next_tcb == idle_tcb)
 80012a6:	f8d5 3318 	ldr.w	r3, [r5, #792]	; 0x318
 80012aa:	429e      	cmp	r6, r3
 80012ac:	d00d      	beq.n	80012ca <pl_task_context_switch+0x86>
		++cpu_rate_idle;

	if (curr_tcb != next_tcb)
 80012ae:	42b7      	cmp	r7, r6
 80012b0:	d001      	beq.n	80012b6 <pl_task_context_switch+0x72>
		pl_port_switch_context();
 80012b2:	f000 fadb 	bl	800186c <pl_port_switch_context>

	pl_early_syslog("rdylist_node_num:%d\r\n", g_task_core_blk.ready_list[hiprio].num);
 80012b6:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 80012ba:	88a2      	ldrh	r2, [r4, #4]
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <pl_task_context_switch+0xb0>)
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <pl_task_context_switch+0xb4>)
}
 80012c0:	b003      	add	sp, #12
 80012c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	pl_early_syslog("rdylist_node_num:%d\r\n", g_task_core_blk.ready_list[hiprio].num);
 80012c6:	f7ff bedb 	b.w	8001080 <pl_put_early_format_log>
		++cpu_rate_idle;
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <pl_task_context_switch+0xb8>)
 80012cc:	6813      	ldr	r3, [r2, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e7ec      	b.n	80012ae <pl_task_context_switch+0x6a>
	for (i = 0; i < ARRAY_SIZE(g_hiprio_bitmap); i++) {
 80012d4:	2400      	movs	r4, #0
	hiprio = (i << 5) + get_last_bit(g_hiprio_bitmap[i]);
 80012d6:	0164      	lsls	r4, r4, #5
 80012d8:	e7c7      	b.n	800126a <pl_task_context_switch+0x26>
	for (i = 0; i < ARRAY_SIZE(g_hiprio_bitmap); i++) {
 80012da:	2401      	movs	r4, #1
 80012dc:	e7fb      	b.n	80012d6 <pl_task_context_switch+0x92>
 80012de:	2402      	movs	r4, #2
 80012e0:	e7f9      	b.n	80012d6 <pl_task_context_switch+0x92>
 80012e2:	2403      	movs	r4, #3
 80012e4:	e7f7      	b.n	80012d6 <pl_task_context_switch+0x92>
 80012e6:	bf00      	nop
 80012e8:	200028b4 	.word	0x200028b4
 80012ec:	08001a30 	.word	0x08001a30
 80012f0:	200028c4 	.word	0x200028c4
 80012f4:	0800198c 	.word	0x0800198c
 80012f8:	08000829 	.word	0x08000829
 80012fc:	20002874 	.word	0x20002874

08001300 <task_entry>:
 *
 * Return:
 *   void.
 ************************************************************************************/
static void task_entry(struct tcb *tcb)
{
 8001300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct tcb *pos;
	struct tcb *tmp;
	int exit_val = tcb->task(tcb->argc, tcb->argv);
 8001304:	6941      	ldr	r1, [r0, #20]
{
 8001306:	4604      	mov	r4, r0
	int exit_val = tcb->task(tcb->argc, tcb->argv);
 8001308:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 800130c:	4798      	blx	r3
 800130e:	4607      	mov	r7, r0

	/* insert current task to exit list */
	pl_enter_critical();
 8001310:	f7ff fb42 	bl	8000998 <pl_enter_critical>
	pl_task_remove_tcb_from_rdylist(tcb);
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff ff2d 	bl	8001174 <pl_task_remove_tcb_from_rdylist>
	list_add_node_at_tail(&g_task_core_blk.exit_list, &tcb->node);
 800131a:	4827      	ldr	r0, [pc, #156]	; (80013b8 <task_entry+0xb8>)
 800131c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8001320:	f7ff fbf0 	bl	8000b04 <list_add_node_at_tail>
	pl_task_insert_tcb_to_exitlist(tcb);

	/* recover waiting tasks */
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001324:	6a23      	ldr	r3, [r4, #32]
	tcb->curr_state = PL_TASK_STATE_EXIT;
 8001326:	2204      	movs	r2, #4
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001328:	4699      	mov	r9, r3
 800132a:	f104 081c 	add.w	r8, r4, #28
	tcb->curr_state = PL_TASK_STATE_EXIT;
 800132e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001332:	45c1      	cmp	r9, r8
 8001334:	f1a3 0b24 	sub.w	fp, r3, #36	; 0x24
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	d038      	beq.n	80013ae <task_entry+0xae>
 800133c:	4d1f      	ldr	r5, [pc, #124]	; (80013bc <task_entry+0xbc>)
 800133e:	4e20      	ldr	r6, [pc, #128]	; (80013c0 <task_entry+0xc0>)
 8001340:	f1a3 0a24 	sub.w	sl, r3, #36	; 0x24
 8001344:	e022      	b.n	800138c <task_entry+0x8c>
		list_add_node_at_tail(&rdylist->head->node, &tcb->node);
 8001346:	4649      	mov	r1, r9
 8001348:	f7ff fbdc 	bl	8000b04 <list_add_node_at_tail>
	++rdylist->num;
 800134c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8001350:	888a      	ldrh	r2, [r1, #4]
	tcb->curr_state = PL_TASK_STATE_READY;
 8001352:	f04f 0300 	mov.w	r3, #0
	++rdylist->num;
 8001356:	3201      	adds	r2, #1
 8001358:	808a      	strh	r2, [r1, #4]
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 800135a:	2101      	movs	r1, #1
 800135c:	0960      	lsrs	r0, r4, #5
 800135e:	f856 2020 	ldr.w	r2, [r6, r0, lsl #2]
	tcb->curr_state = PL_TASK_STATE_READY;
 8001362:	f88b 302c 	strb.w	r3, [fp, #44]	; 0x2c
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 8001366:	f004 041f 	and.w	r4, r4, #31
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 800136a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 800136e:	fa01 f404 	lsl.w	r4, r1, r4
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001372:	f10a 0924 	add.w	r9, sl, #36	; 0x24
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 8001376:	4314      	orrs	r4, r2
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001378:	45c1      	cmp	r9, r8
		list_del_node(&pos->node);
		pl_task_insert_tcb_to_rdylist(pos);
		pos->wait_for_task_ret = exit_val;
 800137a:	f8cb 7018 	str.w	r7, [fp, #24]
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 800137e:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	list_for_each_entry_safe(pos, tmp, &tcb->wait_head, struct tcb, node) {
 8001382:	46d3      	mov	fp, sl
 8001384:	f1a3 0324 	sub.w	r3, r3, #36	; 0x24
 8001388:	d011      	beq.n	80013ae <task_entry+0xae>
 800138a:	469a      	mov	sl, r3
		list_del_node(&pos->node);
 800138c:	4648      	mov	r0, r9
 800138e:	f7ff fbc5 	bl	8000b1c <list_del_node>
	u16_t prio = tcb->prio;
 8001392:	f8bb 402e 	ldrh.w	r4, [fp, #46]	; 0x2e
	if (rdylist->head == NULL) {
 8001396:	f855 2034 	ldr.w	r2, [r5, r4, lsl #3]
		list_add_node_at_tail(&rdylist->head->node, &tcb->node);
 800139a:	f102 0024 	add.w	r0, r2, #36	; 0x24
	if (rdylist->head == NULL) {
 800139e:	2a00      	cmp	r2, #0
 80013a0:	d1d1      	bne.n	8001346 <task_entry+0x46>
		list_init(&tcb->node);
 80013a2:	4648      	mov	r0, r9
 80013a4:	f7ff fbaa 	bl	8000afc <list_init>
		rdylist->head = tcb;
 80013a8:	f845 b034 	str.w	fp, [r5, r4, lsl #3]
 80013ac:	e7ce      	b.n	800134c <task_entry+0x4c>
	}

	pl_exit_critical();
 80013ae:	f7ff fb01 	bl	80009b4 <pl_exit_critical>
	/* switch task*/
	pl_task_context_switch();
 80013b2:	f7ff ff47 	bl	8001244 <pl_task_context_switch>
	/* will be never come here */
	while(1);
 80013b6:	e7fe      	b.n	80013b6 <task_entry+0xb6>
 80013b8:	20002bfc 	.word	0x20002bfc
 80013bc:	200028c4 	.word	0x200028c4
 80013c0:	200028b4 	.word	0x200028b4

080013c4 <pl_task_create>:
 * Return:
 *   task id.
 ************************************************************************************/
tid_t pl_task_create(const char *name, main_t task, u16_t prio,
                     size_t stack_size, int argc, char *argv[])
{
 80013c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013c8:	4607      	mov	r7, r0
 80013ca:	4688      	mov	r8, r1
	void *stack;
	struct tcb *tcb_and_stack;
	size_t tcb_actual_size = pl_align_size(sizeof(struct tcb), sizeof(uintptr_t) << 1);
 80013cc:	203c      	movs	r0, #60	; 0x3c
 80013ce:	2108      	movs	r1, #8
{
 80013d0:	461e      	mov	r6, r3
 80013d2:	4691      	mov	r9, r2
	size_t tcb_actual_size = pl_align_size(sizeof(struct tcb), sizeof(uintptr_t) << 1);
 80013d4:	f7ff fada 	bl	800098c <pl_align_size>
 80013d8:	4605      	mov	r5, r0

	tcb_and_stack = pl_mempool_malloc(g_pl_default_mempool, tcb_actual_size + stack_size);
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <pl_task_create+0xd0>)
 80013dc:	19a9      	adds	r1, r5, r6
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f7ff fc72 	bl	8000cc8 <pl_mempool_malloc>
	if (tcb_and_stack == NULL)
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d050      	beq.n	800148a <pl_task_create+0xc6>
		return ERR_TO_PTR(-ENOMEM);

	pl_early_syslog("create:%s task\r\n", name);
 80013e8:	4604      	mov	r4, r0
 80013ea:	463a      	mov	r2, r7
 80013ec:	492a      	ldr	r1, [pc, #168]	; (8001498 <pl_task_create+0xd4>)
 80013ee:	482b      	ldr	r0, [pc, #172]	; (800149c <pl_task_create+0xd8>)
 80013f0:	f7ff fe46 	bl	8001080 <pl_put_early_format_log>
	stack = pl_port_task_stack_init(task_entry, stack, stack_size, tcb);
 80013f4:	4632      	mov	r2, r6
 80013f6:	1961      	adds	r1, r4, r5
 80013f8:	4623      	mov	r3, r4
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <pl_task_create+0xdc>)
 80013fc:	f7ff fa32 	bl	8000864 <pl_port_task_stack_init>
	tcb->signal = 0;
 8001400:	2300      	movs	r3, #0
	tcb->wait_for_task_ret = ERROR;
 8001402:	f06f 0224 	mvn.w	r2, #36	; 0x24
	tcb->parent = g_task_core_blk.curr_tcb;
 8001406:	4e27      	ldr	r6, [pc, #156]	; (80014a4 <pl_task_create+0xe0>)
	tcb->name = name;
 8001408:	6067      	str	r7, [r4, #4]
	tcb->parent = g_task_core_blk.curr_tcb;
 800140a:	f8d6 1340 	ldr.w	r1, [r6, #832]	; 0x340
	tcb->delay_ticks.hi32 = 0;
 800140e:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
	tcb->task = task;
 8001412:	e9c4 1802 	strd	r1, r8, [r4, #8]
	tcb->argc = argc;
 8001416:	9908      	ldr	r1, [sp, #32]
	tcb->context_sp = stack;
 8001418:	6020      	str	r0, [r4, #0]
	tcb->argc = argc;
 800141a:	6121      	str	r1, [r4, #16]
	tcb->argv = argv;
 800141c:	9909      	ldr	r1, [sp, #36]	; 0x24
	list_init(&tcb->wait_head);
 800141e:	f104 001c 	add.w	r0, r4, #28
	tcb->argv = argv;
 8001422:	6161      	str	r1, [r4, #20]
	tcb->delay_ticks.lo32 = 0;
 8001424:	63a3      	str	r3, [r4, #56]	; 0x38
	tcb->wait_for_task_ret = ERROR;
 8001426:	61a2      	str	r2, [r4, #24]
	tcb->prio = prio;
 8001428:	f8a4 902e 	strh.w	r9, [r4, #46]	; 0x2e
	list_init(&tcb->wait_head);
 800142c:	f7ff fb66 	bl	8000afc <list_init>
	pl_enter_critical();
 8001430:	f7ff fab2 	bl	8000998 <pl_enter_critical>
	u16_t prio = tcb->prio;
 8001434:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
	if (rdylist->head == NULL) {
 8001436:	f856 0035 	ldr.w	r0, [r6, r5, lsl #3]
 800143a:	b1f8      	cbz	r0, 800147c <pl_task_create+0xb8>
		list_add_node_at_tail(&rdylist->head->node, &tcb->node);
 800143c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8001440:	3024      	adds	r0, #36	; 0x24
 8001442:	f7ff fb5f 	bl	8000b04 <list_add_node_at_tail>
	++rdylist->num;
 8001446:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 800144a:	88b3      	ldrh	r3, [r6, #4]
	tcb->curr_state = PL_TASK_STATE_READY;
 800144c:	2000      	movs	r0, #0
	++rdylist->num;
 800144e:	3301      	adds	r3, #1
 8001450:	80b3      	strh	r3, [r6, #4]
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 8001452:	2301      	movs	r3, #1
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <pl_task_create+0xe4>)
 8001456:	0969      	lsrs	r1, r5, #5
 8001458:	f005 051f 	and.w	r5, r5, #31
 800145c:	fa03 f505 	lsl.w	r5, r3, r5
 8001460:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
	tcb->curr_state = PL_TASK_STATE_READY;
 8001464:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
	g_hiprio_bitmap[idx] |= ((u32_t)1 << offset);
 8001468:	431d      	orrs	r5, r3
 800146a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
	pl_exit_critical();
 800146e:	f7ff faa1 	bl	80009b4 <pl_exit_critical>
	pl_task_context_switch();
 8001472:	f7ff fee7 	bl	8001244 <pl_task_context_switch>
	stack = (u8_t *)tcb_and_stack + tcb_actual_size;
	task_init_and_create(name, task, prio, tcb_and_stack, stack, stack_size, argc, argv);
	return tcb_and_stack;
}
 8001476:	4620      	mov	r0, r4
 8001478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		list_init(&tcb->node);
 800147c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001480:	f7ff fb3c 	bl	8000afc <list_init>
		rdylist->head = tcb;
 8001484:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 8001488:	e7dd      	b.n	8001446 <pl_task_create+0x82>
		return ERR_TO_PTR(-ENOMEM);
 800148a:	4c08      	ldr	r4, [pc, #32]	; (80014ac <pl_task_create+0xe8>)
}
 800148c:	4620      	mov	r0, r4
 800148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001492:	bf00      	nop
 8001494:	20000050 	.word	0x20000050
 8001498:	080019a4 	.word	0x080019a4
 800149c:	08000829 	.word	0x08000829
 80014a0:	08001301 	.word	0x08001301
 80014a4:	200028c4 	.word	0x200028c4
 80014a8:	200028b4 	.word	0x200028b4
 80014ac:	08001b68 	.word	0x08001b68

080014b0 <pl_task_pend>:
 ************************************************************************************/
int pl_task_pend(tid_t tid)
{
	struct tcb *tcb = (struct tcb *)tid;

	if (tcb == NULL)
 80014b0:	b3b0      	cbz	r0, 8001520 <pl_task_pend+0x70>
{
 80014b2:	b570      	push	{r4, r5, r6, lr}
 80014b4:	4604      	mov	r4, r0
		return -EFAULT;

	pl_enter_critical();
 80014b6:	f7ff fa6f 	bl	8000998 <pl_enter_critical>
	u16_t prio = tcb->prio;
 80014ba:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	u16_t num = rdylist->num;
 80014bc:	491a      	ldr	r1, [pc, #104]	; (8001528 <pl_task_pend+0x78>)
 80014be:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
	if(num == 1) {
 80014c2:	88aa      	ldrh	r2, [r5, #4]
 80014c4:	2a01      	cmp	r2, #1
 80014c6:	d018      	beq.n	80014fa <pl_task_pend+0x4a>
	rdylist->head = list_next_entry(tcb, struct tcb, node);
 80014c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	list_del_node(&tcb->node);
 80014ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
	rdylist->head = list_next_entry(tcb, struct tcb, node);
 80014ce:	3a24      	subs	r2, #36	; 0x24
 80014d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	list_del_node(&tcb->node);
 80014d4:	4630      	mov	r0, r6
 80014d6:	f7ff fb21 	bl	8000b1c <list_del_node>
	--rdylist->num;
 80014da:	88ab      	ldrh	r3, [r5, #4]
 80014dc:	3b01      	subs	r3, #1
 80014de:	80ab      	strh	r3, [r5, #4]
	list_add_node_at_tail(&g_task_core_blk.pend_list, &tcb->node);
 80014e0:	4631      	mov	r1, r6
 80014e2:	4812      	ldr	r0, [pc, #72]	; (800152c <pl_task_pend+0x7c>)
 80014e4:	f7ff fb0e 	bl	8000b04 <list_add_node_at_tail>
	tcb->curr_state = PL_TASK_STATE_PENDING;
 80014e8:	2303      	movs	r3, #3
 80014ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	pl_task_remove_tcb_from_rdylist(tcb);
	pl_task_insert_tcb_to_pendlist(tcb);
	pl_exit_critical();
 80014ee:	f7ff fa61 	bl	80009b4 <pl_exit_critical>
	pl_task_context_switch();
 80014f2:	f7ff fea7 	bl	8001244 <pl_task_context_switch>

	return OK;
 80014f6:	2000      	movs	r0, #0
}
 80014f8:	bd70      	pop	{r4, r5, r6, pc}
		rdylist->head = NULL;
 80014fa:	2000      	movs	r0, #0
 80014fc:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
	g_hiprio_bitmap[idx] &= ~((u32_t)1 << offset);
 8001500:	490b      	ldr	r1, [pc, #44]	; (8001530 <pl_task_pend+0x80>)
		rdylist->num = 0;
 8001502:	80a8      	strh	r0, [r5, #4]
	g_hiprio_bitmap[idx] &= ~((u32_t)1 << offset);
 8001504:	0958      	lsrs	r0, r3, #5
 8001506:	f003 031f 	and.w	r3, r3, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
	list_del_node(&tcb->node);
 8001512:	f104 0624 	add.w	r6, r4, #36	; 0x24
	g_hiprio_bitmap[idx] &= ~((u32_t)1 << offset);
 8001516:	ea22 0303 	bic.w	r3, r2, r3
 800151a:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
		return;
 800151e:	e7df      	b.n	80014e0 <pl_task_pend+0x30>
		return -EFAULT;
 8001520:	f06f 000d 	mvn.w	r0, #13
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	200028c4 	.word	0x200028c4
 800152c:	20002bec 	.word	0x20002bec
 8001530:	200028b4 	.word	0x200028b4

08001534 <pl_callee_systick_expiration>:

		/* switch task */
		pl_task_context_switch();
	}
#endif
}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <pl_task_core_init>:
 *
 * Return:
 *   Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_task_core_init(void)
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	4d1a      	ldr	r5, [pc, #104]	; (80015a4 <pl_task_core_init+0x6c>)
	static struct tcb delay_dummy_tcb;

	cpu_rate_base = 0;
	cpu_rate_idle = 0;
 800153c:	2400      	movs	r4, #0
 800153e:	462b      	mov	r3, r5
 8001540:	4919      	ldr	r1, [pc, #100]	; (80015a8 <pl_task_core_init+0x70>)
 8001542:	f505 7248 	add.w	r2, r5, #800	; 0x320
 8001546:	600c      	str	r4, [r1, #0]
		g_task_core_blk.ready_list[i].head = NULL;
 8001548:	601c      	str	r4, [r3, #0]
		g_task_core_blk.ready_list[i].num = 0;
 800154a:	809c      	strh	r4, [r3, #4]
	for (i = 0; i < PL_CFG_TASK_PRIORITIES_MAX + 1; i++) {
 800154c:	3308      	adds	r3, #8
 800154e:	4293      	cmp	r3, r2
 8001550:	d1fa      	bne.n	8001548 <pl_task_core_init+0x10>
	rdytask_list_init();
	list_init(&g_task_core_blk.pend_list);
 8001552:	4816      	ldr	r0, [pc, #88]	; (80015ac <pl_task_core_init+0x74>)
 8001554:	f7ff fad2 	bl	8000afc <list_init>
	list_init(&g_task_core_blk.timer_list);
	list_init(&g_task_core_blk.exit_list);

	list_init(&delay_dummy_tcb.node);
 8001558:	4e15      	ldr	r6, [pc, #84]	; (80015b0 <pl_task_core_init+0x78>)
	list_init(&g_task_core_blk.timer_list);
 800155a:	4816      	ldr	r0, [pc, #88]	; (80015b4 <pl_task_core_init+0x7c>)
 800155c:	f7ff face 	bl	8000afc <list_init>
	list_init(&g_task_core_blk.exit_list);
 8001560:	4815      	ldr	r0, [pc, #84]	; (80015b8 <pl_task_core_init+0x80>)
 8001562:	f7ff facb 	bl	8000afc <list_init>
	list_init(&delay_dummy_tcb.node);
 8001566:	f106 0024 	add.w	r0, r6, #36	; 0x24
 800156a:	f7ff fac7 	bl	8000afc <list_init>
	delay_dummy_tcb.delay_ticks.hi32 = UINT32_MAX;
	delay_dummy_tcb.delay_ticks.lo32 = UINT32_MAX;
	delay_dummy_tcb.name = "delay_head";
 800156e:	4b13      	ldr	r3, [pc, #76]	; (80015bc <pl_task_core_init+0x84>)
	delay_dummy_tcb.delay_ticks.hi32 = UINT32_MAX;
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
	delay_dummy_tcb.name = "delay_head";
 8001574:	6073      	str	r3, [r6, #4]

	g_task_core_blk.curr_tcb = NULL;
	g_task_core_blk.systicks.hi32 = 0;
	g_task_core_blk.systicks.lo32 = 0;
	g_task_core_blk.cpu_rate_base = PL_CFG_CPU_RATE_INTERVAL_TICKS;
 8001576:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
	g_task_core_blk.cpu_rate_useful = PL_CFG_CPU_RATE_INTERVAL_TICKS;
	g_task_core_blk.sched_lock_ref = 0;
	g_task_core_blk.delay_list.num = 0;
	g_task_core_blk.delay_list.head = &delay_dummy_tcb;

	pl_early_syslog_info("task core init successfully\r\n");
 800157a:	4911      	ldr	r1, [pc, #68]	; (80015c0 <pl_task_core_init+0x88>)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <pl_task_core_init+0x8c>)
	g_task_core_blk.systicks.lo32 = 0;
 800157e:	e9c5 44d1 	strd	r4, r4, [r5, #836]	; 0x344
	delay_dummy_tcb.delay_ticks.lo32 = UINT32_MAX;
 8001582:	e9c6 220d 	strd	r2, r2, [r6, #52]	; 0x34
	g_task_core_blk.cpu_rate_useful = PL_CFG_CPU_RATE_INTERVAL_TICKS;
 8001586:	e9c5 33d3 	strd	r3, r3, [r5, #844]	; 0x34c
	g_task_core_blk.curr_tcb = NULL;
 800158a:	f8c5 4340 	str.w	r4, [r5, #832]	; 0x340
	g_task_core_blk.sched_lock_ref = 0;
 800158e:	f8c5 4354 	str.w	r4, [r5, #852]	; 0x354
	g_task_core_blk.delay_list.num = 0;
 8001592:	f8a5 4324 	strh.w	r4, [r5, #804]	; 0x324
	g_task_core_blk.delay_list.head = &delay_dummy_tcb;
 8001596:	f8c5 6320 	str.w	r6, [r5, #800]	; 0x320
	pl_early_syslog_info("task core init successfully\r\n");
 800159a:	f7ff fd71 	bl	8001080 <pl_put_early_format_log>
	return OK;
}
 800159e:	2000      	movs	r0, #0
 80015a0:	bd70      	pop	{r4, r5, r6, pc}
 80015a2:	bf00      	nop
 80015a4:	200028c4 	.word	0x200028c4
 80015a8:	20002874 	.word	0x20002874
 80015ac:	20002bec 	.word	0x20002bec
 80015b0:	20002878 	.word	0x20002878
 80015b4:	20002bf4 	.word	0x20002bf4
 80015b8:	20002bfc 	.word	0x20002bfc
 80015bc:	080019b8 	.word	0x080019b8
 80015c0:	080019c4 	.word	0x080019c4
 80015c4:	08000829 	.word	0x08000829

080015c8 <pl_semaplore_init>:
 *
 * Return:
 *  Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_semaplore_init(struct semaphore *semap, int val)
{
 80015c8:	b508      	push	{r3, lr}
	if (semap == NULL) {
 80015ca:	b130      	cbz	r0, 80015da <pl_semaplore_init+0x12>
		pl_syslog_err("pl_sem alloc failed\r\n");
		return -EFAULT;
	}

	semap->valid = true;
 80015cc:	2201      	movs	r2, #1
	semap->value = val;
 80015ce:	6081      	str	r1, [r0, #8]
	semap->valid = true;
 80015d0:	7302      	strb	r2, [r0, #12]
	list_init(&semap->wait_list);
 80015d2:	f7ff fa93 	bl	8000afc <list_init>
	return OK;
 80015d6:	2000      	movs	r0, #0
}
 80015d8:	bd08      	pop	{r3, pc}
		pl_syslog_err("pl_sem alloc failed\r\n");
 80015da:	4903      	ldr	r1, [pc, #12]	; (80015e8 <pl_semaplore_init+0x20>)
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <pl_semaplore_init+0x24>)
 80015de:	f7ff fd67 	bl	80010b0 <pl_put_format_log>
		return -EFAULT;
 80015e2:	f06f 000d 	mvn.w	r0, #13
}
 80015e6:	bd08      	pop	{r3, pc}
 80015e8:	080019e8 	.word	0x080019e8
 80015ec:	08000829 	.word	0x08000829

080015f0 <pl_semaplore_take>:
int pl_semaplore_take(pl_semaphore_handle_t semap)
{
	struct tcb *curr_tcb;
	struct semaphore *sem = (struct semaphore *)semap;

	if (semap == NULL || (!sem->valid))
 80015f0:	b300      	cbz	r0, 8001634 <pl_semaplore_take+0x44>
{
 80015f2:	b538      	push	{r3, r4, r5, lr}
	if (semap == NULL || (!sem->valid))
 80015f4:	7b03      	ldrb	r3, [r0, #12]
 80015f6:	4604      	mov	r4, r0
 80015f8:	b1cb      	cbz	r3, 800162e <pl_semaplore_take+0x3e>
		return -EFAULT;

	pl_enter_critical();
 80015fa:	f7ff f9cd 	bl	8000998 <pl_enter_critical>
	--sem->value;
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	3b01      	subs	r3, #1
	if (sem->value < 0) {
 8001602:	2b00      	cmp	r3, #0
	--sem->value;
 8001604:	60a3      	str	r3, [r4, #8]
	if (sem->value < 0) {
 8001606:	db03      	blt.n	8001610 <pl_semaplore_take+0x20>
		pl_exit_critical();
		pl_task_context_switch();
		return OK;
	}

	pl_exit_critical();
 8001608:	f7ff f9d4 	bl	80009b4 <pl_exit_critical>
	return OK;
 800160c:	2000      	movs	r0, #0
}
 800160e:	bd38      	pop	{r3, r4, r5, pc}
		curr_tcb = pl_task_get_curr_tcb();
 8001610:	f7ff fd6a 	bl	80010e8 <pl_task_get_curr_tcb>
 8001614:	4605      	mov	r5, r0
		pl_task_remove_tcb_from_rdylist(curr_tcb);
 8001616:	f7ff fdad 	bl	8001174 <pl_task_remove_tcb_from_rdylist>
		pl_task_insert_tcb_to_waitlist(&sem->wait_list, curr_tcb);
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7ff fd9f 	bl	8001160 <pl_task_insert_tcb_to_waitlist>
		pl_exit_critical();
 8001622:	f7ff f9c7 	bl	80009b4 <pl_exit_critical>
		pl_task_context_switch();
 8001626:	f7ff fe0d 	bl	8001244 <pl_task_context_switch>
		return OK;
 800162a:	2000      	movs	r0, #0
}
 800162c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
 800162e:	f06f 000d 	mvn.w	r0, #13
}
 8001632:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
 8001634:	f06f 000d 	mvn.w	r0, #13
}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop

0800163c <pl_semaplore_give>:
{
	struct tcb *front_tcb;
	struct list_node *front_node;
	struct semaphore *sem = (struct semaphore *)semap;

	if (semap == NULL || (!sem->valid))
 800163c:	b1e8      	cbz	r0, 800167a <pl_semaplore_give+0x3e>
 800163e:	7b03      	ldrb	r3, [r0, #12]
{
 8001640:	b510      	push	{r4, lr}
 8001642:	4604      	mov	r4, r0
	if (semap == NULL || (!sem->valid))
 8001644:	b1b3      	cbz	r3, 8001674 <pl_semaplore_give+0x38>
		return -EFAULT;

	pl_enter_critical();
 8001646:	f7ff f9a7 	bl	8000998 <pl_enter_critical>
	++sem->value;
 800164a:	68a3      	ldr	r3, [r4, #8]
 800164c:	3301      	adds	r3, #1
	if (sem->value <= 0) {
 800164e:	2b00      	cmp	r3, #0
	++sem->value;
 8001650:	60a3      	str	r3, [r4, #8]
	if (sem->value <= 0) {
 8001652:	dd03      	ble.n	800165c <pl_semaplore_give+0x20>
		pl_exit_critical();
		pl_task_context_switch();
		return OK;
	}

	pl_exit_critical();
 8001654:	f7ff f9ae 	bl	80009b4 <pl_exit_critical>
	return OK;
 8001658:	2000      	movs	r0, #0
}
 800165a:	bd10      	pop	{r4, pc}
		front_node = list_del_front_node(&sem->wait_list);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fa57 	bl	8000b10 <list_del_front_node>
		pl_task_insert_tcb_to_rdylist(front_tcb);
 8001662:	3824      	subs	r0, #36	; 0x24
 8001664:	f7ff fd50 	bl	8001108 <pl_task_insert_tcb_to_rdylist>
		pl_exit_critical();
 8001668:	f7ff f9a4 	bl	80009b4 <pl_exit_critical>
		pl_task_context_switch();
 800166c:	f7ff fdea 	bl	8001244 <pl_task_context_switch>
		return OK;
 8001670:	2000      	movs	r0, #0
}
 8001672:	bd10      	pop	{r4, pc}
		return -EFAULT;
 8001674:	f06f 000d 	mvn.w	r0, #13
}
 8001678:	bd10      	pop	{r4, pc}
		return -EFAULT;
 800167a:	f06f 000d 	mvn.w	r0, #13
}
 800167e:	4770      	bx	lr

08001680 <softtimer_daemon_task>:
 *
 * Return:
 *  none.
 ************************************************************************************/
static int softtimer_daemon_task(int argc, char **argv)
{
 8001680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001684:	4e10      	ldr	r6, [pc, #64]	; (80016c8 <softtimer_daemon_task+0x48>)
	USED(argv);
	struct softtimer *first;
	stimer_fun_t stimer_fun;

	while (true) {
		if (list_is_empty(&softtimer_ctrl.head)) {
 8001686:	1d37      	adds	r7, r6, #4
 8001688:	4638      	mov	r0, r7
 800168a:	f7ff fa4d 	bl	8000b28 <list_is_empty>
 800168e:	4604      	mov	r4, r0
 8001690:	b140      	cbz	r0, 80016a4 <softtimer_daemon_task+0x24>
			pl_task_pend(softtimer_ctrl.daemon);
 8001692:	6830      	ldr	r0, [r6, #0]
 8001694:	f7ff ff0c 	bl	80014b0 <pl_task_pend>
		if (list_is_empty(&softtimer_ctrl.head)) {
 8001698:	4638      	mov	r0, r7
 800169a:	f7ff fa45 	bl	8000b28 <list_is_empty>
 800169e:	4604      	mov	r4, r0
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d1f6      	bne.n	8001692 <softtimer_daemon_task+0x12>
			continue;
		}

		pl_enter_critical();
 80016a4:	f7ff f978 	bl	8000998 <pl_enter_critical>
		first = list_first_entry(&softtimer_ctrl.head, struct softtimer, node);
 80016a8:	68b5      	ldr	r5, [r6, #8]
		list_del_node(&first->node);
 80016aa:	4628      	mov	r0, r5
 80016ac:	f7ff fa36 	bl	8000b1c <list_del_node>
		stimer_fun = first->fun;
 80016b0:	f8d5 800c 	ldr.w	r8, [r5, #12]
		first->fun = NULL;
 80016b4:	60ec      	str	r4, [r5, #12]
		pl_exit_critical();
 80016b6:	f7ff f97d 	bl	80009b4 <pl_exit_critical>

		if (stimer_fun != NULL)
 80016ba:	f1b8 0f00 	cmp.w	r8, #0
 80016be:	d0e3      	beq.n	8001688 <softtimer_daemon_task+0x8>
			stimer_fun(first);
 80016c0:	4628      	mov	r0, r5
 80016c2:	47c0      	blx	r8
 80016c4:	e7e0      	b.n	8001688 <softtimer_daemon_task+0x8>
 80016c6:	bf00      	nop
 80016c8:	20002c1c 	.word	0x20002c1c

080016cc <pl_softtimer_core_init>:
 *
 * Return:
 *  Greater than or equal to 0 on success, less than 0 on failure.
 ************************************************************************************/
int pl_softtimer_core_init(void)
{
 80016cc:	b530      	push	{r4, r5, lr}
	list_init(&softtimer_ctrl.head);
	softtimer_ctrl.daemon = pl_task_create("softtimer_daemon", softtimer_daemon_task, 0,
 80016ce:	2400      	movs	r4, #0
	list_init(&softtimer_ctrl.head);
 80016d0:	4d09      	ldr	r5, [pc, #36]	; (80016f8 <pl_softtimer_core_init+0x2c>)
{
 80016d2:	b083      	sub	sp, #12
	list_init(&softtimer_ctrl.head);
 80016d4:	1d28      	adds	r0, r5, #4
 80016d6:	f7ff fa11 	bl	8000afc <list_init>
	softtimer_ctrl.daemon = pl_task_create("softtimer_daemon", softtimer_daemon_task, 0,
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	4622      	mov	r2, r4
 80016e0:	e9cd 4400 	strd	r4, r4, [sp]
 80016e4:	4905      	ldr	r1, [pc, #20]	; (80016fc <pl_softtimer_core_init+0x30>)
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <pl_softtimer_core_init+0x34>)
 80016e8:	f7ff fe6c 	bl	80013c4 <pl_task_create>
 80016ec:	4603      	mov	r3, r0
	                        PL_CFG_SOFTTIMER_DAEMON_TASK_STACK_SIZE, 0, NULL);
	return 0;
}
 80016ee:	4620      	mov	r0, r4
	softtimer_ctrl.daemon = pl_task_create("softtimer_daemon", softtimer_daemon_task, 0,
 80016f0:	602b      	str	r3, [r5, #0]
}
 80016f2:	b003      	add	sp, #12
 80016f4:	bd30      	pop	{r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	20002c1c 	.word	0x20002c1c
 80016fc:	08001681 	.word	0x08001681
 8001700:	08001a04 	.word	0x08001a04

08001704 <pl_lib_ull2str>:
#include <types.h>
#include <errno.h>
#include <lib/string.h>

int pl_lib_ull2str(char *str, unsigned long long n, unsigned char base)
{
 8001704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001708:	f89d 6020 	ldrb.w	r6, [sp, #32]
	int ret;
	int val;
	int i = 1;
	unsigned long long num = n;

	if (base > 16)
 800170c:	2e10      	cmp	r6, #16
 800170e:	d839      	bhi.n	8001784 <pl_lib_ull2str+0x80>
 8001710:	461d      	mov	r5, r3
		return ERROR;

	while(num / base) {
 8001712:	42b2      	cmp	r2, r6
 8001714:	f175 0300 	sbcs.w	r3, r5, #0
 8001718:	4680      	mov	r8, r0
 800171a:	4614      	mov	r4, r2
 800171c:	d32e      	bcc.n	800177c <pl_lib_ull2str+0x78>
 800171e:	4610      	mov	r0, r2
 8001720:	4629      	mov	r1, r5
	int i = 1;
 8001722:	2701      	movs	r7, #1
		num /= base;
 8001724:	2300      	movs	r3, #0
 8001726:	4632      	mov	r2, r6
 8001728:	f7fe fe3e 	bl	80003a8 <__aeabi_uldivmod>
	while(num / base) {
 800172c:	42b0      	cmp	r0, r6
 800172e:	f171 0300 	sbcs.w	r3, r1, #0
		i++;
 8001732:	f107 0701 	add.w	r7, r7, #1
	while(num / base) {
 8001736:	d2f5      	bcs.n	8001724 <pl_lib_ull2str+0x20>
		val = (n % base);
		str[i - 1] = (val > 9) ? (val - 10 + 'a') : (val + '0');
		n /= base;
	}

	str[ret] = '\0';
 8001738:	46ba      	mov	sl, r7
 800173a:	eb08 0907 	add.w	r9, r8, r7
		val = (n % base);
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	4632      	mov	r2, r6
 8001744:	2300      	movs	r3, #0
 8001746:	f7fe fe2f 	bl	80003a8 <__aeabi_uldivmod>
		str[i - 1] = (val > 9) ? (val - 10 + 'a') : (val + '0');
 800174a:	2a09      	cmp	r2, #9
 800174c:	f102 0457 	add.w	r4, r2, #87	; 0x57
 8001750:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001754:	dd0b      	ble.n	800176e <pl_lib_ull2str+0x6a>
 8001756:	f809 4d01 	strb.w	r4, [r9, #-1]!
	for(; i > 0; i--) {
 800175a:	45c8      	cmp	r8, r9
		n /= base;
 800175c:	4604      	mov	r4, r0
 800175e:	460d      	mov	r5, r1
	for(; i > 0; i--) {
 8001760:	d1ed      	bne.n	800173e <pl_lib_ull2str+0x3a>
	str[ret] = '\0';
 8001762:	2300      	movs	r3, #0
 8001764:	f808 300a 	strb.w	r3, [r8, sl]
	return ret;
}
 8001768:	4638      	mov	r0, r7
 800176a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		str[i - 1] = (val > 9) ? (val - 10 + 'a') : (val + '0');
 800176e:	f809 3d01 	strb.w	r3, [r9, #-1]!
	for(; i > 0; i--) {
 8001772:	45c1      	cmp	r9, r8
		n /= base;
 8001774:	4604      	mov	r4, r0
 8001776:	460d      	mov	r5, r1
	for(; i > 0; i--) {
 8001778:	d1e1      	bne.n	800173e <pl_lib_ull2str+0x3a>
 800177a:	e7f2      	b.n	8001762 <pl_lib_ull2str+0x5e>
	while(num / base) {
 800177c:	f04f 0a01 	mov.w	sl, #1
	int i = 1;
 8001780:	4657      	mov	r7, sl
 8001782:	e7da      	b.n	800173a <pl_lib_ull2str+0x36>
		return ERROR;
 8001784:	f06f 0724 	mvn.w	r7, #36	; 0x24
 8001788:	e7ee      	b.n	8001768 <pl_lib_ull2str+0x64>
 800178a:	bf00      	nop

0800178c <pl_lib_ll2str>:

int pl_lib_ll2str(char *str, long long n, unsigned char base)
{
 800178c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int ret;
	int i = 0;

	if (n < 0) {
 8001790:	1e1c      	subs	r4, r3, #0
{
 8001792:	4680      	mov	r8, r0
 8001794:	4615      	mov	r5, r2
 8001796:	f89d 6020 	ldrb.w	r6, [sp, #32]
	if (n < 0) {
 800179a:	da05      	bge.n	80017a8 <pl_lib_ll2str+0x1c>
		i = 1;
		str[0] = '-';
 800179c:	232d      	movs	r3, #45	; 0x2d
		n = (~(unsigned long long)n) + 1;
 800179e:	4255      	negs	r5, r2
 80017a0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
		str[0] = '-';
 80017a4:	f808 3b01 	strb.w	r3, [r8], #1
	if (base > 16)
 80017a8:	2e10      	cmp	r6, #16
 80017aa:	d836      	bhi.n	800181a <pl_lib_ll2str+0x8e>
	while(num / base) {
 80017ac:	42b5      	cmp	r5, r6
 80017ae:	f174 0300 	sbcs.w	r3, r4, #0
 80017b2:	d32e      	bcc.n	8001812 <pl_lib_ll2str+0x86>
 80017b4:	4628      	mov	r0, r5
 80017b6:	4621      	mov	r1, r4
	int i = 1;
 80017b8:	2701      	movs	r7, #1
		num /= base;
 80017ba:	2300      	movs	r3, #0
 80017bc:	4632      	mov	r2, r6
 80017be:	f7fe fdf3 	bl	80003a8 <__aeabi_uldivmod>
	while(num / base) {
 80017c2:	42b0      	cmp	r0, r6
 80017c4:	f171 0300 	sbcs.w	r3, r1, #0
		i++;
 80017c8:	f107 0701 	add.w	r7, r7, #1
	while(num / base) {
 80017cc:	d2f5      	bcs.n	80017ba <pl_lib_ll2str+0x2e>
	str[ret] = '\0';
 80017ce:	46ba      	mov	sl, r7
 80017d0:	eb08 0907 	add.w	r9, r8, r7
		val = (n % base);
 80017d4:	4621      	mov	r1, r4
 80017d6:	4628      	mov	r0, r5
 80017d8:	4632      	mov	r2, r6
 80017da:	2300      	movs	r3, #0
 80017dc:	f7fe fde4 	bl	80003a8 <__aeabi_uldivmod>
		str[i - 1] = (val > 9) ? (val - 10 + 'a') : (val + '0');
 80017e0:	2a09      	cmp	r2, #9
 80017e2:	f102 0457 	add.w	r4, r2, #87	; 0x57
 80017e6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 80017ea:	dd0b      	ble.n	8001804 <pl_lib_ll2str+0x78>
 80017ec:	f809 4d01 	strb.w	r4, [r9, #-1]!
	for(; i > 0; i--) {
 80017f0:	45c8      	cmp	r8, r9
		n /= base;
 80017f2:	4605      	mov	r5, r0
 80017f4:	460c      	mov	r4, r1
	for(; i > 0; i--) {
 80017f6:	d1ed      	bne.n	80017d4 <pl_lib_ll2str+0x48>
	str[ret] = '\0';
 80017f8:	2300      	movs	r3, #0
 80017fa:	f808 300a 	strb.w	r3, [r8, sl]
	}

	ret = pl_lib_ull2str(&str[i], n, base);
	return ret;
}
 80017fe:	4638      	mov	r0, r7
 8001800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		str[i - 1] = (val > 9) ? (val - 10 + 'a') : (val + '0');
 8001804:	f809 3d01 	strb.w	r3, [r9, #-1]!
	for(; i > 0; i--) {
 8001808:	45c8      	cmp	r8, r9
		n /= base;
 800180a:	4605      	mov	r5, r0
 800180c:	460c      	mov	r4, r1
	for(; i > 0; i--) {
 800180e:	d1e1      	bne.n	80017d4 <pl_lib_ll2str+0x48>
 8001810:	e7f2      	b.n	80017f8 <pl_lib_ll2str+0x6c>
	while(num / base) {
 8001812:	f04f 0a01 	mov.w	sl, #1
	int i = 1;
 8001816:	4657      	mov	r7, sl
 8001818:	e7da      	b.n	80017d0 <pl_lib_ll2str+0x44>
		return ERROR;
 800181a:	f06f 0724 	mvn.w	r7, #36	; 0x24
	return ret;
 800181e:	e7ee      	b.n	80017fe <pl_lib_ll2str+0x72>

08001820 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001820:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001822:	e003      	b.n	800182c <LoopCopyDataInit>

08001824 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <LoopFillZerobss+0x14>)
	ldr	r3, [r3, r1]
 8001826:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001828:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800182a:	3104      	adds	r1, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <LoopFillZerobss+0x18>)
	ldr	r3, =_edata
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <LoopFillZerobss+0x1c>)
	adds	r2, r0, r1
 8001830:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001832:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001834:	d3f6      	bcc.n	8001824 <CopyDataInit>
	ldr	r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopFillZerobss+0x20>)
	b	LoopFillZerobss
 8001838:	e002      	b.n	8001840 <LoopFillZerobss>

0800183a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800183a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800183c:	f842 3b04 	str.w	r3, [r2], #4

08001840 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <LoopFillZerobss+0x24>)
	cmp	r2, r3
 8001842:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001844:	d3f9      	bcc.n	800183a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001846:	f7fe ff57 	bl	80006f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800184a:	f7fe ff31 	bl	80006b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	pl_callee_entry
 800184e:	f7ff f8c5 	bl	80009dc <pl_callee_entry>
	bx	lr
 8001852:	4770      	bx	lr
	ldr	r3, =_sidata
 8001854:	08001bd8 	.word	0x08001bd8
	ldr	r0, =_sdata
 8001858:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800185c:	20000030 	.word	0x20000030
	ldr	r2, =_sbss
 8001860:	20000030 	.word	0x20000030
	ldr	r3, = _ebss
 8001864:	20002c28 	.word	0x20002c28

08001868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC1_2_IRQHandler>
	...

0800186c <pl_port_switch_context>:

.section .text.pl_port_switch_context
.type pl_port_switch_context, %function

pl_port_switch_context:
	push  {r1,r2, r3}
 800186c:	b40e      	push	{r1, r2, r3}
	ldr   r1, =SCB_ICSR_REG
 800186e:	4904      	ldr	r1, [pc, #16]	; (8001880 <pl_port_switch_context+0x14>)
	ldr   r2, [r1,#0]
 8001870:	680a      	ldr	r2, [r1, #0]
	ldr   r3, =0x10000000
 8001872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	orr   r2, r2, r3
 8001876:	ea42 0203 	orr.w	r2, r2, r3
	str   r2, [r1,#0]
 800187a:	600a      	str	r2, [r1, #0]
	pop   {r1,r2, r3}
 800187c:	bc0e      	pop	{r1, r2, r3}
	bx    lr
 800187e:	4770      	bx	lr
	ldr   r1, =SCB_ICSR_REG
 8001880:	e000ed04 	.word	0xe000ed04

08001884 <PendSV_Handler>:

.section .text.PendSV_Handler
.type PendSV_Handler, %function

PendSV_Handler:
	cpsid i /* disbale interrupt */
 8001884:	b672      	cpsid	i
	/* clear pending bit of PendSV */
	ldr   r1, =SCB_ICSR_REG
 8001886:	4912      	ldr	r1, [pc, #72]	; (80018d0 <switch_bottom+0x20>)
	ldr   r2, [r1]
 8001888:	680a      	ldr	r2, [r1, #0]
	orr   r2, r2, #0x80000000
 800188a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
	str   r2, [r1]
 800188e:	600a      	str	r2, [r1, #0]

	ldr   r1, =is_first_switch
 8001890:	4910      	ldr	r1, [pc, #64]	; (80018d4 <switch_bottom+0x24>)
	ldr   r2, [r1]
 8001892:	680a      	ldr	r2, [r1, #0]
	ldr   r3, =0xff
 8001894:	f04f 03ff 	mov.w	r3, #255	; 0xff
	str   r3, [r1]
 8001898:	600b      	str	r3, [r1, #0]
	cmp   r2, #0
 800189a:	2a00      	cmp	r2, #0
	beq   switch_bottom
 800189c:	d008      	beq.n	80018b0 <switch_bottom>

0800189e <switch_top>:

switch_top:
	/* save context */
	mrs   r0, psp
 800189e:	f3ef 8009 	mrs	r0, PSP
	stmdb r0!, {r4-r11}
 80018a2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	push {lr}
 80018a6:	b500      	push	{lr}
	/* r0 = pl_callee_save_curr_context_sp(sp) */
	bl   pl_callee_save_curr_context_sp
 80018a8:	f7ff fc24 	bl	80010f4 <pl_callee_save_curr_context_sp>
	pop  {lr}
 80018ac:	f85d eb04 	ldr.w	lr, [sp], #4

080018b0 <switch_bottom>:

switch_bottom:

	cpsie i  /* enable interrupt */
 80018b0:	b662      	cpsie	i
	push {lr}
 80018b2:	b500      	push	{lr}
	/* r0 = pl_callee_get_next_context() */
	bl   pl_callee_get_next_context_sp
 80018b4:	f7ff fc86 	bl	80011c4 <pl_callee_get_next_context_sp>
	pop  {lr}
 80018b8:	f85d eb04 	ldr.w	lr, [sp], #4

	cpsid i  /* disable interrupt */
 80018bc:	b672      	cpsid	i
	/* restore context */
	ldmia r0!, {r4-r11}
 80018be:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	msr   psp, r0
 80018c2:	f380 8809 	msr	PSP, r0
	orr   lr, lr, #0x04
 80018c6:	f04e 0e04 	orr.w	lr, lr, #4
	cpsie i  /* enable interrupt */
 80018ca:	b662      	cpsie	i
	bx    lr
 80018cc:	4770      	bx	lr
 80018ce:	0000      	.short	0x0000
	ldr   r1, =SCB_ICSR_REG
 80018d0:	e000ed04 	.word	0xe000ed04
	ldr   r1, =is_first_switch
 80018d4:	20000000 	.word	0x20000000

080018d8 <pl_port_cpu_isb>:
	bx  lr

.section .text.pl_port_cpu_isb
.type pl_port_cpu_isb, %function
pl_port_cpu_isb:
	isb 0xF
 80018d8:	f3bf 8f6f 	isb	sy
	bx  lr
 80018dc:	4770      	bx	lr
 80018de:	0000      	movs	r0, r0
 80018e0:	656c6469 	.word	0x656c6469
 80018e4:	6b736174 	.word	0x6b736174
 80018e8:	3d3d3d3d 	.word	0x3d3d3d3d
 80018ec:	3d3d3d3d 	.word	0x3d3d3d3d
 80018f0:	3d3d3d3d 	.word	0x3d3d3d3d
 80018f4:	3d3d3d3d 	.word	0x3d3d3d3d
 80018f8:	3d3d3d3d 	.word	0x3d3d3d3d
 80018fc:	3d3d3d3d 	.word	0x3d3d3d3d
 8001900:	3d3d3d3d 	.word	0x3d3d3d3d
 8001904:	3d3d3d3d 	.word	0x3d3d3d3d
 8001908:	3d3d3d3d 	.word	0x3d3d3d3d
 800190c:	3d3d3d3d 	.word	0x3d3d3d3d
 8001910:	3d3d3d3d 	.word	0x3d3d3d3d
 8001914:	0d3d3d3d 	.word	0x0d3d3d3d
 8001918:	0000000a 	.word	0x0000000a
 800191c:	656c6469 	.word	0x656c6469
 8001920:	7361745f 	.word	0x7361745f
 8001924:	0000006b 	.word	0x0000006b
 8001928:	7272655b 	.word	0x7272655b
 800192c:	3e3d5d6f 	.word	0x3e3d5d6f
 8001930:	5353415b 	.word	0x5353415b
 8001934:	5d545245 	.word	0x5d545245
 8001938:	6e75663a 	.word	0x6e75663a
 800193c:	73253a63 	.word	0x73253a63
 8001940:	696c202c 	.word	0x696c202c
 8001944:	253a656e 	.word	0x253a656e
 8001948:	000a0d64 	.word	0x000a0d64

0800194c <__func__.0>:
 800194c:	645f6c70 6e695f6f 61637469 00736c6c     pl_do_initcalls.

0800195c <__func__.1>:
 800195c:	645f6c70 61655f6f 5f796c72 74696e69     pl_do_early_init
 800196c:	6c6c6163 00000073                       calls...

08001974 <__func__.0>:
 8001974:	645f6c70 75616665 6d5f746c 6f706d65     pl_default_mempo
 8001984:	695f6c6f 0074696e 6c796472 5f747369     ol_init.rdylist_
 8001994:	65646f6e 6d756e5f 0d64253a 0000000a     node_num:%d.....
 80019a4:	61657263 253a6574 61742073 0a0d6b73     create:%s task..
 80019b4:	00000000 616c6564 65685f79 00006461     ....delay_head..
 80019c4:	666e695b 61745d6f 63206b73 2065726f     [info]task core 
 80019d4:	74696e69 63757320 73736563 6c6c7566     init successfull
 80019e4:	000a0d79 7272655b 6c705d6f 6d65735f     y...[erro]pl_sem
 80019f4:	6c6c6120 6620636f 656c6961 000a0d64      alloc failed...
 8001a04:	74666f73 656d6974 61645f72 6e6f6d65     softtimer_daemon
 8001a14:	00000000                                ....

08001a18 <_init>:
 8001a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1a:	bf00      	nop
 8001a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a1e:	bc08      	pop	{r3}
 8001a20:	469e      	mov	lr, r3
 8001a22:	4770      	bx	lr

08001a24 <_fini>:
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	bf00      	nop
 8001a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a2a:	bc08      	pop	{r3}
 8001a2c:	469e      	mov	lr, r3
 8001a2e:	4770      	bx	lr

08001a30 <g_hiprio_idx_tbl>:
 8001a30:	0000 0001 0002 0001 0003 0001 0002 0001     ................
 8001a40:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001a50:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 8001a60:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001a70:	0006 0001 0002 0001 0003 0001 0002 0001     ................
 8001a80:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001a90:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 8001aa0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001ab0:	0007 0001 0002 0001 0003 0001 0002 0001     ................
 8001ac0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001ad0:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 8001ae0:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001af0:	0006 0001 0002 0001 0003 0001 0002 0001     ................
 8001b00:	0004 0001 0002 0001 0003 0001 0002 0001     ................
 8001b10:	0005 0001 0002 0001 0003 0001 0002 0001     ................
 8001b20:	0004 0001 0002 0001 0003 0001 0002 0001     ................
